{
    "project": {
        "name": "p5.play",
        "description": "A p5.js library for games and playthings",
        "version": "3",
        "url": "http://molleindustria.org/",
        "logo": "../icon.png"
    },
    "files": {
        "v3/p5.play-beta.js": {
            "name": "v3/p5.play-beta.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "v3/p5.play.js": {
            "name": "v3/p5.play.js",
            "modules": {},
            "classes": {
                "Sprite": 1,
                "SpriteAnimation": 1,
                "Group": 1,
                "World": 1,
                "Camera": 1,
                "Tiles": 1,
                "p5.play": 1,
                "InputDevice": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "v3/planck.js": {
            "name": "v3/planck.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "v3/planck.min.js": {
            "name": "v3/planck.min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "v3/p5.play.js",
            "line": 107,
            "description": "Look at the Sprite reference pages before reading these docs.\n\nhttps://p5play.org/learn/sprite.html\n\nEvery sprite you create is added to the allSprites\ngroup and put on the top layer, in front of all other\npreviously created sprites.",
            "example": [
                "\n\n  let rectangle = new Sprite(x, y, width, height);\n\n  let circle = new Sprite(x, y, diameter);\n\n  let line = new Sprite(x, y, [length, angle]);"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "aniName|ani|image",
                    "description": "",
                    "type": "String|SpriteAnimation|p5.Image",
                    "optional": true
                },
                {
                    "name": "x",
                    "description": "Horizontal position of the sprite",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Vertical position of the sprite",
                    "type": "Number"
                },
                {
                    "name": "width|diameter",
                    "description": "Width of the placeholder rectangle and of\nthe collider until an image or new collider are set. *OR* If height is not\nset then this parameter becomes the diameter of the placeholder circle.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "Height of the placeholder rectangle and of the collider\nuntil an image or new collider are set",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "physics",
                    "description": "collider type is 'dynamic' by default, can be\n'static', 'kinematic', or 'none'",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "SpriteAnimation": {
            "name": "SpriteAnimation",
            "shortname": "SpriteAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "v3/p5.play.js",
            "line": 3002,
            "description": "Look at the Animation reference pages before reading these docs.\n\nhttps://p5play.org/learn/sprite_animation.html\n\nA SpriteAnimation object contains a series of images (p5.Image objects)\nthat can be displayed sequentially.\n\nA sprite can have multiple labeled animations, see Sprite.addAnimation\nand Sprite.changeAnimation, but you can also create animations that\ncan be used without being added to a sprite first.\n\nAn animation can be created either from a list of images or sequentially\nnumbered images. p5.play will try to detect the sequence pattern.\n\nFor example if the image file path is \"image1.png\" and the last frame\nindex is 3 then \"image2.png\" and \"image3.png\" will be loaded as well.",
            "example": [
                "\n\nlet shapeShifter = new SpriteAnimation(\"dog.png\", \"cat.png\", \"snake.png\");\nlet walking = new SpriteAnimation(\"walking0001.png\", 5);"
            ],
            "is_constructor": 1
        },
        "Group": {
            "name": "Group",
            "shortname": "Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "v3/p5.play.js",
            "line": 3791,
            "description": "Look at the Group reference pages before reading these docs.\n\nhttps://p5play.org/learn/group.html\n\nIn p5.play groups are collections of sprites with similar behavior.\nFor example a group may contain all the coin sprites that the\nplayer can collect.\n\nGroup extends Array. You can use them in for loops just like arrays\nsince they inherit all the functions and properties of standard\narrays such as group.length\n\nSince groups just contain references to sprites, a sprite can be in\nmultiple groups.\n\nsprite.remove() removes the sprite from all the groups\nit belongs to. group.removeAll() removes all the sprites from\na group.\n\nThe top level group is a p5 instance level variable named\n'allSprites' that contains all the sprites added to the sketch.",
            "is_constructor": 1
        },
        "World": {
            "name": "World",
            "shortname": "World",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "v3/p5.play.js",
            "line": 4652,
            "description": "Look at the World reference pages before reading these docs.\n\nhttps://p5play.org/learn/world.html",
            "is_constructor": 1
        },
        "Camera": {
            "name": "Camera",
            "shortname": "Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "v3/p5.play.js",
            "line": 4876,
            "description": "Look at the Camera reference pages before reading these docs.\n\nhttps://p5play.org/learn/camera.html\n\nA camera facilitates scrolling and zooming for scenes extending beyond\nthe canvas. A camera has a position, a zoom factor, and the mouse\ncoordinates relative to the view.\nThe camera is automatically created on the first draw cycle.\n\nIn p5.js terms the camera wraps the whole drawing cycle in a\ntransformation matrix but it can be disable anytime during the draw\ncycle for example to draw interface elements in an absolute position.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Initial x coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Initial y coordinate",
                    "type": "Number"
                },
                {
                    "name": "zoom",
                    "description": "magnification",
                    "type": "Number"
                }
            ]
        },
        "Tiles": {
            "name": "Tiles",
            "shortname": "Tiles",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "v3/p5.play.js",
            "line": 5100,
            "description": "Look at the Tiles reference pages before reading these docs.\n\nhttps://p5play.org/learn/tiles.html",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tiles",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "p5.play": {
            "name": "p5.play",
            "shortname": "p5.play",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "v3/p5.play.js",
            "line": 5165,
            "description": "Look at the p5.play reference pages before reading these docs.\n\nhttps://p5play.org/learn"
        },
        "InputDevice": {
            "name": "InputDevice",
            "shortname": "InputDevice",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "v3/p5.play.js",
            "line": 6107,
            "description": "Look at the Input reference pages before reading these docs.\n\nhttps://p5play.org/learn/input_devices.html\n\nRoot class for storing the state of inputs (mouse, keyboard,\ngamepads).\n\n-3 means input was released after being held, pressed for 12 frames\n-2 means input was pressed and released on the same frame\n-1 means input was released\n0 means input is not pressed\n1 means input was pressed\n>1 means input is still being pressed\n12 means input was held\n>12 means input is being held"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "v3/p5.play-beta.js",
            "line": 1,
            "description": "p5.play",
            "version": "3.5",
            "author": "quinton-ashley",
            "year": "2023",
            "license": "gpl-v3-only",
            "descripton": "p5.play is a 2D game engine that uses planck (Box2D) to simulate\nphysics and provides sprites, a tile system, input handling, and animations!",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 228,
            "description": "Groups the sprite belongs to, including allSprites",
            "itemtype": "property",
            "name": "groups",
            "type": "{Array}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 237,
            "description": "Keys are the animation label, values are SpriteAnimation objects.",
            "itemtype": "property",
            "name": "animations",
            "type": "{Object}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 245,
            "description": "If false, animations that are stopped before they are completed,\ntypically by a call to sprite.changeAni, will start at the frame\nthey were stopped at. If true, animations will always start playing from\nframe 0 unless specified by the user in a separate anim.changeFrame\ncall.",
            "itemtype": "property",
            "name": "autoResetAnimations",
            "type": "{SpriteAnimation}",
            "default": "false",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 258,
            "description": "True if the sprite was removed from the world",
            "itemtype": "property",
            "name": "removed",
            "type": "{Boolean}",
            "default": "false",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 286,
            "description": "Cycles before self removal.\nSet it to initiate a countdown, every draw cycle the property is\nreduced by 1 unit. If less than or equal to 0, this sprite will be removed.",
            "itemtype": "property",
            "name": "life",
            "type": "{Number}",
            "default": "100000000",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 297,
            "description": "The sprite's visibility.",
            "itemtype": "property",
            "name": "visible",
            "type": "{Boolean}",
            "default": "true",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 306,
            "description": "Contains all the collision callback functions for this sprite\nwhen it comes in contact with other sprites or groups.",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 315,
            "description": "Contains all the overlap callback functions for this sprite\nwhen it comes in contact with other sprites or groups.",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 506,
            "description": "When the sprite.debug property is set to true you can see the\nsprite's physics body collider.",
            "itemtype": "property",
            "name": "debug",
            "type": "{boolean}",
            "default": "false",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 592,
            "description": "If no image or animations are set this is color of the\nplaceholder rectangle",
            "itemtype": "property",
            "name": "color",
            "type": "{color}",
            "default": "a randomly generated color",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 617,
            "description": "Similar to createSprite and the Sprite constructor except\noffset is the distance the collider is from the center of the\nsprite.",
            "params": [
                {
                    "name": "offsetX",
                    "description": "distance from the center of the sprite",
                    "type": "Number"
                },
                {
                    "name": "offsetY",
                    "description": "distance from the center of the sprite",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 823,
            "description": "Removes the physics body colliders from the sprite but not\noverlap sensors.",
            "itemtype": "method",
            "name": "removeColliders",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 836,
            "description": "EXPERIMENTAL! This function is incomplete and will be changed.\n\nAdds a joint between this sprite and another sprite.",
            "params": [
                {
                    "name": "spriteB",
                    "description": "the sprite to add a joint to",
                    "type": "Sprite"
                },
                {
                    "name": "type",
                    "description": "the type of joint",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "props",
                    "description": "the joint options",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 935,
            "description": "Removes overlap sensors from the sprite.",
            "itemtype": "method",
            "name": "removeSensors",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 966,
            "description": "Clones the collider's props to be transferred to a new collider.",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1009,
            "description": "This property disables the ability for a sprite to \"sleep\".\n\n\"Sleeping\" sprites are not included in the physics simulation, a\nsprite starts \"sleeping\" when it stops moving and doesn't collide\nwith anything that it wasn't already _touching.",
            "itemtype": "property",
            "name": "allowSleeping",
            "type": "Boolean",
            "default": "true",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1027,
            "description": "Reference to the sprite's current animation.",
            "itemtype": "property",
            "name": "animation",
            "type": "{SpriteAnimation}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1051,
            "description": "The bounciness of the sprite's physics body.",
            "itemtype": "property",
            "name": "bounciness",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1067,
            "description": "The center of mass of the sprite's physics body.",
            "itemtype": "property",
            "name": "centerOfMass",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1077,
            "description": "The sprite's collider type. Default is 'dynamic'.\n\nThe collider type can be one of the following strings:\n'dynamic', 'static', 'kinematic', 'none'.",
            "itemtype": "property",
            "name": "collider",
            "type": "{String}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1145,
            "description": "The sprite's current color. By default sprites get a random color.",
            "itemtype": "property",
            "name": "color",
            "type": "{p5.Color}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1176,
            "description": "The sprite's current text color. By default sprites get a random text color.",
            "itemtype": "property",
            "name": "textColor",
            "type": "{p5.Color}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1195,
            "description": "The density of the sprite's physics body.",
            "itemtype": "property",
            "name": "density",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1211,
            "description": "Use .layer instead.",
            "deprecated": true,
            "deprecationMessage": "depth",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1225,
            "description": "The angle of the sprite's movement or it's rotation angle if the\nsprite is not moving.",
            "itemtype": "property",
            "name": "direction",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1269,
            "description": "The amount of resistance a sprite has to being moved.",
            "itemtype": "property",
            "name": "drag",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1283,
            "description": "Displays the sprite.\n\nThis function is called automatically at\nthe end of each p5.js draw function call but it can also be run\nseparately to customize the order sprites are drawn in relation\nto other stuff drawn to the p5.js canvas. Also see the sprite.layer\nproperty.\n\nA sprite's draw function can be overridden with a\ncustom draw function, in which the center of the sprite is\nat (0, 0).",
            "example": [
                "\nsprite.draw = function() {\n  // an oval\n  ellipse(0,0,20,10);\n}"
            ],
            "itemtype": "method",
            "name": "draw",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1312,
            "description": "True if the sprite's physics body is dynamic.",
            "itemtype": "property",
            "name": "dynamic",
            "type": "{Boolean}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1326,
            "description": "If true the sprite can not rotate.",
            "itemtype": "property",
            "name": "rotationLock",
            "type": "{Boolean}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1340,
            "description": "Returns the first node in a linked list of the planck physics\nbody's fixtures.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "fixture",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1350,
            "description": "Returns the first node in a linked list of the planck physics\nbody's fixtures.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "fixtureList",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1362,
            "description": "The amount the sprite's physics body resists moving\nwhen rubbing against another physics body.",
            "itemtype": "property",
            "name": "friction",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1379,
            "description": "The sprite's heading. This is a string that can be set to\n\"up\", \"down\", \"left\", \"right\", \"upRight\", \"upLeft\", \"downRight\"\n\nIt ignores cardinal direction word order, capitalization, spaces,\nunderscores, and dashes.",
            "itemtype": "property",
            "name": "heading",
            "type": "{String}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1396,
            "description": "Use .static instead.",
            "deprecated": true,
            "deprecationMessage": "immovable",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1416,
            "description": "A reference to the sprite's current animation.",
            "itemtype": "property",
            "name": "img",
            "type": "{SpriteAnimation}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1429,
            "description": "A reference to the sprite's current animation.",
            "itemtype": "property",
            "name": "image",
            "type": "{SpriteAnimation}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1442,
            "description": "True if the sprite is moving.",
            "itemtype": "property",
            "name": "isMoving",
            "type": "{Boolean}",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1453,
            "description": "Set this to true if the sprite goes really fast to prevent\ninaccurate physics simulation.",
            "itemtype": "property",
            "name": "isSuperFast",
            "type": "{Boolean}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1475,
            "description": "True if the sprite's physics body is kinematic.",
            "itemtype": "property",
            "name": "kinematic",
            "type": "{Boolean}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1488,
            "description": "The mass of the sprite's physics body.",
            "itemtype": "property",
            "name": "mass",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1504,
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1522,
            "description": "The angle of the sprite's rotation, not the direction it is moving.",
            "itemtype": "property",
            "name": "rotation",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1546,
            "description": "The amount of the sprite resists rotating.",
            "itemtype": "property",
            "name": "rotationDrag",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1559,
            "description": "The speed of the sprite's rotation.",
            "itemtype": "property",
            "name": "rotationSpeed",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1574,
            "description": "Scale of the sprite's physics body. Default is {x: 1, y: 1}\n\nThe getter for sprite.scale returns the scale as an object with\nx and y properties.\n\nThe valueOf function for sprite.scale returns the scale as a\nnumber. This enables users to do things like `sprite.scale *= 2`\nto double the sprite's scale.",
            "itemtype": "property",
            "name": "scale",
            "type": "{Object}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1615,
            "description": "Wake a sprite up or put it to sleep.\n\n\"Sleeping\" sprites are not included in the physics simulation, a\nsprite starts \"sleeping\" when it stops moving and doesn't collide\nwith anything that it wasn't already _touching.",
            "itemtype": "property",
            "name": "sleeping",
            "type": "{Boolean}",
            "default": "true",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1635,
            "deprecated": true,
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1643,
            "description": "The sprite's speed.",
            "itemtype": "property",
            "name": "speed",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1658,
            "description": "Is the sprite's physics collider static?",
            "itemtype": "property",
            "name": "static",
            "type": "{Boolean}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1672,
            "description": "Apply a torque on the sprite's physics body.\nTorque is the force that causes rotation.\nA positive torque will rotate the sprite clockwise.\nA negative torque will rotate the sprite counter-clockwise.",
            "itemtype": "property",
            "name": "torque",
            "class": "Sprite",
            "subprops": [
                {
                    "name": "torque",
                    "description": "The amount of torque to apply.",
                    "type": "Number"
                }
            ]
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1685,
            "description": "The sprite's vertices.",
            "itemtype": "property",
            "name": "vertices",
            "type": "{Array} An array of p5.Vector objects.",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1718,
            "description": "The horizontal position of the sprite.",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1735,
            "description": "The vertical position of the sprite.",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1752,
            "description": "Set the position vector {x, y}",
            "itemtype": "property",
            "name": "pos",
            "type": "{Object}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1762,
            "description": "The width of the sprite.",
            "itemtype": "property",
            "name": "w",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1779,
            "description": "Half the width of the sprite.",
            "itemtype": "property",
            "name": "hw",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1790,
            "description": "The width of the sprite.",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1801,
            "description": "Half the width of the sprite.",
            "itemtype": "property",
            "name": "halfWidth",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1812,
            "description": "The height of the sprite.",
            "itemtype": "property",
            "name": "h",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1834,
            "description": "Half the height of the sprite.",
            "itemtype": "property",
            "name": "hh",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1845,
            "description": "The height of the sprite.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1856,
            "description": "Half the height of the sprite.",
            "itemtype": "property",
            "name": "halfHeight",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1867,
            "description": "The diameter of a circular sprite.",
            "itemtype": "property",
            "name": "d",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1911,
            "description": "The diameter of a circular sprite.",
            "itemtype": "property",
            "name": "diameter",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1923,
            "description": "The radius of a circular sprite.",
            "itemtype": "property",
            "name": "r",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1935,
            "description": "The radius of a circular sprite.",
            "itemtype": "property",
            "name": "radius",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1947,
            "description": "Resizes the collider of the sprite.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "scalars",
                    "description": "The x and y scalars to resize the collider by.",
                    "type": "*"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 1972,
            "description": "Validate convexity.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "vecs",
                    "description": "an array of planck.Vec2 vertices",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true if the polygon is convex"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2007,
            "description": "The kind of shape: 'box', 'circle', 'chain', or 'polygon'.",
            "itemtype": "property",
            "name": "shape",
            "type": "{String}",
            "default": "box",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2036,
            "description": "You can set the sprite's update function to your own custom\nupdate function that will be run after every draw call or when\nthe updateSprites function is called.",
            "itemtype": "method",
            "name": "update",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2085,
            "description": "Updates the sprite. Called automatically at the end of the draw\ncycle.",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2134,
            "description": "Default draw",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2163,
            "description": "Displays the Sprite with rotation and scaling applied before\nthe sprite's draw function is called.",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2212,
            "description": "Draws a fixture. Used to draw the sprite's physics body.",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2247,
            "description": "Apply a force that is scaled to the sprite's mass.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "forceVector",
                    "description": "force vector",
                    "type": "p5.Vector|Array"
                },
                {
                    "name": "forceOrigin",
                    "description": "force origin",
                    "type": "p5.Vector|Array",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2273,
            "description": "Deprecated: set sprite.vel instead.\n\nSets the velocity vector.",
            "deprecated": true,
            "deprecationMessage": "setVelocity",
            "params": [
                {
                    "name": "vector|x",
                    "description": "vector or horizontal velocity",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "vertical velocity",
                    "type": "Number"
                }
            ],
            "example": [
                "\nsprite.vel = createVector(1, 2);\n// OR\nsprite.vel.x = 1;\nsprite.vel.y = 2;"
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2297,
            "description": "Deprecated: set direction and set speed separately\n\nSets the speed of the sprite.\nThe action overwrites the current velocity.\nIf direction is not supplied, the current direction is maintained.\nIf direction is not supplied and there is no current velocity, the\ncurrent rotation angle used for the direction.",
            "deprecated": true,
            "deprecationMessage": "setSpeed",
            "params": [
                {
                    "name": "speed",
                    "description": "Scalar speed",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "angle",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2316,
            "description": "Add to the speed of the sprite.\nIf direction is not supplied, the current direction is maintained.\nIf direction is not supplied and there is no current velocity, the * current rotation angle used for the direction.",
            "itemtype": "method",
            "name": "addSpeed",
            "params": [
                {
                    "name": "speed",
                    "description": "Scalar speed",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "Direction in degrees",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2332,
            "description": "Move a sprite towards a position.",
            "itemtype": "method",
            "name": "moveTowards",
            "params": [
                {
                    "name": "x|position",
                    "description": "destination x or any object with x and y properties",
                    "type": "Number|Object"
                },
                {
                    "name": "y",
                    "description": "destination y",
                    "type": "Number"
                },
                {
                    "name": "tracking",
                    "description": "[optional] 1 represents 1:1 tracking, the mouse moves to the destination immediately, 0 represents no tracking. Default is 0.1 (10% tracking).",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2369,
            "description": "Move a sprite away from a position.",
            "itemtype": "method",
            "name": "moveAway",
            "params": [
                {
                    "name": "x|position",
                    "description": "x or any object with x and y properties",
                    "type": "Number|Object"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "repel",
                    "description": "[optional] the higher the value, the faster the sprite moves away. Default is 0.1 (10% repel).",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2383,
            "description": "Move the sprite a certain distance from its current position.",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "distance",
                    "description": "[optional]",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "[optional]",
                    "type": "Number|String"
                },
                {
                    "name": "speed",
                    "description": "[optional]",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "resolves when the movement is complete or cancelled",
                "type": "Promise"
            },
            "example": [
                "\nsprite.move(distance);\nsprite.move(distance, direction);\nsprite.move(distance, direction, speed);\n\nsprite.move(directionName);\nsprite.move(directionName, speed);\nsprite.move(directionName, speed, distance); // deprecated usage"
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2426,
            "description": "Move the sprite to a position.",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x|position",
                    "description": "destination x or any object with x and y properties",
                    "type": "Number|Object"
                },
                {
                    "name": "y",
                    "description": "destination y",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "[optional]",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "resolves when the movement is complete or cancelled",
                "type": "Promise"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2525,
            "description": "Pushes the sprite toward a point.\nThe force is added to the current velocity.\n\nLegacy method, use moveTo or moveTowards instead.",
            "deprecated": true,
            "params": [
                {
                    "name": "magnitude",
                    "description": "Scalar speed to add",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "Direction x coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Direction y coordinate",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2555,
            "itemtype": "method",
            "name": "rotateTowards",
            "params": [
                {
                    "name": "x",
                    "description": "position to rotate towards",
                    "type": "*"
                },
                {
                    "name": "y",
                    "description": "position to rotate towards",
                    "type": "*"
                },
                {
                    "name": "tracking",
                    "description": "percent of the distance to rotate on each frame towards the target angle, default is 0.1 (10%)",
                    "type": "*"
                },
                {
                    "name": "facing",
                    "description": "rotation angle the sprite should be at when \"facing\" the position, default is 0",
                    "type": "*"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2573,
            "description": "Finds the minimium amount the sprite would have to rotate to\n\"face\" a position at a rotation.",
            "itemtype": "method",
            "name": "angleTo",
            "params": [
                {
                    "name": "x|position",
                    "description": "",
                    "type": "Number|Object"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "facing",
                    "description": "rotation angle the sprite should be at when \"facing\" the position, default is 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "minimum angle of rotation to face the position",
                "type": "Number"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2611,
            "description": "Rotates the sprite to a position at a rotation.",
            "itemtype": "method",
            "name": "rotateTo",
            "params": [
                {
                    "name": "x|position",
                    "description": "",
                    "type": "Number|Object"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "the amount of rotation per frame, default is 1",
                    "type": "Number"
                },
                {
                    "name": "facing",
                    "description": "rotation angle the sprite should be at when \"facing\" the position, default is 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a promise that resolves when the rotation is complete",
                "type": "Promise"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2633,
            "description": "Rotates the sprite by an amount at a specified angles per frame speed.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "the amount to rotate the sprite",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "the amount of rotation per frame, default is 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a promise that resolves when the rotation is complete",
                "type": "Promise"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2680,
            "description": "Changes the sprite's animation. Use `addAni` to define the\nanimation(s) first.",
            "itemtype": "method",
            "name": "changeAni",
            "params": [
                {
                    "name": "anis",
                    "description": "the names of one or many animations to be played in\nsequence",
                    "type": "...String"
                }
            ],
            "return": {
                "description": "A promise that fulfills when the animation or sequence of animations\ncompletes"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2744,
            "description": "Changes the sprite's animation. Use `addAni` to define the\nanimation(s) first. Alt for `changeAni`.",
            "itemtype": "method",
            "name": "changeAnimation",
            "params": [
                {
                    "name": "anis",
                    "description": "the names of one or many animations to be played in\nsequence",
                    "type": "...String"
                }
            ],
            "return": {
                "description": "A promise that fulfills when the animation or sequence of animations\ncompletes"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2758,
            "description": "Changes the displayed animation. The animation must be added first\nusing the sprite.addAnimation method. The animation could also be\nadded using the group.addAnimation method to a group the sprite\nhas been added to.\n\nSee SpriteAnimation for more control over the sequence.",
            "itemtype": "method",
            "name": "changeAnimation",
            "params": [
                {
                    "name": "label",
                    "description": "SpriteAnimation identifier",
                    "type": "String"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2793,
            "description": "Removes the Sprite from the sketch.\nThe removed Sprite will not be drawn or updated anymore.",
            "itemtype": "method",
            "name": "remove",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2810,
            "description": "Returns the sprite's unique identifier",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "the sprite's id"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2833,
            "description": "Returns true on the first frame that the sprite collides with the\ntarget sprite or group.\n\nCustom collision event handling can be done by using this function\nin an if statement or adding a callback as the second parameter.",
            "itemtype": "method",
            "name": "collides",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2850,
            "description": "Returns a truthy value while the sprite is colliding with the\ntarget sprite or group. The value is the number of frames that\nthe sprite has been colliding with the target.",
            "itemtype": "method",
            "name": "colliding",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "frames",
                "type": "Number"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2867,
            "description": "Returns true on the first frame that the sprite no longer overlaps\nwith the target sprite or group.",
            "itemtype": "method",
            "name": "collided",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2907,
            "description": "Returns true on the first frame that the sprite overlaps with the\ntarget sprite or group.\n\nCustom overlap event handling can be done by using this function\nin an if statement or adding a callback as the second parameter.",
            "itemtype": "method",
            "name": "overlaps",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2924,
            "description": "Returns a truthy value while the sprite is overlapping with the\ntarget sprite or group. The value returned is the number of\nframes the sprite has been overlapping with the target.",
            "itemtype": "method",
            "name": "overlapping",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "frames",
                "type": "Number"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2941,
            "description": "Returns true on the first frame that the sprite no longer overlaps\nwith the target sprite or group.",
            "itemtype": "method",
            "name": "overlapped",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 2968,
            "description": "Use sprite.animation.name instead.",
            "deprecated": true,
            "deprecationMessage": "getAnimationLabel",
            "return": {
                "description": "the name of the sprite's current animation"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3034,
            "description": "The name of the animation",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3055,
            "description": "The index of the current frame that the animation is on.",
            "itemtype": "property",
            "name": "frame",
            "type": "{Number}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3067,
            "description": "The offset is how far the animation should be placed from\nthe location it is played at.",
            "itemtype": "property",
            "name": "offset",
            "type": "{Object} x and y keys",
            "example": [
                "\noffset.x = 16;"
            ],
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3081,
            "description": "True if the animation is currently playing.",
            "itemtype": "property",
            "name": "playing",
            "type": "{Boolean}",
            "default": "true",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3090,
            "description": "Animation visibility.",
            "itemtype": "property",
            "name": "visible",
            "type": "{Boolean}",
            "default": "true",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3099,
            "description": "If set to false the animation will stop after reaching the last frame",
            "itemtype": "property",
            "name": "looping",
            "type": "{Boolean}",
            "default": "true",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3108,
            "description": "Ends the loop on frame 0 instead of the last frame.\nThis is useful for animations that are symmetric.\nFor example a walking cycle where the first frame is the\nsame as the last frame.",
            "itemtype": "property",
            "name": "endOnFirstFrame",
            "type": "{Boolean}",
            "default": "false",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3120,
            "description": "True if frame changed during the last draw cycle",
            "itemtype": "property",
            "name": "frameChanged",
            "type": "{Boolean}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3351,
            "description": "Delay between frames in number of draw cycles.\nIf set to 4 the framerate of the animation would be the\nsketch framerate divided by 4 (60fps = 15fps)",
            "itemtype": "property",
            "name": "frameDelay",
            "type": "{Number}",
            "default": "4",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3367,
            "description": "TODO frameRate\nAnother way to set the animation's frame delay.",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3378,
            "description": "The animation's scale.\n\nCan be set to a number to scale both x and y\nor an object with x and/or y properties.",
            "itemtype": "property",
            "name": "scale",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3398,
            "description": "Make a copy of the animation.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A copy of the animation.",
                "type": "SpriteAnimation"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3419,
            "description": "Draws the animation at coordinate x and y.\nUpdates the frames automatically.\n\nOptional parameters effect the current draw cycle only and\nare not saved between draw cycles.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "x",
                    "description": "horizontal position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "vertical position",
                    "type": "Number"
                },
                {
                    "name": "r",
                    "description": "rotation",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sx",
                    "description": "scale x",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sy",
                    "description": "scale y",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3468,
            "access": "private",
            "tagname": "",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3515,
            "description": "Plays the animation, starting from the specified frame.",
            "itemtype": "method",
            "name": "play",
            "return": {
                "description": "[Promise] a promise that resolves when the animation completes"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3532,
            "description": "Pauses the animation.",
            "itemtype": "method",
            "name": "pause",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3542,
            "description": "Stops the animation. Alt for pause.",
            "itemtype": "method",
            "name": "stop",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3552,
            "description": "Plays the animation backwards.\nEquivalent to ani.goToFrame(0)",
            "itemtype": "method",
            "name": "rewind",
            "return": {
                "description": "[Promise] a promise that resolves when the animation completes\nrewinding"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3565,
            "description": "Plays the animation forwards and loops it.",
            "itemtype": "method",
            "name": "loop",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3575,
            "description": "Prevents the animation from looping",
            "itemtype": "method",
            "name": "noLoop",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3584,
            "description": "fire when animation ends",
            "itemtype": "method",
            "name": "onComplete",
            "return": {
                "description": "",
                "type": "SpriteAnimation"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3594,
            "description": "Deprecated, change the frame property directly.\n\nChanges the current frame.",
            "deprecated": true,
            "params": [
                {
                    "name": "frame",
                    "description": "Frame number (starts from 0).",
                    "type": "Number"
                }
            ],
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3611,
            "description": "Goes to the next frame and stops.",
            "itemtype": "method",
            "name": "nextFrame",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3624,
            "description": "Goes to the previous frame and stops.",
            "itemtype": "method",
            "name": "previousFrame",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3637,
            "description": "Plays the animation forward or backward toward a target frame.",
            "itemtype": "method",
            "name": "goToFrame",
            "params": [
                {
                    "name": "toFrame",
                    "description": "Frame number destination (starts from 0)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[Promise] a promise that resolves when the animation completes"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3663,
            "description": "Use .frame instead.\n\nReturns the current frame number.",
            "deprecated": true,
            "return": {
                "description": "Current frame (starts from 0)",
                "type": "Number"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3676,
            "description": "Use .lastFrame instead.\n\nReturns the last frame number.",
            "deprecated": true,
            "return": {
                "description": "Last frame number (starts from 0)",
                "type": "Number"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3689,
            "description": "Returns the index of the last frame.",
            "itemtype": "property",
            "name": "lastFrame",
            "type": "{Number}",
            "readonly": "",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3700,
            "description": "Returns the current frame as p5.Image.",
            "itemtype": "method",
            "name": "frameImage",
            "return": {
                "description": "Current frame image",
                "type": "p5.Image"
            },
            "readonly": "",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3718,
            "description": "Width of the animation.",
            "itemtype": "property",
            "name": "w",
            "type": "{Number}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3727,
            "description": "Width of the animation.",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3742,
            "description": "Height of the animation.",
            "itemtype": "property",
            "name": "h",
            "type": "{Number}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3751,
            "description": "Height of the animation.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3766,
            "description": "The frames of the animation.",
            "itemtype": "property",
            "name": "frames",
            "type": "{Array}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3780,
            "description": "The frames of the animation. Alt for ani.frames",
            "itemtype": "property",
            "name": "images",
            "type": "{Array}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3835,
            "description": "Keys are the animation label, values are SpriteAnimation objects.",
            "itemtype": "property",
            "name": "animations",
            "type": "{Object}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3843,
            "description": "Contains all the collision callback functions for this group\nwhen it comes in contact with other sprites or groups.",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3852,
            "description": "Contains all the overlap callback functions for this group\nwhen it comes in contact with other sprites or groups.",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3981,
            "description": "Reference to the group's current animation.",
            "itemtype": "property",
            "name": "ani",
            "type": "{SpriteAnimation}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 3994,
            "description": "Reference to the group's current animation.",
            "itemtype": "property",
            "name": "animation",
            "type": "{SpriteAnimation}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4007,
            "description": "The group's animations.",
            "itemtype": "property",
            "name": "anis",
            "type": "{SpriteAnimation}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4016,
            "description": "Reference to the group's current animation.",
            "itemtype": "property",
            "name": "img",
            "type": "{SpriteAnimation}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4028,
            "description": "Reference to the group's current animation.",
            "itemtype": "property",
            "name": "image",
            "type": "{SpriteAnimation}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4040,
            "description": "Depending on the value that the amount property is set to, the group will\neither add or remove sprites.",
            "itemtype": "property",
            "name": "amount",
            "type": "{Number}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4094,
            "description": "Returns true on the first frame that the group collides with the\ntarget sprite or group.\n\nCustom collision event handling can be done by using this function\nin an if statement or adding a callback as the second parameter.",
            "itemtype": "method",
            "name": "collides",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4111,
            "description": "Returns a truthy value while the group is colliding with the\ntarget sprite or group. The value is the number of frames that\nthe group has been colliding with the target.",
            "itemtype": "method",
            "name": "colliding",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "frames",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4128,
            "description": "Returns true on the first frame that the group no longer overlaps\nwith the target sprite or group.",
            "itemtype": "method",
            "name": "collided",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4173,
            "description": "Returns true on the first frame that the group overlaps with the\ntarget sprite or group.\n\nCustom overlap event handling can be done by using this function\nin an if statement or adding a callback as the second parameter.",
            "itemtype": "method",
            "name": "overlaps",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4190,
            "description": "Returns a truthy value while the group is overlapping with the\ntarget sprite or group. The value returned is the number of\nframes the group has been overlapping with the target.",
            "itemtype": "method",
            "name": "overlapping",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "frames",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4207,
            "description": "Returns true on the first frame that the group no longer overlaps\nwith the target sprite or group.",
            "itemtype": "method",
            "name": "overlapped",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4222,
            "description": "EXPERIMENTAL implementation for beta testing!\n\nApply a force that is scaled to the sprite's mass.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "forceVector",
                    "description": "force vector",
                    "type": "p5.Vector|Array"
                },
                {
                    "name": "forceOrigin",
                    "description": "force origin",
                    "type": "p5.Vector|Array",
                    "optional": true
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4237,
            "itemtype": "method",
            "name": "move",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4248,
            "itemtype": "method",
            "name": "moveTo",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4271,
            "itemtype": "method",
            "name": "moveTowards",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4294,
            "itemtype": "method",
            "name": "moveAway",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4317,
            "description": "EXPERIMENTAL! Subject to change in the future!\n\nRotates the group around its centroid.",
            "itemtype": "method",
            "name": "orbit",
            "params": [
                {
                    "name": "amount",
                    "description": "Amount of rotation",
                    "type": "Number"
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4343,
            "description": "Gets the member at index i.",
            "deprecated": true,
            "deprecationMessage": "get",
            "params": [
                {
                    "name": "i",
                    "description": "The index of the object to retrieve",
                    "type": "Number"
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4354,
            "description": "Check if a sprite is in the group.",
            "itemtype": "method",
            "name": "includes",
            "params": [
                {
                    "name": "sprite",
                    "description": "",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "index of the sprite or -1 if not found",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4362,
            "description": "Use group.includes(sprite) instead.",
            "deprecated": true,
            "deprecationMessage": "contains",
            "params": [
                {
                    "name": "sprite",
                    "description": "The sprite to search",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Index or -1 if not found",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4374,
            "description": "Adds a sprite to the group. Returns true if the sprite was added\nbecause it was not already in the group.",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "s",
                    "description": "The sprite to be added",
                    "type": "Sprite"
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4394,
            "description": "Alias for push.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "s",
                    "description": "The sprite to be added",
                    "type": "Sprite"
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4404,
            "itemtype": "property",
            "name": "length",
            "return": {
                "description": "The amount of sprites in the group",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4409,
            "description": "Alias for group.length",
            "deprecated": true,
            "deprecationMessage": "size",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4417,
            "description": "Returns the group's unique identifier.",
            "return": {
                "description": "groupID",
                "type": "String"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4426,
            "description": "Remove sprites that go outside the given culling boundary\nrelative to the camera.",
            "itemtype": "method",
            "name": "cull",
            "params": [
                {
                    "name": "top|size",
                    "description": "The distance that sprites can move below the p5.js canvas before they are removed. *OR* The distance sprites can travel outside the screen on all sides before they get removed.",
                    "type": "Number"
                },
                {
                    "name": "bottom|cb",
                    "description": "The distance that sprites can move below the p5.js canvas before they are removed.",
                    "type": "Number"
                },
                {
                    "name": "left",
                    "description": "The distance that sprites can move beyond the left side of the p5.js canvas before they are removed.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "The distance that sprites can move beyond the right side of the p5.js canvas before they are removed.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "cb(sprite)",
                    "description": "The callback is given the sprite that\npassed the cull boundary, if no callback is given the sprite is\nremoved by default",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4468,
            "description": "If no input is given all sprites in the group are removed.\n\nIf a sprite or index is given, that sprite is removed from this\ngroup and any group this group inherits from except for the\nallSprites group.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "The sprite to be removed",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "true if sprite was found and removed",
                "type": "Boolean"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4510,
            "description": "Removes all sprites from the group and destroys the group.",
            "itemtype": "method",
            "name": "removeAll",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4519,
            "description": "Returns the highest depth in a group",
            "deprecated": true,
            "deprecationMessage": "maxDepth",
            "return": {
                "description": "The depth of the sprite drawn on the top",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4535,
            "description": "Returns the lowest depth in a group",
            "deprecated": true,
            "deprecationMessage": "minDepth",
            "return": {
                "description": "The depth of the sprite drawn on the bottom",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4551,
            "description": "Draws all the sprites in the group.",
            "itemtype": "method",
            "name": "draw",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4576,
            "description": "Adds an animation to the sprite. Use this function in the preload p5.js\nfunction. You don't need to name the animation if the sprite will only\nuse one animation. See SpriteAnimation for more information.",
            "example": [
                "\nsprite.addAni(name, animation);\nsprite.addAni(name, frame1, frame2, frame3...);\nsprite.addAni(name, atlas);"
            ],
            "itemtype": "method",
            "name": "addAni",
            "params": [
                {
                    "name": "name",
                    "description": "SpriteAnimation identifier",
                    "type": "String"
                },
                {
                    "name": "animation",
                    "description": "The preloaded animation",
                    "type": "SpriteAnimation"
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4624,
            "description": "Add multiple animations",
            "itemtype": "method",
            "name": "addAnis",
            "class": "Group"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4672,
            "itemtype": "property",
            "name": "offset.x",
            "class": "World"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4682,
            "itemtype": "property",
            "name": "offset.y",
            "class": "World"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4692,
            "description": "If false, animations that are stopped before they are completed,\ntypically by a call to sprite.changeAni, will restart at the\nframe they were stopped at. If true, animations will always\nstart playing from frame 0 unless specified by the user in a\nseparate `anim.changeFrame` call.",
            "itemtype": "property",
            "name": "autoResetAnimations",
            "type": "{SpriteAnimation}",
            "default": "false",
            "class": "World"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4745,
            "description": "Gravity vector (x, y)\n\nAll sprites getting",
            "itemtype": "property",
            "name": "gravity",
            "class": "World"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4939,
            "description": "Camera zoom.\n\nA scale of 1 will be the normal size. Setting it to 2 will\nmake everything twice the size. .5 will make everything half\nsize.",
            "itemtype": "property",
            "name": "zoom",
            "type": "{Number}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4951,
            "description": "Get the translated mouse position relative to the camera view.\nOffsetting and scaling the canvas will not change the sprites' position\nnor the mouseX and mouseY variables. Use this property to read the mouse\nposition if the camera moved or zoomed.",
            "itemtype": "property",
            "name": "mouse",
            "type": "{Object}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4964,
            "itemtype": "property",
            "name": "mouse.x",
            "type": "Number",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4967,
            "itemtype": "property",
            "name": "mouse.y",
            "type": "Number",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4971,
            "description": "True if the camera is active.\nRead only property. Use the methods Camera.on() and Camera.off()\nto enable or disable the camera.",
            "itemtype": "property",
            "name": "active",
            "type": "{Boolean}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4990,
            "description": "The camera's position. {x, y}",
            "itemtype": "property",
            "name": "pos",
            "type": "{Object}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 4999,
            "description": "The camera's position. Alias for pos.",
            "itemtype": "property",
            "name": "position",
            "type": "{Object}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5009,
            "description": "The camera x position.",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5024,
            "description": "The camera y position.",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5039,
            "description": "Activates the camera.\nThe canvas will be drawn according to the camera position and scale until\ncamera.off() is called",
            "itemtype": "method",
            "name": "on",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5055,
            "description": "Deactivates the camera.\nThe canvas will be drawn normally, ignoring the camera's position\nand scale until camera.on() is called",
            "itemtype": "method",
            "name": "off",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5070,
            "description": "Used internally to find a contact callback between two sprites.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "\"collide\" or \"overlap\"",
                    "type": "String"
                },
                {
                    "name": "s0",
                    "description": "",
                    "type": "Sprite"
                },
                {
                    "name": "s1",
                    "description": "",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "contact cb if one can be found between the two sprites"
            },
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5107,
            "description": "This planck function should've be named \"shouldContact\", because that's what\nit actually decides.\n\nHere we override it to allow for overlap events between sprites.",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5209,
            "description": "Equivalent to `new Tiles`",
            "itemtype": "method",
            "name": "createTiles",
            "params": [
                {
                    "name": "tiles",
                    "description": "String or array of strings",
                    "type": "String|Array"
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5249,
            "description": "This function is automatically called at the end of the p5.js draw\nloop, unless it was already called in the draw loop.",
            "itemtype": "method",
            "name": "updateSprites",
            "params": [
                {
                    "name": "timeStep",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "velocityIterations",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "positionIterations",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5275,
            "description": "Returns the sprites at a position.",
            "itemtype": "method",
            "name": "getSpriteAt",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5313,
            "description": "Returns the sprite at the top most layer position where\nthe mouse click occurs",
            "itemtype": "method",
            "name": "getSpriteAt",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5493,
            "description": "Gets a color from a color palette",
            "itemtype": "method",
            "name": "colorPal",
            "params": [
                {
                    "name": "c",
                    "description": "A single character, a key found in the color palette object.",
                    "type": "String"
                },
                {
                    "name": "palette",
                    "description": "Can be a palette object or number index\nin the system's palettes array.",
                    "type": "Number|Object"
                }
            ],
            "return": {
                "description": "a hex color string for use by p5.js functions"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5517,
            "description": "Create pixel art images from a string. Each character in the\ninput string represents a color value defined in the palette\nobject.",
            "itemtype": "method",
            "name": "spriteArt",
            "params": [
                {
                    "name": "txt",
                    "description": "Each character represents a pixel color value",
                    "type": "String"
                },
                {
                    "name": "scale",
                    "description": "The scale of the image",
                    "type": "Number"
                },
                {
                    "name": "palette",
                    "description": "Color palette",
                    "type": "Number|Object"
                }
            ],
            "return": {
                "description": "A p5.js Image"
            },
            "example": [
                "\nlet str = `\n...yyyy\n.yybyybyy\nyyyyyyyyyy\nyybyyyybyy\n.yybbbbyy\n...yyyy`;\n\nlet img = spriteArt(str);"
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5577,
            "description": "Deprecated, use sprite.draw() instead.\n\nallSprites.draw() is run automatically at the end of the p5.js\ndraw loop, unless a sprite or group is drawn separately within the\ndraw loop.",
            "deprecated": true,
            "itemtype": "method",
            "name": "drawSprites",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5592,
            "description": "Deprecated, use group.draw() instead.\n\nallSprites.draw() is run automatically at the end of the p5.js\ndraw loop, unless a sprite or group is drawn separately within the\ndraw loop.",
            "deprecated": true,
            "itemtype": "method",
            "name": "drawSprites",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5608,
            "description": "Creates a new sprite. Equivalent to `new Sprite()`",
            "return": {
                "description": "",
                "type": "Sprite"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5617,
            "description": "Creates a new group of sprites. Equivalent to `new Group()`",
            "return": {
                "description": "",
                "type": "Group"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5626,
            "description": "Loads an animation. Equivalent to `new SpriteAnimation()`\n\nLoad animations in the preload p5.js function if you need to use\nthem when your program starts.",
            "itemtype": "method",
            "name": "loadAni",
            "return": {
                "description": "",
                "type": "SpriteAnimation"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5635,
            "description": "Alias for loadAni",
            "itemtype": "method",
            "name": "loadAnimation",
            "return": {
                "description": "",
                "type": "SpriteAnimation"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5645,
            "description": "Displays an animation. Similar to the p5.js image function.",
            "itemtype": "method",
            "name": "animation",
            "params": [
                {
                    "name": "ani",
                    "description": "Animation to be displayed",
                    "type": "SpriteAnimation"
                },
                {
                    "name": "x",
                    "description": "X coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y coordinate",
                    "type": "Number"
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5659,
            "description": "Delay code execution in an async function for the specified time.",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "millisecond",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Promise that fulfills after the specified time.",
                "type": "Promise"
            },
            "example": [
                "\nasync function startGame() {\n  await delay(3000);\n}"
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5683,
            "description": "Sleep for the specified time. Equivalent to the delay function.",
            "itemtype": "method",
            "name": "sleep",
            "params": [
                {
                    "name": "millisecond",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Promise that fulfills after the specified time.",
                "type": "Promise"
            },
            "example": [
                "\nasync function startGame() {\n  await sleep(3000);\n}"
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5699,
            "description": "Awaitable function for playing sounds.",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "sound",
                    "description": "",
                    "type": "p5.Sound"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5720,
            "description": "Equivalent to p5.js createCanvas function and `new Canvas()`\n\nIn p5.play a canvas can be created with an aspect ratio in the\nformat `width:height`. For example `new Canvas('16:9')` will create\nthe largest possible canvas with a 16:9 aspect ratio.\n\nThis function also disables the default keydown responses for\nthe arrow keys, slash, and spacebar. This is to prevent the\nbrowser from scrolling the page when the user is playing a game using\ncommon keyboard commands.",
            "itemtype": "method",
            "name": "createCanvas",
            "params": [
                {
                    "name": "width|ratio",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5875,
            "description": "Just like the p5.js background function except it also accepts\na color pallette code.",
            "itemtype": "method",
            "name": "background",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5893,
            "description": "Just like the p5.js fill function except it also accepts\na color pallette code.",
            "itemtype": "method",
            "name": "fill",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5911,
            "description": "Just like the p5.js stroke function except it also accepts\na color pallette code.",
            "itemtype": "method",
            "name": "stroke",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 5935,
            "description": "Just like the p5.js loadImage function except it also caches images\nso that they are only loaded once. Multiple calls to loadImage with\nthe same path will return the same image object. It also adds the\nimage's url as a property of the image object.",
            "itemtype": "method",
            "name": "loadImage",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6038,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "func",
                    "description": "is the name of the function the error was thrown in",
                    "type": "String"
                },
                {
                    "name": "errorNum",
                    "description": "is the error's code number",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "is an array with references to the cause of the error",
                    "type": "Array"
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6091,
            "description": "A group of all the sprites.",
            "itemtype": "property",
            "name": "allSprites",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6100,
            "description": "The planck physics world. Use this to change gravity and offset the\nsprite's coordinate system.",
            "itemtype": "property",
            "name": "world",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6108,
            "description": "Equal to the p5.js frameCount, the amount of times the draw() function has\nbeen called.",
            "itemtype": "property",
            "name": "frame",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6116,
            "description": "The default camera. Use this to pan and zoom the camera.",
            "itemtype": "property",
            "name": "camera",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6123,
            "description": "Get user input from the mouse.\nStores the state of the left, center, or right mouse buttons.",
            "itemtype": "property",
            "name": "mouse",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6129,
            "description": "Get user input from the keyboard.",
            "itemtype": "property",
            "name": "kb",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6134,
            "description": "Alias for kb.",
            "itemtype": "property",
            "name": "keyboard",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6139,
            "description": "Get user input from game controllers.",
            "itemtype": "property",
            "name": "contro",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6166,
            "description": "The amount of frames an input must be pressed to be considered held.\nDefault is 12.",
            "itemtype": "property",
            "name": "holdThreshold",
            "type": "{number}",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6176,
            "description": "Initializes the input's values to zero.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6188,
            "description": "Attempt to auto-correct the user's input. Inheriting classes\noverride this method.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "ac",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6199,
            "itemtype": "method",
            "name": "presses",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6209,
            "itemtype": "method",
            "name": "pressing",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6219,
            "itemtype": "method",
            "name": "pressed",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6227,
            "itemtype": "method",
            "name": "holds",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6237,
            "itemtype": "method",
            "name": "holding",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6247,
            "itemtype": "method",
            "name": "held",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6257,
            "itemtype": "method",
            "name": "released",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6300,
            "description": "The mouse's x position.",
            "itemtype": "property",
            "name": "x",
            "type": "{number}",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6307,
            "description": "The mouse's y position.",
            "itemtype": "property",
            "name": "y",
            "type": "{number}",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6315,
            "description": "The mouse's position.",
            "itemtype": "property",
            "name": "pos",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6322,
            "description": "The mouse's position. Alias for pos.",
            "itemtype": "property",
            "name": "position",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6338,
            "itemtype": "method",
            "name": "dragging",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the mouse is being dragged while holding the input",
                "type": "Boolean"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6358,
            "itemtype": "method",
            "name": "hovers",
            "return": {
                "description": "true on the first frame that the mouse is over the sprite",
                "type": "Boolean"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6366,
            "itemtype": "method",
            "name": "hovering",
            "return": {
                "description": "true if the mouse is hovering over the sprite",
                "type": "Boolean"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6374,
            "itemtype": "method",
            "name": "hovered",
            "return": {
                "description": "true on the first frame that the mouse is no longer over the sprite",
                "type": "Boolean"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6503,
            "description": "Obsolete: Use kb.pressing(key) instead.",
            "obsolete": "keyIsDown",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play-beta.js",
            "line": 6515,
            "access": "private",
            "tagname": "getKeyFromCode",
            "params": [
                {
                    "name": "e",
                    "description": "keyboard event",
                    "type": "*"
                }
            ],
            "return": {
                "description": "key name"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1,
            "description": "p5.play",
            "version": "3.5",
            "author": "quinton-ashley",
            "year": "2023",
            "license": "gpl-v3-only",
            "descripton": "p5.play is a 2D game engine that uses planck (Box2D) to simulate\nphysics and provides sprites, a tile system, input handling, and animations!",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 228,
            "description": "Groups the sprite belongs to, including allSprites",
            "itemtype": "property",
            "name": "groups",
            "type": "{Array}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 237,
            "description": "Keys are the animation label, values are SpriteAnimation objects.",
            "itemtype": "property",
            "name": "animations",
            "type": "{Object}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 245,
            "description": "If false, animations that are stopped before they are completed,\ntypically by a call to sprite.changeAni, will start at the frame\nthey were stopped at. If true, animations will always start playing from\nframe 0 unless specified by the user in a separate anim.changeFrame\ncall.",
            "itemtype": "property",
            "name": "autoResetAnimations",
            "type": "{SpriteAnimation}",
            "default": "false",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 258,
            "description": "True if the sprite was removed from the world",
            "itemtype": "property",
            "name": "removed",
            "type": "{Boolean}",
            "default": "false",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 286,
            "description": "Cycles before self removal.\nSet it to initiate a countdown, every draw cycle the property is\nreduced by 1 unit. If less than or equal to 0, this sprite will be removed.",
            "itemtype": "property",
            "name": "life",
            "type": "{Number}",
            "default": "100000000",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 297,
            "description": "The sprite's visibility.",
            "itemtype": "property",
            "name": "visible",
            "type": "{Boolean}",
            "default": "true",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 306,
            "description": "Contains all the collision callback functions for this sprite\nwhen it comes in contact with other sprites or groups.",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 315,
            "description": "Contains all the overlap callback functions for this sprite\nwhen it comes in contact with other sprites or groups.",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 506,
            "description": "When the sprite.debug property is set to true you can see the\nsprite's physics body collider.",
            "itemtype": "property",
            "name": "debug",
            "type": "{boolean}",
            "default": "false",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 592,
            "description": "If no image or animations are set this is color of the\nplaceholder rectangle",
            "itemtype": "property",
            "name": "color",
            "type": "{color}",
            "default": "a randomly generated color",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 617,
            "description": "Similar to createSprite and the Sprite constructor except\noffset is the distance the collider is from the center of the\nsprite.",
            "params": [
                {
                    "name": "offsetX",
                    "description": "distance from the center of the sprite",
                    "type": "Number"
                },
                {
                    "name": "offsetY",
                    "description": "distance from the center of the sprite",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 823,
            "description": "Removes the physics body colliders from the sprite but not\noverlap sensors.",
            "itemtype": "method",
            "name": "removeColliders",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 836,
            "description": "EXPERIMENTAL! This function is incomplete and will be changed.\n\nAdds a joint between this sprite and another sprite.",
            "params": [
                {
                    "name": "spriteB",
                    "description": "the sprite to add a joint to",
                    "type": "Sprite"
                },
                {
                    "name": "type",
                    "description": "the type of joint",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "props",
                    "description": "the joint options",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 935,
            "description": "Removes overlap sensors from the sprite.",
            "itemtype": "method",
            "name": "removeSensors",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 966,
            "description": "Clones the collider's props to be transferred to a new collider.",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1009,
            "description": "This property disables the ability for a sprite to \"sleep\".\n\n\"Sleeping\" sprites are not included in the physics simulation, a\nsprite starts \"sleeping\" when it stops moving and doesn't collide\nwith anything that it wasn't already _touching.",
            "itemtype": "property",
            "name": "allowSleeping",
            "type": "Boolean",
            "default": "true",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1027,
            "description": "Reference to the sprite's current animation.",
            "itemtype": "property",
            "name": "animation",
            "type": "{SpriteAnimation}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1051,
            "description": "The bounciness of the sprite's physics body.",
            "itemtype": "property",
            "name": "bounciness",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1067,
            "description": "The center of mass of the sprite's physics body.",
            "itemtype": "property",
            "name": "centerOfMass",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1077,
            "description": "The sprite's collider type. Default is 'dynamic'.\n\nThe collider type can be one of the following strings:\n'dynamic', 'static', 'kinematic', 'none'.",
            "itemtype": "property",
            "name": "collider",
            "type": "{String}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1145,
            "description": "The sprite's current color. By default sprites get a random color.",
            "itemtype": "property",
            "name": "color",
            "type": "{p5.Color}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1176,
            "description": "The sprite's current text color. By default sprites get a random text color.",
            "itemtype": "property",
            "name": "textColor",
            "type": "{p5.Color}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1195,
            "description": "The density of the sprite's physics body.",
            "itemtype": "property",
            "name": "density",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1211,
            "description": "Use .layer instead.",
            "deprecated": true,
            "deprecationMessage": "depth",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1225,
            "description": "The angle of the sprite's movement or it's rotation angle if the\nsprite is not moving.",
            "itemtype": "property",
            "name": "direction",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1269,
            "description": "The amount of resistance a sprite has to being moved.",
            "itemtype": "property",
            "name": "drag",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1283,
            "description": "Displays the sprite.\n\nThis function is called automatically at\nthe end of each p5.js draw function call but it can also be run\nseparately to customize the order sprites are drawn in relation\nto other stuff drawn to the p5.js canvas. Also see the sprite.layer\nproperty.\n\nA sprite's draw function can be overridden with a\ncustom draw function, in which the center of the sprite is\nat (0, 0).",
            "example": [
                "\nsprite.draw = function() {\n  // an oval\n  ellipse(0,0,20,10);\n}"
            ],
            "itemtype": "method",
            "name": "draw",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1312,
            "description": "True if the sprite's physics body is dynamic.",
            "itemtype": "property",
            "name": "dynamic",
            "type": "{Boolean}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1326,
            "description": "If true the sprite can not rotate.",
            "itemtype": "property",
            "name": "rotationLock",
            "type": "{Boolean}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1340,
            "description": "Returns the first node in a linked list of the planck physics\nbody's fixtures.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "fixture",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1350,
            "description": "Returns the first node in a linked list of the planck physics\nbody's fixtures.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "fixtureList",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1362,
            "description": "The amount the sprite's physics body resists moving\nwhen rubbing against another physics body.",
            "itemtype": "property",
            "name": "friction",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1379,
            "description": "The sprite's heading. This is a string that can be set to\n\"up\", \"down\", \"left\", \"right\", \"upRight\", \"upLeft\", \"downRight\"\n\nIt ignores cardinal direction word order, capitalization, spaces,\nunderscores, and dashes.",
            "itemtype": "property",
            "name": "heading",
            "type": "{String}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1396,
            "description": "Use .static instead.",
            "deprecated": true,
            "deprecationMessage": "immovable",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1416,
            "description": "A reference to the sprite's current animation.",
            "itemtype": "property",
            "name": "img",
            "type": "{SpriteAnimation}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1429,
            "description": "A reference to the sprite's current animation.",
            "itemtype": "property",
            "name": "image",
            "type": "{SpriteAnimation}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1442,
            "description": "True if the sprite is moving.",
            "itemtype": "property",
            "name": "isMoving",
            "type": "{Boolean}",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1453,
            "description": "Set this to true if the sprite goes really fast to prevent\ninaccurate physics simulation.",
            "itemtype": "property",
            "name": "isSuperFast",
            "type": "{Boolean}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1475,
            "description": "True if the sprite's physics body is kinematic.",
            "itemtype": "property",
            "name": "kinematic",
            "type": "{Boolean}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1488,
            "description": "The mass of the sprite's physics body.",
            "itemtype": "property",
            "name": "mass",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1504,
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1522,
            "description": "The angle of the sprite's rotation, not the direction it is moving.",
            "itemtype": "property",
            "name": "rotation",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1546,
            "description": "The amount of the sprite resists rotating.",
            "itemtype": "property",
            "name": "rotationDrag",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1559,
            "description": "The speed of the sprite's rotation.",
            "itemtype": "property",
            "name": "rotationSpeed",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1574,
            "description": "Scale of the sprite's physics body. Default is {x: 1, y: 1}\n\nThe getter for sprite.scale returns the scale as an object with\nx and y properties.\n\nThe valueOf function for sprite.scale returns the scale as a\nnumber. This enables users to do things like `sprite.scale *= 2`\nto double the sprite's scale.",
            "itemtype": "property",
            "name": "scale",
            "type": "{Object}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1615,
            "description": "Wake a sprite up or put it to sleep.\n\n\"Sleeping\" sprites are not included in the physics simulation, a\nsprite starts \"sleeping\" when it stops moving and doesn't collide\nwith anything that it wasn't already _touching.",
            "itemtype": "property",
            "name": "sleeping",
            "type": "{Boolean}",
            "default": "true",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1635,
            "deprecated": true,
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1643,
            "description": "The sprite's speed.",
            "itemtype": "property",
            "name": "speed",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1658,
            "description": "Is the sprite's physics collider static?",
            "itemtype": "property",
            "name": "static",
            "type": "{Boolean}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1672,
            "description": "Apply a torque on the sprite's physics body.\nTorque is the force that causes rotation.\nA positive torque will rotate the sprite clockwise.\nA negative torque will rotate the sprite counter-clockwise.",
            "itemtype": "property",
            "name": "torque",
            "class": "Sprite",
            "subprops": [
                {
                    "name": "torque",
                    "description": "The amount of torque to apply.",
                    "type": "Number"
                }
            ]
        },
        {
            "file": "v3/p5.play.js",
            "line": 1685,
            "description": "The sprite's vertices.",
            "itemtype": "property",
            "name": "vertices",
            "type": "{Array} An array of p5.Vector objects.",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1718,
            "description": "The horizontal position of the sprite.",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1735,
            "description": "The vertical position of the sprite.",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1752,
            "description": "Set the position vector {x, y}",
            "itemtype": "property",
            "name": "pos",
            "type": "{Object}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1762,
            "description": "The width of the sprite.",
            "itemtype": "property",
            "name": "w",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1779,
            "description": "Half the width of the sprite.",
            "itemtype": "property",
            "name": "hw",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1790,
            "description": "The width of the sprite.",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1801,
            "description": "Half the width of the sprite.",
            "itemtype": "property",
            "name": "halfWidth",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1812,
            "description": "The height of the sprite.",
            "itemtype": "property",
            "name": "h",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1834,
            "description": "Half the height of the sprite.",
            "itemtype": "property",
            "name": "hh",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1845,
            "description": "The height of the sprite.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1856,
            "description": "Half the height of the sprite.",
            "itemtype": "property",
            "name": "halfHeight",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1867,
            "description": "The diameter of a circular sprite.",
            "itemtype": "property",
            "name": "d",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1911,
            "description": "The diameter of a circular sprite.",
            "itemtype": "property",
            "name": "diameter",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1923,
            "description": "The radius of a circular sprite.",
            "itemtype": "property",
            "name": "r",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1935,
            "description": "The radius of a circular sprite.",
            "itemtype": "property",
            "name": "radius",
            "type": "{Number}",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1947,
            "description": "Resizes the collider of the sprite.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "scalars",
                    "description": "The x and y scalars to resize the collider by.",
                    "type": "*"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 1972,
            "description": "Validate convexity.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "vecs",
                    "description": "an array of planck.Vec2 vertices",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true if the polygon is convex"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2007,
            "description": "The kind of shape: 'box', 'circle', 'chain', or 'polygon'.",
            "itemtype": "property",
            "name": "shape",
            "type": "{String}",
            "default": "box",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2036,
            "description": "You can set the sprite's update function to your own custom\nupdate function that will be run after every draw call or when\nthe updateSprites function is called.",
            "itemtype": "method",
            "name": "update",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2085,
            "description": "Updates the sprite. Called automatically at the end of the draw\ncycle.",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2134,
            "description": "Default draw",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2163,
            "description": "Displays the Sprite with rotation and scaling applied before\nthe sprite's draw function is called.",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2212,
            "description": "Draws a fixture. Used to draw the sprite's physics body.",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2247,
            "description": "Apply a force that is scaled to the sprite's mass.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "forceVector",
                    "description": "force vector",
                    "type": "p5.Vector|Array"
                },
                {
                    "name": "forceOrigin",
                    "description": "force origin",
                    "type": "p5.Vector|Array",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2273,
            "description": "Deprecated: set sprite.vel instead.\n\nSets the velocity vector.",
            "deprecated": true,
            "deprecationMessage": "setVelocity",
            "params": [
                {
                    "name": "vector|x",
                    "description": "vector or horizontal velocity",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "vertical velocity",
                    "type": "Number"
                }
            ],
            "example": [
                "\nsprite.vel = createVector(1, 2);\n// OR\nsprite.vel.x = 1;\nsprite.vel.y = 2;"
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2297,
            "description": "Deprecated: set direction and set speed separately\n\nSets the speed of the sprite.\nThe action overwrites the current velocity.\nIf direction is not supplied, the current direction is maintained.\nIf direction is not supplied and there is no current velocity, the\ncurrent rotation angle used for the direction.",
            "deprecated": true,
            "deprecationMessage": "setSpeed",
            "params": [
                {
                    "name": "speed",
                    "description": "Scalar speed",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "angle",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2316,
            "description": "Add to the speed of the sprite.\nIf direction is not supplied, the current direction is maintained.\nIf direction is not supplied and there is no current velocity, the * current rotation angle used for the direction.",
            "itemtype": "method",
            "name": "addSpeed",
            "params": [
                {
                    "name": "speed",
                    "description": "Scalar speed",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "Direction in degrees",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2332,
            "description": "Move a sprite towards a position.",
            "itemtype": "method",
            "name": "moveTowards",
            "params": [
                {
                    "name": "x|position",
                    "description": "destination x or any object with x and y properties",
                    "type": "Number|Object"
                },
                {
                    "name": "y",
                    "description": "destination y",
                    "type": "Number"
                },
                {
                    "name": "tracking",
                    "description": "[optional] 1 represents 1:1 tracking, the mouse moves to the destination immediately, 0 represents no tracking. Default is 0.1 (10% tracking).",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2369,
            "description": "Move a sprite away from a position.",
            "itemtype": "method",
            "name": "moveAway",
            "params": [
                {
                    "name": "x|position",
                    "description": "x or any object with x and y properties",
                    "type": "Number|Object"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "repel",
                    "description": "[optional] the higher the value, the faster the sprite moves away. Default is 0.1 (10% repel).",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2383,
            "description": "Move the sprite a certain distance from its current position.",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "distance",
                    "description": "[optional]",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "[optional]",
                    "type": "Number|String"
                },
                {
                    "name": "speed",
                    "description": "[optional]",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "resolves when the movement is complete or cancelled",
                "type": "Promise"
            },
            "example": [
                "\nsprite.move(distance);\nsprite.move(distance, direction);\nsprite.move(distance, direction, speed);\n\nsprite.move(directionName);\nsprite.move(directionName, speed);\nsprite.move(directionName, speed, distance); // deprecated usage"
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2426,
            "description": "Move the sprite to a position.",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x|position",
                    "description": "destination x or any object with x and y properties",
                    "type": "Number|Object"
                },
                {
                    "name": "y",
                    "description": "destination y",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "[optional]",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "resolves when the movement is complete or cancelled",
                "type": "Promise"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2525,
            "description": "Pushes the sprite toward a point.\nThe force is added to the current velocity.\n\nLegacy method, use moveTo or moveTowards instead.",
            "deprecated": true,
            "params": [
                {
                    "name": "magnitude",
                    "description": "Scalar speed to add",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "Direction x coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Direction y coordinate",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2555,
            "itemtype": "method",
            "name": "rotateTowards",
            "params": [
                {
                    "name": "x",
                    "description": "position to rotate towards",
                    "type": "*"
                },
                {
                    "name": "y",
                    "description": "position to rotate towards",
                    "type": "*"
                },
                {
                    "name": "tracking",
                    "description": "percent of the distance to rotate on each frame towards the target angle, default is 0.1 (10%)",
                    "type": "*"
                },
                {
                    "name": "facing",
                    "description": "rotation angle the sprite should be at when \"facing\" the position, default is 0",
                    "type": "*"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2573,
            "description": "Finds the minimium amount the sprite would have to rotate to\n\"face\" a position at a rotation.",
            "itemtype": "method",
            "name": "angleTo",
            "params": [
                {
                    "name": "x|position",
                    "description": "",
                    "type": "Number|Object"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "facing",
                    "description": "rotation angle the sprite should be at when \"facing\" the position, default is 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "minimum angle of rotation to face the position",
                "type": "Number"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2611,
            "description": "Rotates the sprite to a position at a rotation.",
            "itemtype": "method",
            "name": "rotateTo",
            "params": [
                {
                    "name": "x|position",
                    "description": "",
                    "type": "Number|Object"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "the amount of rotation per frame, default is 1",
                    "type": "Number"
                },
                {
                    "name": "facing",
                    "description": "rotation angle the sprite should be at when \"facing\" the position, default is 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a promise that resolves when the rotation is complete",
                "type": "Promise"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2633,
            "description": "Rotates the sprite by an amount at a specified angles per frame speed.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "the amount to rotate the sprite",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "the amount of rotation per frame, default is 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a promise that resolves when the rotation is complete",
                "type": "Promise"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2680,
            "description": "Changes the sprite's animation. Use `addAni` to define the\nanimation(s) first.",
            "itemtype": "method",
            "name": "changeAni",
            "params": [
                {
                    "name": "anis",
                    "description": "the names of one or many animations to be played in\nsequence",
                    "type": "...String"
                }
            ],
            "return": {
                "description": "A promise that fulfills when the animation or sequence of animations\ncompletes"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2744,
            "description": "Changes the sprite's animation. Use `addAni` to define the\nanimation(s) first. Alt for `changeAni`.",
            "itemtype": "method",
            "name": "changeAnimation",
            "params": [
                {
                    "name": "anis",
                    "description": "the names of one or many animations to be played in\nsequence",
                    "type": "...String"
                }
            ],
            "return": {
                "description": "A promise that fulfills when the animation or sequence of animations\ncompletes"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2758,
            "description": "Changes the displayed animation. The animation must be added first\nusing the sprite.addAnimation method. The animation could also be\nadded using the group.addAnimation method to a group the sprite\nhas been added to.\n\nSee SpriteAnimation for more control over the sequence.",
            "itemtype": "method",
            "name": "changeAnimation",
            "params": [
                {
                    "name": "label",
                    "description": "SpriteAnimation identifier",
                    "type": "String"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2793,
            "description": "Removes the Sprite from the sketch.\nThe removed Sprite will not be drawn or updated anymore.",
            "itemtype": "method",
            "name": "remove",
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2810,
            "description": "Returns the sprite's unique identifier",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "the sprite's id"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2833,
            "description": "Returns true on the first frame that the sprite collides with the\ntarget sprite or group.\n\nCustom collision event handling can be done by using this function\nin an if statement or adding a callback as the second parameter.",
            "itemtype": "method",
            "name": "collides",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2850,
            "description": "Returns a truthy value while the sprite is colliding with the\ntarget sprite or group. The value is the number of frames that\nthe sprite has been colliding with the target.",
            "itemtype": "method",
            "name": "colliding",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "frames",
                "type": "Number"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2867,
            "description": "Returns true on the first frame that the sprite no longer overlaps\nwith the target sprite or group.",
            "itemtype": "method",
            "name": "collided",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2907,
            "description": "Returns true on the first frame that the sprite overlaps with the\ntarget sprite or group.\n\nCustom overlap event handling can be done by using this function\nin an if statement or adding a callback as the second parameter.",
            "itemtype": "method",
            "name": "overlaps",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2924,
            "description": "Returns a truthy value while the sprite is overlapping with the\ntarget sprite or group. The value returned is the number of\nframes the sprite has been overlapping with the target.",
            "itemtype": "method",
            "name": "overlapping",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "frames",
                "type": "Number"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2941,
            "description": "Returns true on the first frame that the sprite no longer overlaps\nwith the target sprite or group.",
            "itemtype": "method",
            "name": "overlapped",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 2968,
            "description": "Use sprite.animation.name instead.",
            "deprecated": true,
            "deprecationMessage": "getAnimationLabel",
            "return": {
                "description": "the name of the sprite's current animation"
            },
            "class": "Sprite"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3034,
            "description": "The name of the animation",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3055,
            "description": "The index of the current frame that the animation is on.",
            "itemtype": "property",
            "name": "frame",
            "type": "{Number}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3067,
            "description": "The offset is how far the animation should be placed from\nthe location it is played at.",
            "itemtype": "property",
            "name": "offset",
            "type": "{Object} x and y keys",
            "example": [
                "\noffset.x = 16;"
            ],
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3081,
            "description": "True if the animation is currently playing.",
            "itemtype": "property",
            "name": "playing",
            "type": "{Boolean}",
            "default": "true",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3090,
            "description": "Animation visibility.",
            "itemtype": "property",
            "name": "visible",
            "type": "{Boolean}",
            "default": "true",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3099,
            "description": "If set to false the animation will stop after reaching the last frame",
            "itemtype": "property",
            "name": "looping",
            "type": "{Boolean}",
            "default": "true",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3108,
            "description": "Ends the loop on frame 0 instead of the last frame.\nThis is useful for animations that are symmetric.\nFor example a walking cycle where the first frame is the\nsame as the last frame.",
            "itemtype": "property",
            "name": "endOnFirstFrame",
            "type": "{Boolean}",
            "default": "false",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3120,
            "description": "True if frame changed during the last draw cycle",
            "itemtype": "property",
            "name": "frameChanged",
            "type": "{Boolean}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3351,
            "description": "Delay between frames in number of draw cycles.\nIf set to 4 the framerate of the animation would be the\nsketch framerate divided by 4 (60fps = 15fps)",
            "itemtype": "property",
            "name": "frameDelay",
            "type": "{Number}",
            "default": "4",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3367,
            "description": "TODO frameRate\nAnother way to set the animation's frame delay.",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3378,
            "description": "The animation's scale.\n\nCan be set to a number to scale both x and y\nor an object with x and/or y properties.",
            "itemtype": "property",
            "name": "scale",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3398,
            "description": "Make a copy of the animation.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A copy of the animation.",
                "type": "SpriteAnimation"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3419,
            "description": "Draws the animation at coordinate x and y.\nUpdates the frames automatically.\n\nOptional parameters effect the current draw cycle only and\nare not saved between draw cycles.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "x",
                    "description": "horizontal position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "vertical position",
                    "type": "Number"
                },
                {
                    "name": "r",
                    "description": "rotation",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sx",
                    "description": "scale x",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sy",
                    "description": "scale y",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3468,
            "access": "private",
            "tagname": "",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3515,
            "description": "Plays the animation, starting from the specified frame.",
            "itemtype": "method",
            "name": "play",
            "return": {
                "description": "[Promise] a promise that resolves when the animation completes"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3532,
            "description": "Pauses the animation.",
            "itemtype": "method",
            "name": "pause",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3542,
            "description": "Stops the animation. Alt for pause.",
            "itemtype": "method",
            "name": "stop",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3552,
            "description": "Plays the animation backwards.\nEquivalent to ani.goToFrame(0)",
            "itemtype": "method",
            "name": "rewind",
            "return": {
                "description": "[Promise] a promise that resolves when the animation completes\nrewinding"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3565,
            "description": "Plays the animation forwards and loops it.",
            "itemtype": "method",
            "name": "loop",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3575,
            "description": "Prevents the animation from looping",
            "itemtype": "method",
            "name": "noLoop",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3584,
            "description": "fire when animation ends",
            "itemtype": "method",
            "name": "onComplete",
            "return": {
                "description": "",
                "type": "SpriteAnimation"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3594,
            "description": "Deprecated, change the frame property directly.\n\nChanges the current frame.",
            "deprecated": true,
            "params": [
                {
                    "name": "frame",
                    "description": "Frame number (starts from 0).",
                    "type": "Number"
                }
            ],
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3611,
            "description": "Goes to the next frame and stops.",
            "itemtype": "method",
            "name": "nextFrame",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3624,
            "description": "Goes to the previous frame and stops.",
            "itemtype": "method",
            "name": "previousFrame",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3637,
            "description": "Plays the animation forward or backward toward a target frame.",
            "itemtype": "method",
            "name": "goToFrame",
            "params": [
                {
                    "name": "toFrame",
                    "description": "Frame number destination (starts from 0)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[Promise] a promise that resolves when the animation completes"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3663,
            "description": "Use .frame instead.\n\nReturns the current frame number.",
            "deprecated": true,
            "return": {
                "description": "Current frame (starts from 0)",
                "type": "Number"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3676,
            "description": "Use .lastFrame instead.\n\nReturns the last frame number.",
            "deprecated": true,
            "return": {
                "description": "Last frame number (starts from 0)",
                "type": "Number"
            },
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3689,
            "description": "Returns the index of the last frame.",
            "itemtype": "property",
            "name": "lastFrame",
            "type": "{Number}",
            "readonly": "",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3700,
            "description": "Returns the current frame as p5.Image.",
            "itemtype": "method",
            "name": "frameImage",
            "return": {
                "description": "Current frame image",
                "type": "p5.Image"
            },
            "readonly": "",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3718,
            "description": "Width of the animation.",
            "itemtype": "property",
            "name": "w",
            "type": "{Number}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3727,
            "description": "Width of the animation.",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3742,
            "description": "Height of the animation.",
            "itemtype": "property",
            "name": "h",
            "type": "{Number}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3751,
            "description": "Height of the animation.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3766,
            "description": "The frames of the animation.",
            "itemtype": "property",
            "name": "frames",
            "type": "{Array}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3780,
            "description": "The frames of the animation. Alt for ani.frames",
            "itemtype": "property",
            "name": "images",
            "type": "{Array}",
            "class": "SpriteAnimation"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3835,
            "description": "Keys are the animation label, values are SpriteAnimation objects.",
            "itemtype": "property",
            "name": "animations",
            "type": "{Object}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3843,
            "description": "Contains all the collision callback functions for this group\nwhen it comes in contact with other sprites or groups.",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3852,
            "description": "Contains all the overlap callback functions for this group\nwhen it comes in contact with other sprites or groups.",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3981,
            "description": "Reference to the group's current animation.",
            "itemtype": "property",
            "name": "ani",
            "type": "{SpriteAnimation}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 3994,
            "description": "Reference to the group's current animation.",
            "itemtype": "property",
            "name": "animation",
            "type": "{SpriteAnimation}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4007,
            "description": "The group's animations.",
            "itemtype": "property",
            "name": "anis",
            "type": "{SpriteAnimation}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4016,
            "description": "Reference to the group's current animation.",
            "itemtype": "property",
            "name": "img",
            "type": "{SpriteAnimation}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4028,
            "description": "Reference to the group's current animation.",
            "itemtype": "property",
            "name": "image",
            "type": "{SpriteAnimation}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4040,
            "description": "Depending on the value that the amount property is set to, the group will\neither add or remove sprites.",
            "itemtype": "property",
            "name": "amount",
            "type": "{Number}",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4094,
            "description": "Returns true on the first frame that the group collides with the\ntarget sprite or group.\n\nCustom collision event handling can be done by using this function\nin an if statement or adding a callback as the second parameter.",
            "itemtype": "method",
            "name": "collides",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4111,
            "description": "Returns a truthy value while the group is colliding with the\ntarget sprite or group. The value is the number of frames that\nthe group has been colliding with the target.",
            "itemtype": "method",
            "name": "colliding",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "frames",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4128,
            "description": "Returns true on the first frame that the group no longer overlaps\nwith the target sprite or group.",
            "itemtype": "method",
            "name": "collided",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4173,
            "description": "Returns true on the first frame that the group overlaps with the\ntarget sprite or group.\n\nCustom overlap event handling can be done by using this function\nin an if statement or adding a callback as the second parameter.",
            "itemtype": "method",
            "name": "overlaps",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4190,
            "description": "Returns a truthy value while the group is overlapping with the\ntarget sprite or group. The value returned is the number of\nframes the group has been overlapping with the target.",
            "itemtype": "method",
            "name": "overlapping",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "frames",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4207,
            "description": "Returns true on the first frame that the group no longer overlaps\nwith the target sprite or group.",
            "itemtype": "method",
            "name": "overlapped",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Sprite|Group"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4222,
            "description": "EXPERIMENTAL implementation for beta testing!\n\nApply a force that is scaled to the sprite's mass.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "forceVector",
                    "description": "force vector",
                    "type": "p5.Vector|Array"
                },
                {
                    "name": "forceOrigin",
                    "description": "force origin",
                    "type": "p5.Vector|Array",
                    "optional": true
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4237,
            "itemtype": "method",
            "name": "move",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4248,
            "itemtype": "method",
            "name": "moveTo",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4271,
            "itemtype": "method",
            "name": "moveTowards",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4294,
            "itemtype": "method",
            "name": "moveAway",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4317,
            "description": "EXPERIMENTAL! Subject to change in the future!\n\nRotates the group around its centroid.",
            "itemtype": "method",
            "name": "orbit",
            "params": [
                {
                    "name": "amount",
                    "description": "Amount of rotation",
                    "type": "Number"
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4343,
            "description": "Gets the member at index i.",
            "deprecated": true,
            "deprecationMessage": "get",
            "params": [
                {
                    "name": "i",
                    "description": "The index of the object to retrieve",
                    "type": "Number"
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4354,
            "description": "Check if a sprite is in the group.",
            "itemtype": "method",
            "name": "includes",
            "params": [
                {
                    "name": "sprite",
                    "description": "",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "index of the sprite or -1 if not found",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4362,
            "description": "Use group.includes(sprite) instead.",
            "deprecated": true,
            "deprecationMessage": "contains",
            "params": [
                {
                    "name": "sprite",
                    "description": "The sprite to search",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Index or -1 if not found",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4374,
            "description": "Adds a sprite to the group. Returns true if the sprite was added\nbecause it was not already in the group.",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "s",
                    "description": "The sprite to be added",
                    "type": "Sprite"
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4394,
            "description": "Alias for push.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "s",
                    "description": "The sprite to be added",
                    "type": "Sprite"
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4404,
            "itemtype": "property",
            "name": "length",
            "return": {
                "description": "The amount of sprites in the group",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4409,
            "description": "Alias for group.length",
            "deprecated": true,
            "deprecationMessage": "size",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4417,
            "description": "Returns the group's unique identifier.",
            "return": {
                "description": "groupID",
                "type": "String"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4426,
            "description": "Remove sprites that go outside the given culling boundary\nrelative to the camera.",
            "itemtype": "method",
            "name": "cull",
            "params": [
                {
                    "name": "top|size",
                    "description": "The distance that sprites can move below the p5.js canvas before they are removed. *OR* The distance sprites can travel outside the screen on all sides before they get removed.",
                    "type": "Number"
                },
                {
                    "name": "bottom|cb",
                    "description": "The distance that sprites can move below the p5.js canvas before they are removed.",
                    "type": "Number"
                },
                {
                    "name": "left",
                    "description": "The distance that sprites can move beyond the left side of the p5.js canvas before they are removed.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "The distance that sprites can move beyond the right side of the p5.js canvas before they are removed.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "cb(sprite)",
                    "description": "The callback is given the sprite that\npassed the cull boundary, if no callback is given the sprite is\nremoved by default",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4468,
            "description": "If no input is given all sprites in the group are removed.\n\nIf a sprite or index is given, that sprite is removed from this\ngroup and any group this group inherits from except for the\nallSprites group.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "The sprite to be removed",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "true if sprite was found and removed",
                "type": "Boolean"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4510,
            "description": "Removes all sprites from the group and destroys the group.",
            "itemtype": "method",
            "name": "removeAll",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4519,
            "description": "Returns the highest depth in a group",
            "deprecated": true,
            "deprecationMessage": "maxDepth",
            "return": {
                "description": "The depth of the sprite drawn on the top",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4535,
            "description": "Returns the lowest depth in a group",
            "deprecated": true,
            "deprecationMessage": "minDepth",
            "return": {
                "description": "The depth of the sprite drawn on the bottom",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4551,
            "description": "Draws all the sprites in the group.",
            "itemtype": "method",
            "name": "draw",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4576,
            "description": "Adds an animation to the sprite. Use this function in the preload p5.js\nfunction. You don't need to name the animation if the sprite will only\nuse one animation. See SpriteAnimation for more information.",
            "example": [
                "\nsprite.addAni(name, animation);\nsprite.addAni(name, frame1, frame2, frame3...);\nsprite.addAni(name, atlas);"
            ],
            "itemtype": "method",
            "name": "addAni",
            "params": [
                {
                    "name": "name",
                    "description": "SpriteAnimation identifier",
                    "type": "String"
                },
                {
                    "name": "animation",
                    "description": "The preloaded animation",
                    "type": "SpriteAnimation"
                }
            ],
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4624,
            "description": "Add multiple animations",
            "itemtype": "method",
            "name": "addAnis",
            "class": "Group"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4672,
            "itemtype": "property",
            "name": "offset.x",
            "class": "World"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4682,
            "itemtype": "property",
            "name": "offset.y",
            "class": "World"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4692,
            "description": "If false, animations that are stopped before they are completed,\ntypically by a call to sprite.changeAni, will restart at the\nframe they were stopped at. If true, animations will always\nstart playing from frame 0 unless specified by the user in a\nseparate `anim.changeFrame` call.",
            "itemtype": "property",
            "name": "autoResetAnimations",
            "type": "{SpriteAnimation}",
            "default": "false",
            "class": "World"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4744,
            "description": "Gravity vector (x, y)\n\nAll sprites getting",
            "itemtype": "property",
            "name": "gravity",
            "class": "World"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4903,
            "description": "Camera zoom.\n\nA scale of 1 will be the normal size. Setting it to 2 will\nmake everything twice the size. .5 will make everything half\nsize.",
            "itemtype": "property",
            "name": "zoom",
            "type": "{Number}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4915,
            "description": "Get the translated mouse position relative to the camera view.\nOffsetting and scaling the canvas will not change the sprites' position\nnor the mouseX and mouseY variables. Use this property to read the mouse\nposition if the camera moved or zoomed.",
            "itemtype": "property",
            "name": "mouse",
            "type": "{Object}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4928,
            "itemtype": "property",
            "name": "mouse.x",
            "type": "Number",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4931,
            "itemtype": "property",
            "name": "mouse.y",
            "type": "Number",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4935,
            "description": "True if the camera is active.\nRead only property. Use the methods Camera.on() and Camera.off()\nto enable or disable the camera.",
            "itemtype": "property",
            "name": "active",
            "type": "{Boolean}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4954,
            "description": "The camera's position. {x, y}",
            "itemtype": "property",
            "name": "pos",
            "type": "{Object}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4963,
            "description": "The camera's position. Alias for pos.",
            "itemtype": "property",
            "name": "position",
            "type": "{Object}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4973,
            "description": "The camera x position.",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 4988,
            "description": "The camera y position.",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5003,
            "description": "Activates the camera.\nThe canvas will be drawn according to the camera position and scale until\ncamera.off() is called",
            "itemtype": "method",
            "name": "on",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5019,
            "description": "Deactivates the camera.\nThe canvas will be drawn normally, ignoring the camera's position\nand scale until camera.on() is called",
            "itemtype": "method",
            "name": "off",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5034,
            "description": "Used internally to find a contact callback between two sprites.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "\"collide\" or \"overlap\"",
                    "type": "String"
                },
                {
                    "name": "s0",
                    "description": "",
                    "type": "Sprite"
                },
                {
                    "name": "s1",
                    "description": "",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "contact cb if one can be found between the two sprites"
            },
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5071,
            "description": "This planck function should've be named \"shouldContact\", because that's what\nit actually decides.\n\nHere we override it to allow for overlap events between sprites.",
            "class": "Camera"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5173,
            "description": "Equivalent to `new Tiles`",
            "itemtype": "method",
            "name": "createTiles",
            "params": [
                {
                    "name": "tiles",
                    "description": "String or array of strings",
                    "type": "String|Array"
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5213,
            "description": "This function is automatically called at the end of the p5.js draw\nloop, unless it was already called in the draw loop.",
            "itemtype": "method",
            "name": "updateSprites",
            "params": [
                {
                    "name": "timeStep",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "velocityIterations",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "positionIterations",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5237,
            "description": "Returns the sprites at a position.",
            "itemtype": "method",
            "name": "getSpriteAt",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5275,
            "description": "Returns the sprite at the top most layer position where\nthe mouse click occurs",
            "itemtype": "method",
            "name": "getSpriteAt",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5455,
            "description": "Gets a color from a color palette",
            "itemtype": "method",
            "name": "colorPal",
            "params": [
                {
                    "name": "c",
                    "description": "A single character, a key found in the color palette object.",
                    "type": "String"
                },
                {
                    "name": "palette",
                    "description": "Can be a palette object or number index\nin the system's palettes array.",
                    "type": "Number|Object"
                }
            ],
            "return": {
                "description": "a hex color string for use by p5.js functions"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5479,
            "description": "Create pixel art images from a string. Each character in the\ninput string represents a color value defined in the palette\nobject.",
            "itemtype": "method",
            "name": "spriteArt",
            "params": [
                {
                    "name": "txt",
                    "description": "Each character represents a pixel color value",
                    "type": "String"
                },
                {
                    "name": "scale",
                    "description": "The scale of the image",
                    "type": "Number"
                },
                {
                    "name": "palette",
                    "description": "Color palette",
                    "type": "Number|Object"
                }
            ],
            "return": {
                "description": "A p5.js Image"
            },
            "example": [
                "\nlet str = `\n...yyyy\n.yybyybyy\nyyyyyyyyyy\nyybyyyybyy\n.yybbbbyy\n...yyyy`;\n\nlet img = spriteArt(str);"
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5539,
            "description": "Deprecated, use sprite.draw() instead.\n\nallSprites.draw() is run automatically at the end of the p5.js\ndraw loop, unless a sprite or group is drawn separately within the\ndraw loop.",
            "deprecated": true,
            "itemtype": "method",
            "name": "drawSprites",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5554,
            "description": "Deprecated, use group.draw() instead.\n\nallSprites.draw() is run automatically at the end of the p5.js\ndraw loop, unless a sprite or group is drawn separately within the\ndraw loop.",
            "deprecated": true,
            "itemtype": "method",
            "name": "drawSprites",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5570,
            "description": "Creates a new sprite. Equivalent to `new Sprite()`",
            "return": {
                "description": "",
                "type": "Sprite"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5579,
            "description": "Creates a new group of sprites. Equivalent to `new Group()`",
            "return": {
                "description": "",
                "type": "Group"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5588,
            "description": "Loads an animation. Equivalent to `new SpriteAnimation()`\n\nLoad animations in the preload p5.js function if you need to use\nthem when your program starts.",
            "itemtype": "method",
            "name": "loadAni",
            "return": {
                "description": "",
                "type": "SpriteAnimation"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5597,
            "description": "Alias for loadAni",
            "itemtype": "method",
            "name": "loadAnimation",
            "return": {
                "description": "",
                "type": "SpriteAnimation"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5607,
            "description": "Displays an animation. Similar to the p5.js image function.",
            "itemtype": "method",
            "name": "animation",
            "params": [
                {
                    "name": "ani",
                    "description": "Animation to be displayed",
                    "type": "SpriteAnimation"
                },
                {
                    "name": "x",
                    "description": "X coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y coordinate",
                    "type": "Number"
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5621,
            "description": "Delay code execution in an async function for the specified time.",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "millisecond",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Promise that fulfills after the specified time.",
                "type": "Promise"
            },
            "example": [
                "\nasync function startGame() {\n  await delay(3000);\n}"
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5645,
            "description": "Sleep for the specified time. Equivalent to the delay function.",
            "itemtype": "method",
            "name": "sleep",
            "params": [
                {
                    "name": "millisecond",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Promise that fulfills after the specified time.",
                "type": "Promise"
            },
            "example": [
                "\nasync function startGame() {\n  await sleep(3000);\n}"
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5661,
            "description": "Awaitable function for playing sounds.",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "sound",
                    "description": "",
                    "type": "p5.Sound"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5682,
            "description": "Equivalent to p5.js createCanvas function and `new Canvas()`\n\nIn p5.play a canvas can be created with an aspect ratio in the\nformat `width:height`. For example `new Canvas('16:9')` will create\nthe largest possible canvas with a 16:9 aspect ratio.\n\nThis function also disables the default keydown responses for\nthe arrow keys, slash, and spacebar. This is to prevent the\nbrowser from scrolling the page when the user is playing a game using\ncommon keyboard commands.",
            "itemtype": "method",
            "name": "createCanvas",
            "params": [
                {
                    "name": "width|ratio",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5837,
            "description": "Just like the p5.js background function except it also accepts\na color pallette code.",
            "itemtype": "method",
            "name": "background",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5855,
            "description": "Just like the p5.js fill function except it also accepts\na color pallette code.",
            "itemtype": "method",
            "name": "fill",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5873,
            "description": "Just like the p5.js stroke function except it also accepts\na color pallette code.",
            "itemtype": "method",
            "name": "stroke",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 5897,
            "description": "Just like the p5.js loadImage function except it also caches images\nso that they are only loaded once. Multiple calls to loadImage with\nthe same path will return the same image object. It also adds the\nimage's url as a property of the image object.",
            "itemtype": "method",
            "name": "loadImage",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6000,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "func",
                    "description": "is the name of the function the error was thrown in",
                    "type": "String"
                },
                {
                    "name": "errorNum",
                    "description": "is the error's code number",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "is an array with references to the cause of the error",
                    "type": "Array"
                }
            ],
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6053,
            "description": "A group of all the sprites.",
            "itemtype": "property",
            "name": "allSprites",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6062,
            "description": "The planck physics world. Use this to change gravity and offset the\nsprite's coordinate system.",
            "itemtype": "property",
            "name": "world",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6070,
            "description": "Equal to the p5.js frameCount, the amount of times the draw() function has\nbeen called.",
            "itemtype": "property",
            "name": "frame",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6078,
            "description": "The default camera. Use this to pan and zoom the camera.",
            "itemtype": "property",
            "name": "camera",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6085,
            "description": "Get user input from the mouse.\nStores the state of the left, center, or right mouse buttons.",
            "itemtype": "property",
            "name": "mouse",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6091,
            "description": "Get user input from the keyboard.",
            "itemtype": "property",
            "name": "kb",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6096,
            "description": "Alias for kb.",
            "itemtype": "property",
            "name": "keyboard",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6101,
            "description": "Get user input from game controllers.",
            "itemtype": "property",
            "name": "contro",
            "class": "p5.play"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6128,
            "description": "The amount of frames an input must be pressed to be considered held.\nDefault is 12.",
            "itemtype": "property",
            "name": "holdThreshold",
            "type": "{number}",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6138,
            "description": "Initializes the input's values to zero.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6150,
            "description": "Attempt to auto-correct the user's input. Inheriting classes\noverride this method.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "ac",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6161,
            "itemtype": "method",
            "name": "presses",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true on the first frame that the user presses the input",
                "type": "Boolean"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6172,
            "itemtype": "method",
            "name": "pressing",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the amount of frames the user has been pressing the input",
                "type": "Number"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6184,
            "itemtype": "method",
            "name": "pressed",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true on the first frame that the user released the input",
                "type": "Boolean"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6193,
            "itemtype": "method",
            "name": "holds",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true on the first frame that the user holds the input",
                "type": "Boolean"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6204,
            "itemtype": "method",
            "name": "holding",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the amount of frames the user has been holding the input",
                "type": "Number"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6215,
            "itemtype": "method",
            "name": "held",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true on the first frame that the user released a held input",
                "type": "Boolean"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6226,
            "itemtype": "method",
            "name": "released",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true on the first frame that the user released the input",
                "type": "Boolean"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6270,
            "description": "The mouse's x position.",
            "itemtype": "property",
            "name": "x",
            "type": "{number}",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6277,
            "description": "The mouse's y position.",
            "itemtype": "property",
            "name": "y",
            "type": "{number}",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6285,
            "description": "The mouse's position.",
            "itemtype": "property",
            "name": "pos",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6292,
            "description": "The mouse's position. Alias for pos.",
            "itemtype": "property",
            "name": "position",
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6308,
            "itemtype": "method",
            "name": "dragging",
            "params": [
                {
                    "name": "inp",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the amount of frames the user has been dragging the input",
                "type": "Number"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6328,
            "itemtype": "method",
            "name": "hovers",
            "return": {
                "description": "true on the first frame that the mouse is over the sprite",
                "type": "Boolean"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6336,
            "itemtype": "method",
            "name": "hovering",
            "return": {
                "description": "the amount of frames the mouse has been over the sprite",
                "type": "Number"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6344,
            "itemtype": "method",
            "name": "hovered",
            "return": {
                "description": "true on the first frame that the mouse is no longer over the sprite",
                "type": "Boolean"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6480,
            "description": "Obsolete: Use kb.pressing(key) instead.",
            "obsolete": "keyIsDown",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "InputDevice"
        },
        {
            "file": "v3/p5.play.js",
            "line": 6492,
            "access": "private",
            "tagname": "getKeyFromCode",
            "params": [
                {
                    "name": "e",
                    "description": "keyboard event",
                    "type": "*"
                }
            ],
            "return": {
                "description": "key name"
            },
            "class": "InputDevice"
        },
        {
            "file": "v3/planck.js",
            "line": 1,
            "description": "Planck.js v1.0.0-alpha.4",
            "license": "The MIT license",
            "copyright": "Copyright (c) 2021 Erin Catto, Ali Shakiba\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 244,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 251,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 264,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 274,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 278,
            "description": "Does this vector contain finite coordinates?",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 293,
            "description": "Set this vector to all zeros.",
            "return": {
                "description": "this"
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 303,
            "description": "Set this vector to some specified coordinates.",
            "return": {
                "description": "this"
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 320,
            "description": "Set this vector to some specified coordinates.",
            "return": {
                "description": "this"
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 330,
            "description": "Set this vector to some specified coordinates.",
            "return": {
                "description": "this"
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 340,
            "internal": "",
            "deprecated": true,
            "deprecationMessage": "Use setCombine or setMul",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 352,
            "description": "Set linear combination of v and w: `a * v + b * w`",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 370,
            "description": "Add a vector to this vector.",
            "return": {
                "description": "this"
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 380,
            "internal": "",
            "deprecated": true,
            "deprecationMessage": "Use addCombine or addMul",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 392,
            "description": "Add linear combination of v and w: `a * v + b * w`",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 410,
            "deprecated": true,
            "deprecationMessage": "Use subCombine or subMul",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 421,
            "description": "Subtract linear combination of v and w: `a * v + b * w`",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 439,
            "description": "Subtract a vector from this vector",
            "return": {
                "description": "this"
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 449,
            "description": "Multiply this vector by a scalar.",
            "return": {
                "description": "this"
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 459,
            "description": "Get the length of this vector (the norm).\n\nFor performance, use this instead of lengthSquared (if possible).",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 467,
            "description": "Get the length squared.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 473,
            "description": "Convert this vector into a unit vector.",
            "return": {
                "description": "old length"
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 488,
            "description": "Get the length of this vector (the norm).\n\nFor performance, use this instead of lengthSquared (if possible).",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 496,
            "description": "Get the length squared.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 515,
            "description": "Get the skew vector such that dot(skew_vec, other) == cross(vec, other)",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 521,
            "description": "Perform the dot product on two vectors.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 527,
            "description": "Perform the cross product on two vectors. In 2D this produces a scalar.\n\nPerform the cross product on a vector and a scalar. In 2D this produces a\nvector.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 545,
            "description": "Perform the cross product on two vectors. In 2D this produces a scalar.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 551,
            "description": "Perform the cross product on a vector and a scalar. In 2D this produces a\nvector.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 558,
            "description": "Perform the cross product on a vector and a scalar. In 2D this produces a\nvector.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 565,
            "description": "Returns `a + (v x w)`",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 577,
            "description": "Returns `a + (v x w)`",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 583,
            "description": "Returns `a + (v x w)`",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 592,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 656,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 663,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 713,
            "description": "Verify that the bounds are sorted.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 728,
            "description": "Get the center of the AABB.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 734,
            "description": "Get the extents of the AABB (half-widths).",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 740,
            "description": "Get the perimeter length.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 746,
            "description": "Combine one or two AABB into this one.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 860,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 891,
            "description": "Tuning constants based on meters-kilograms-seconds (MKS) units.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 904,
            "description": "The radius of the polygon/edge shape skin. This should not be modified.\nMaking this smaller means polygons will have an insufficient buffer for\ncontinuous collision. Making it larger may create artifacts for vertex\ncollision.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 935,
            "description": "The maximum number of contact points between two convex shapes. Do not change\nthis value.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 940,
            "description": "The maximum number of vertices on a convex polygon. You cannot increase this\ntoo much because BlockAllocator has a maximum object size.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 945,
            "description": "This is used to fatten AABBs in the dynamic tree. This allows proxies to move\nby a small amount without triggering a tree adjustment. This is in meters.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 950,
            "description": "This is used to fatten AABBs in the dynamic tree. This is used to predict the\nfuture position based on the current displacement. This is a dimensionless\nmultiplier.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 956,
            "description": "A small length used as a collision and constraint tolerance. Usually it is\nchosen to be numerically significant, but visually insignificant.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 961,
            "description": "A small angle used as a collision and constraint tolerance. Usually it is\nchosen to be numerically significant, but visually insignificant.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 966,
            "description": "Maximum number of sub-steps per contact in continuous physics simulation.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 971,
            "description": "Maximum number of contacts to be handled to solve a TOI impact.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 975,
            "description": "Maximum iterations to solve a TOI.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 979,
            "description": "Maximum iterations to find Distance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 983,
            "description": "A velocity threshold for elastic collisions. Any collision with a relative\nlinear velocity below this threshold will be treated as inelastic.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 988,
            "description": "The maximum linear position correction used when solving constraints. This\nhelps to prevent overshoot.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 993,
            "description": "The maximum angular position correction used when solving constraints. This\nhelps to prevent overshoot.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 998,
            "description": "The maximum linear velocity of a body. This limit is very large and is used\nto prevent numerical problems. You shouldn't need to adjust Settings.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1003,
            "description": "The maximum angular velocity of a body. This limit is very large and is used\nto prevent numerical problems. You shouldn't need to adjust Settings.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1008,
            "description": "This scale factor controls how fast overlap is resolved. Ideally this would\nbe 1 so that overlap is removed in one time step. However using values close\nto 1 often lead to overshoot.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1016,
            "description": "The time that a body must be still before it will go to sleep.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1020,
            "description": "A body cannot sleep if its linear velocity is above this tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1024,
            "description": "A body cannot sleep if its angular velocity is above this tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1109,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1140,
            "description": "A node in the dynamic tree. The client does not interact with this directly.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1145,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1151,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1155,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1164,
            "description": "A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\ndynamic tree arranges data in a binary tree to accelerate queries such as\nvolume queries and ray casts. Leafs are proxies with an AABB. In the tree we\nexpand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\nthan the client object. This allows the client object to move by small\namounts without triggering a tree update.\n\nNodes are pooled and relocatable, so we use node indices rather than\npointers.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1210,
            "description": "Get proxy user data.",
            "return": {
                "description": "the proxy user data or 0 if the id is invalid."
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1219,
            "description": "Get the fat AABB for a node id.",
            "return": {
                "description": "the proxy user data or 0 if the id is invalid."
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1245,
            "description": "Create a proxy in the tree as a leaf node. We return the index of the node\ninstead of a pointer so that we can grow the node pool.\n\nCreate a proxy. Provide a tight fitting AABB and a userData pointer.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1261,
            "description": "Destroy a proxy. This asserts if the id is invalid.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1269,
            "description": "Move a proxy with a swepted AABB. If the proxy has moved outside of its\nfattened AABB, then the proxy is removed from the tree and re-inserted.\nOtherwise the function returns immediately.",
            "params": [
                {
                    "name": "d",
                    "description": "Displacement"
                }
            ],
            "return": {
                "description": "true if the proxy was re-inserted."
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1448,
            "description": "Perform a left or right rotation if node A is imbalanced. Returns the new\nroot index.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1544,
            "description": "Compute the height of the binary tree in O(N) time. Should not be called\noften.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1554,
            "description": "Get the ratio of the sum of the node areas to the root area.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1576,
            "description": "Compute the height of a sub-tree.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1627,
            "description": "Validate this tree. For testing.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1634,
            "description": "Get the maximum balance of an node in the tree. The balance is the difference\nin height of the two children of a node.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1652,
            "description": "Build an optimal tree. Very expensive. For testing.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1711,
            "description": "Shift the world origin. Useful for large worlds. The shift formula is:\nposition -= newOrigin",
            "params": [
                {
                    "name": "newOrigin",
                    "description": "The new origin with respect to the old origin"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1730,
            "description": "Query an AABB for overlapping proxies. The callback class is called for each\nproxy that overlaps the supplied AABB.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1757,
            "description": "Ray-cast against the proxies in the tree. This relies on the callback to\nperform a exact ray-cast in the case were the proxy contains a shape. The\ncallback also performs the any collision filtering. This has performance\nroughly equal to k * log(n), where k is the number of collisions and n is the\nnumber of proxies in the tree.",
            "params": [
                {
                    "name": "input",
                    "description": "The ray-cast input data. The ray extends from `p1` to `p1 + maxFraction * (p2 - p1)`."
                },
                {
                    "name": "rayCastCallback",
                    "description": "A function that is called for each proxy that is hit by the ray."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1896,
            "description": "The broad-phase wraps and extends a dynamic-tree to keep track of moved\nobjects and query them on update.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1906,
            "description": "Query an AABB for overlapping proxies. The callback class is called for each\nproxy that overlaps the supplied AABB.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1928,
            "description": "Get user data from a proxy. Returns null if the id is invalid.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1934,
            "description": "Test overlap of fat AABBs.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1942,
            "description": "Get the fat AABB for a proxy.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1948,
            "description": "Get the number of proxies.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1954,
            "description": "Get the height of the embedded tree.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1960,
            "description": "Get the balance (integer) of the embedded tree.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1966,
            "description": "Get the quality metric of the embedded tree.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1972,
            "description": "Ray-cast against the proxies in the tree. This relies on the callback to\nperform a exact ray-cast in the case were the proxy contains a shape. The\ncallback also performs the any collision filtering. This has performance\nroughly equal to k * log(n), where k is the number of collisions and n is the\nnumber of proxies in the tree.",
            "params": [
                {
                    "name": "input",
                    "description": "The ray-cast input data. The ray extends from `p1` to `p1 + maxFraction * (p2 - p1)`."
                },
                {
                    "name": "rayCastCallback",
                    "description": "A function that is called for each proxy that is hit by the ray."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1985,
            "description": "Shift the world origin. Useful for large worlds. The shift formula is:\nposition -= newOrigin",
            "params": [
                {
                    "name": "newOrigin",
                    "description": "The new origin with respect to the old origin"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 1994,
            "description": "Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\nis called.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2004,
            "description": "Destroy a proxy. It is up to the client to remove any pairs.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2012,
            "description": "Call moveProxy as many times as you like, then when you are done call\nUpdatePairs to finalized the proxy pairs (for your time step).",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2022,
            "description": "Call to trigger a re-processing of it's pairs on the next call to\nUpdatePairs.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2039,
            "description": "Update the pairs. This results in pair callbacks. This can only add pairs.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2086,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2101,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2128,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2148,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2154,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2158,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2162,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2182,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2193,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2218,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2229,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2259,
            "description": "A transform contains translation and rotation. It is used to represent the\nposition and orientation of rigid frames. Initialize using a position vector\nand a rotation.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2284,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2297,
            "description": "Set this to the identity transform.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2304,
            "description": "Set this based on the position and angle.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2318,
            "description": "Set this based on the position and angle.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2364,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2434,
            "description": "This describes the motion of a body/shape for TOI computation. Shapes are\ndefined with respect to the body origin, which may not coincide with the\ncenter of mass. However, to support dynamics we must interpolate the center\nof mass position.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2462,
            "description": "Get the interpolated transform at a specific time.",
            "params": [
                {
                    "name": "xf",
                    "description": ""
                },
                {
                    "name": "beta",
                    "description": "A factor in [0,1], where 0 indicates alpha0"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2475,
            "description": "Advance the sweep forward, yielding a new initial state.",
            "params": [
                {
                    "name": "alpha",
                    "description": "The new initial time"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2490,
            "description": "normalize the angles in radians to be between -pi and pi.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2609,
            "description": "A shape is used for collision detection. You can create a shape however you\nlike. Shapes used for simulation in World are created automatically when a\nFixture is created. Shapes may encapsulate one or more child shapes.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2617,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2629,
            "description": "Get the type of this shape. You can use this to down cast to the concrete\nshape.",
            "return": {
                "description": "the shape type."
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2674,
            "description": "This proxy is used internally to connect shape children to the broad-phase.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2686,
            "description": "A fixture is used to attach a shape to a body for collision detection. A\nfixture inherits its transform from its parent. Fixtures hold additional\nnon-geometric data such as friction, collision filters, etc.\n\nTo create a new Fixture use {@link Body.createFixture}.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2695,
            "description": "if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n}\nelse if (typeof def === 'number') {\n    def = { density: def };\n}\ndef = options(def, FixtureDefDefault);\nthis.m_body = body;\nthis.m_friction = def.friction;\nthis.m_restitution = def.restitution;\nthis.m_density = def.density;\nthis.m_isSensor = def.isSensor;\nthis.m_filterGroupIndex = def.filterGroupIndex;\nthis.m_filterCategoryBits = def.filterCategoryBits;\nthis.m_filterMaskBits = def.filterMaskBits;\n// TODO validate shape\nthis.m_shape = shape; // .clone();\nthis.m_next = null;\nthis.m_proxies = [];\nthis.m_proxyCount = 0;\nvar childCount = this.m_shape.getChildCount();\nfor (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n}\nthis.m_userData = def.userData;\n        }\n        /**\n         * Re-setup fixture.\n         * @internal",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2741,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2754,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2760,
            "description": "Get the type of the child shape. You can use this to down cast to the\nconcrete shape.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2767,
            "description": "Get the child shape. You can modify the child shape, however you should not\nchange the number of vertices because this will crash some collision caching\nmechanisms. Manipulating the shape may lead to non-physical behavior.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2775,
            "description": "A sensor shape collects contact information but never generates a collision\nresponse.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2782,
            "description": "Set if this fixture is a sensor.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2797,
            "description": "Get the user data that was assigned in the fixture definition. Use this to\nstore your application specific data.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2804,
            "description": "Set the user data. Use this to store your application specific data.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2810,
            "description": "Get the parent body of this fixture. This is null if the fixture is not\nattached.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2817,
            "description": "Get the next fixture in the parent body's fixture list.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2823,
            "description": "Get the density of this fixture.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2829,
            "description": "Set the density of this fixture. This will _not_ automatically adjust the\nmass of the body. You must call Body.resetMassData to update the body's mass.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2836,
            "description": "Get the coefficient of friction, usually in the range [0,1].",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2842,
            "description": "Set the coefficient of friction. This will not change the friction of\nexisting contacts.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2849,
            "description": "Get the coefficient of restitution.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2855,
            "description": "Set the coefficient of restitution. This will not change the restitution of\nexisting contacts.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2862,
            "description": "Test a point in world coordinates for containment in this fixture.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2868,
            "description": "Cast a ray against this shape.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2874,
            "description": "Get the mass data for this fixture. The mass data is based on the density and\nthe shape. The rotational inertia is about the shape's origin. This operation\nmay be expensive.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2882,
            "description": "Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\nmore accurate AABB, compute it using the shape and the body transform.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2889,
            "description": "These support body activation/deactivation.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2910,
            "description": "Updates this fixture proxy in broad-phase (with combined AABB of current and\nnext transformation).",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2928,
            "description": "Set the contact filtering data. This will not update contacts until the next\ntime step when either parent body is active and awake. This automatically\ncalls refilter.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2957,
            "description": "Call this if you want to establish collision that was previously disabled by\nContactFilter.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 2986,
            "description": "Implement this method to provide collision filtering, if you want finer\ncontrol over contact creation.\n\nReturn true if contact calculations should be performed between these two\nfixtures.\n\nWarning: for performance reasons this is only called when the AABBs begin to\noverlap.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3050,
            "description": "MassData This holds the mass data computed for a shape.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3055,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3057,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3059,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3064,
            "description": "A rigid body composed of one or more fixtures.\n\nTo create a new Body use {@link World.createBody}.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3070,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3119,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3135,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3167,
            "description": "Warning: this list changes during the time step and you may miss some\ncollisions if you don't use ContactListener.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3183,
            "description": "This will alter the mass and velocity.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3198,
            "internal": "",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3204,
            "internal": "",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3245,
            "description": "Should this body be treated like a bullet for continuous collision detection?",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3263,
            "description": "Set the sleep state of the body. A sleeping body has very low CPU cost.",
            "params": [
                {
                    "name": "flag",
                    "description": "Set to true to wake the body, false to put it to sleep."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3287,
            "description": "Set the active state of the body. An inactive body is not simulated and\ncannot be collided with or woken up. If you pass a flag of true, all fixtures\nwill be added to the broad-phase. If you pass a flag of false, all fixtures\nwill be removed from the broad-phase and all contacts will be destroyed.\nFixtures and joints are otherwise unaffected.\n\nYou may continue to create/destroy fixtures and joints on inactive bodies.\nFixtures on an inactive body are implicitly inactive and will not participate\nin collisions, ray-casts, or queries. Joints connected to an inactive body\nare implicitly inactive. An inactive body is still owned by a World object\nand remains",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3332,
            "description": "Set this body to have fixed rotation. This causes the mass to be reset.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3343,
            "description": "Get the world transform for the body's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3349,
            "description": "Set the position of the body's origin and rotation. Manipulating a body's\ntransform may cause non-physical behavior. Note: contacts are updated on the\nnext call to World.step.",
            "params": [
                {
                    "name": "position",
                    "description": "The world position of the body's local origin."
                },
                {
                    "name": "angle",
                    "description": "The world rotation in radians."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3371,
            "description": "Update fixtures in broad-phase.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3382,
            "description": "Used in TOI.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3392,
            "description": "Get the world position for the body's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3401,
            "description": "Get the current world rotation angle in radians.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3410,
            "description": "Get the world position of the center of mass.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3416,
            "description": "Get the local position of the center of mass.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3422,
            "description": "Get the linear velocity of the center of mass.",
            "return": {
                "description": "the linear velocity of the center of mass."
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3430,
            "description": "Get the world linear velocity of a world point attached to this body.",
            "params": [
                {
                    "name": "worldPoint",
                    "description": "A point in world coordinates."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3439,
            "description": "Get the world velocity of a local point.",
            "params": [
                {
                    "name": "localPoint",
                    "description": "A point in local coordinates."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3447,
            "description": "Set the linear velocity of the center of mass.",
            "params": [
                {
                    "name": "v",
                    "description": "The new linear velocity of the center of mass."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3461,
            "description": "Get the angular velocity.",
            "return": {
                "description": "the angular velocity in radians/second."
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3469,
            "description": "Set the angular velocity.",
            "params": [
                {
                    "name": "omega",
                    "description": "The new angular velocity in radians/second."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3498,
            "description": "Scale the gravity applied to this body.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3504,
            "description": "Get the total mass of the body.",
            "return": {
                "description": "The mass, usually in kilograms (kg)."
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3512,
            "description": "Get the rotational inertia of the body about the local origin.",
            "return": {
                "description": "the rotational inertia, usually in kg-m^2."
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3521,
            "description": "Copy the mass data of the body to data.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3529,
            "description": "This resets the mass properties to the sum of the mass properties of the\nfixtures. This normally does not need to be called unless you called\nSetMassData to override the mass and you later want to reset the mass.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3585,
            "description": "Set the mass properties to override the mass properties of the fixtures. Note\nthat this changes the center of mass position. Note that creating or\ndestroying fixtures can also alter the mass. This function has no effect if\nthe body isn't dynamic.",
            "params": [
                {
                    "name": "massData",
                    "description": "The mass properties."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3619,
            "description": "Apply a force at a world point. If the force is not applied at the center of\nmass, it will generate a torque and affect the angular velocity. This wakes\nup the body.",
            "params": [
                {
                    "name": "force",
                    "description": "The world force vector, usually in Newtons (N)."
                },
                {
                    "name": "point",
                    "description": "The world position of the point of application."
                },
                {
                    "name": "wake",
                    "description": "Also wake up the body"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3642,
            "description": "Apply a force to the center of mass. This wakes up the body.",
            "params": [
                {
                    "name": "force",
                    "description": "The world force vector, usually in Newtons (N)."
                },
                {
                    "name": "wake",
                    "description": "Also wake up the body"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3661,
            "description": "Apply a torque. This affects the angular velocity without affecting the\nlinear velocity of the center of mass. This wakes up the body.",
            "params": [
                {
                    "name": "torque",
                    "description": "About the z-axis (out of the screen), usually in N-m."
                },
                {
                    "name": "wake",
                    "description": "Also wake up the body"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3681,
            "description": "Apply an impulse at a point. This immediately modifies the velocity. It also\nmodifies the angular velocity if the point of application is not at the\ncenter of mass. This wakes up the body.",
            "params": [
                {
                    "name": "impulse",
                    "description": "The world impulse vector, usually in N-seconds or kg-m/s."
                },
                {
                    "name": "point",
                    "description": "The world position of the point of application."
                },
                {
                    "name": "wake",
                    "description": "Also wake up the body"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3704,
            "description": "Apply an angular impulse.",
            "params": [
                {
                    "name": "impulse",
                    "description": "The angular impulse in units of kg*m*m/s"
                },
                {
                    "name": "wake",
                    "description": "Also wake up the body"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3723,
            "description": "This is used to prevent connected bodies (by joints) from colliding,\ndepending on the joint's collideConnected flag.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3742,
            "internal": "Used for deserialize.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3773,
            "description": "Destroy a fixture. This removes the fixture from the broad-phase and destroys\nall contacts associated with this fixture. This will automatically adjust the\nmass of the body if the body is dynamic and the fixture has positive density.\nAll fixtures attached to a body are implicitly destroyed when the body is\ndestroyed.\n\nWarning: This function is locked during callbacks.",
            "params": [
                {
                    "name": "fixture",
                    "description": "The fixture to be removed."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3824,
            "description": "Get the corresponding world point of a local point.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3830,
            "description": "Get the corresponding world vector of a local vector.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3836,
            "description": "Gets the corresponding local point of a world point.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3842,
            "description": "Gets the corresponding local vector of a world vector.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3848,
            "description": "A static body does not move under simulation and behaves as if it has infinite mass.\nInternally, zero is stored for the mass and the inverse mass.\nStatic bodies can be moved manually by the user.\nA static body has zero velocity.\nStatic bodies do not collide with other static or kinematic bodies.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3856,
            "description": "A kinematic body moves under simulation according to its velocity.\nKinematic bodies do not respond to forces.\nThey can be moved manually by the user, but normally a kinematic body is moved by setting its velocity.\nA kinematic body behaves as if it has infinite mass, however, zero is stored for the mass and the inverse mass.\nKinematic bodies do not collide with other kinematic or static bodies.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3864,
            "description": "A dynamic body is fully simulated.\nThey can be moved manually by the user, but normally they move according to forces.\nA dynamic body can collide with all body types.\nA dynamic body always has finite, non-zero mass.\nIf you try to set the mass of a dynamic body to zero, it will automatically acquire a mass of one kilogram and it won't rotate.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3898,
            "description": "A 2-by-2 matrix. Stored in column-major order.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3917,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 3975,
            "description": "Solve A * x = b, where b is a column vector. This is more efficient than\ncomputing the inverse in one-shot cases.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4084,
            "description": "This is used for determining the state of contact points.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4089,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4091,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4093,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4095,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4098,
            "description": "Used for computing contact manifolds.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4112,
            "description": "A manifold for two touching convex shapes. Manifolds are created in `evaluate`\nmethod of Contact subclasses.\n\nSupported manifold types are e_faceA or e_faceB for clip point versus plane\nwith radius and e_circles point versus point with radius.\n\nWe store contacts in this way so that position correction can account for\nmovement, which is critical for continuous physics. All contact scenarios\nmust be expressed in one of these types. This structure is stored across time\nsteps, so we keep it small.",
            "itemtype": "property",
            "name": "pointCount The number of manifold points",
            "type": "ManifoldPoint[]",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4143,
            "description": "Evaluate the manifold with supplied transforms. This assumes modest motion\nfrom the original state. This does not change the point count, impulses, etc.\nThe radii must come from the shapes that generated the manifold.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4217,
            "description": "A manifold point is a contact point belonging to a contact manifold. It holds\ndetails related to the geometry and dynamics of the contact points.\n\nThis structure is stored across time steps, so we keep it small.\n\nNote: impulses are used for internal caching and may not provide reliable\ncontact forces, especially for high speed collisions.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4228,
            "description": "Usage depends on manifold type.\n      e_circles: the local center of circleB,\n      e_faceA: the local center of cirlceB or the clip point of polygonB,\n      e_faceB: the clip point of polygonA.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4235,
            "description": "The non-penetration impulse",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4239,
            "description": "The friction impulse",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4243,
            "description": "Uniquely identifies a contact point between two shapes to facilatate warm starting",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4250,
            "description": "Contact ids to facilitate warm starting.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4258,
            "description": "Used to quickly compare contact ids.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4273,
            "description": "The features that intersect to form the contact point.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4287,
            "description": "This is used to compute the current state of a contact manifold.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4292,
            "description": "World contact point (point of intersection)",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4296,
            "description": "A negative value indicates overlap, in meters",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4303,
            "description": "Compute the point states given two manifolds. The states pertain to the\ntransition from manifold1 to manifold2. So state1 is either persist or remove\nwhile state2 is either add or persist.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4337,
            "description": "Clipping for contact manifolds. Sutherland-Hodgman clipping.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4413,
            "description": "GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4419,
            "description": "Input for Distance. You have to option to use the shape radii in the\ncomputation. Even",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4433,
            "description": "Output for Distance.",
            "itemtype": "property",
            "name": "iterations number of GJK iterations used",
            "type": "Vec2",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4448,
            "description": "Used to warm start Distance. Set count to zero on first call.",
            "itemtype": "property",
            "name": "{number} count",
            "type": "Number",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4465,
            "description": "Compute the closest points between two shapes. Supports any combination of:\nCircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\nthe first call set SimplexCache.count to zero.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4571,
            "description": "A distance proxy is used by the GJK algorithm. It encapsulates any shape.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4581,
            "description": "Get the vertex count.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4587,
            "description": "Get a vertex by index. Used by Distance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4593,
            "description": "Get the supporting vertex index in the given direction.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4608,
            "description": "Get the supporting vertex in the given direction.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4614,
            "description": "Initialize the proxy using the given shape. The shape must remain in scope\nwhile the proxy is in use.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4625,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4627,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4629,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4650,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4946,
            "description": "Determine if two generic shapes overlap.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 4985,
            "description": "A contact edge is used to connect bodies and contacts together in a contact\ngraph where each body is a node and each contact is an edge. A contact edge\nbelongs to a doubly linked list maintained in each attached body. Each\ncontact has two contact nodes, one for each attached body.",
            "itemtype": "property",
            "name": "{Body} other Provides quick access to the other body attached.",
            "type": "Contact",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5002,
            "description": "Friction mixing law. The idea is to allow either fixture to drive the\nrestitution to zero. For example, anything slides on ice.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5009,
            "description": "Restitution mixing law. The idea is allow for anything to bounce off an\ninelastic surface. For example, a superball bounces on anything.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5031,
            "description": "The class manages contact between two shapes. A contact exists for each\noverlapping AABB in the broad-phase (except if filtered). Therefore a contact\nobject may exist that has no contact points.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5038,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5040,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5042,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5044,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5046,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5048,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5050,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5052,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5054,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5056,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5058,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5060,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5062,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5065,
            "description": "/** @internal */ this.v_normal = Vec2.zero();\n/** @internal */ this.v_normalMass = new Mat22();\n/** @internal */ this.v_K = new Mat22();\n// PositionConstraint\n/** @internal */ this.p_localPoints = []; // [maxManifoldPoints];\n/** @internal */ this.p_localNormal = Vec2.zero();\n/** @internal */ this.p_localPoint = Vec2.zero();\n/** @internal */ this.p_localCenterA = Vec2.zero();\n/** @internal */ this.p_localCenterB = Vec2.zero();\n// Nodes for connecting bodies.\nthis.m_nodeA = new ContactEdge(this);\nthis.m_nodeB = new ContactEdge(this);\nthis.m_fixtureA = fA;\nthis.m_fixtureB = fB;\nthis.m_indexA = indexA;\nthis.m_indexB = indexB;\nthis.m_evaluateFcn = evaluateFcn;\nthis.m_friction = mixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\nthis.m_restitution = mixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);\n        }\n        Contact.prototype.initConstraint = function (step) {\nvar fixtureA = this.m_fixtureA;\nvar fixtureB = this.m_fixtureB;\nvar shapeA = fixtureA.getShape();\nvar shapeB = fixtureB.getShape();\nvar bodyA = fixtureA.getBody();\nvar bodyB = fixtureB.getBody();\nvar manifold = this.getManifold();\nvar pointCount = manifold.pointCount;\nthis.v_invMassA = bodyA.m_invMass;\nthis.v_invMassB = bodyB.m_invMass;\nthis.v_invIA = bodyA.m_invI;\nthis.v_invIB = bodyB.m_invI;\nthis.v_friction = this.m_friction;\nthis.v_restitution = this.m_restitution;\nthis.v_tangentSpeed = this.m_tangentSpeed;\nthis.v_pointCount = pointCount;\nthis.v_K.setZero();\nthis.v_normalMass.setZero();\nthis.p_invMassA = bodyA.m_invMass;\nthis.p_invMassB = bodyB.m_invMass;\nthis.p_invIA = bodyA.m_invI;\nthis.p_invIB = bodyB.m_invI;\nthis.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\nthis.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\nthis.p_radiusA = shapeA.m_radius;\nthis.p_radiusB = shapeB.m_radius;\nthis.p_type = manifold.type;\nthis.p_localNormal = Vec2.clone(manifold.localNormal);\nthis.p_localPoint = Vec2.clone(manifold.localPoint);\nthis.p_pointCount = pointCount;\nfor (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j];\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n    if (step.warmStarting) {\n        vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n        vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n    }\n    else {\n        vcp.normalImpulse = 0.0;\n        vcp.tangentImpulse = 0.0;\n    }\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n}\n        };\n        /**\n         * Get the contact manifold. Do not modify the manifold unless you understand\n         * the internals of the library.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5143,
            "description": "Get the world manifold.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5153,
            "description": "Enable/disable this contact. This can be used inside the pre-solve contact\nlistener. The contact is only disabled for the current time step (or sub-step\nin continuous collisions).",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5161,
            "description": "Has this contact been disabled?",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5167,
            "description": "Is this contact touching?",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5173,
            "description": "Get the next contact in the world's contact list.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5179,
            "description": "Get fixture A in this contact.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5185,
            "description": "Get fixture B in this contact.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5191,
            "description": "Get the child primitive index for fixture A.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5197,
            "description": "Get the child primitive index for fixture B.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5203,
            "description": "Flag this contact for filtering. Filtering will occur the next time step.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5209,
            "description": "Override the default friction mixture. You can call this in\nContactListener.preSolve. This value persists until set or reset.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5216,
            "description": "Get the friction.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5222,
            "description": "Reset the friction mixture to the default value.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5228,
            "description": "Override the default restitution mixture. You can call this in\nContactListener.preSolve. The value persists until you set or reset.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5235,
            "description": "Get the restitution.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5241,
            "description": "Reset the restitution to the default value.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5247,
            "description": "Set the desired tangent speed for a conveyor belt behavior. In meters per\nsecond.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5254,
            "description": "Get the desired tangent speed. In meters per second.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5260,
            "description": "Called by Update method, and implemented by subclasses.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5266,
            "description": "Updates the contact manifold and touching status.\n\nNote: do not assume the fixture AABBs are overlapping or are valid.",
            "params": [
                {
                    "name": "listener.beginContact",
                    "description": ""
                },
                {
                    "name": "listener.endContact",
                    "description": ""
                },
                {
                    "name": "listener.preSolve",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5795,
            "internal": "",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5802,
            "internal": "",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5852,
            "internal": "",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5921,
            "description": "A joint edge is used to connect bodies and joints together in a joint graph\nwhere each body is a node and each joint is an edge. A joint edge belongs to\na doubly linked list maintained in each attached body. Each joint has two\njoint nodes, one for each attached body.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5929,
            "description": "provides quick access to the other body attached.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5933,
            "description": "the joint",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5937,
            "description": "prev the previous joint edge in the body's joint list",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5941,
            "description": "the next joint edge in the body's joint list",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5948,
            "description": "The base joint class. Joints are used to constraint two bodies together in\nvarious fashions. Some joints also feature limits and motors.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5954,
            "description": "/** @internal */ this.m_prev = null;\n/** @internal */ this.m_next = null;\n/** @internal */ this.m_edgeA = new JointEdge();\n/** @internal */ this.m_edgeB = new JointEdge();\n/** @internal */ this.m_islandFlag = false;\nbodyA = 'bodyA' in def ? def.bodyA : bodyA;\nbodyB = 'bodyB' in def ? def.bodyB : bodyB;\nthis.m_bodyA = bodyA;\nthis.m_bodyB = bodyB;\nthis.m_collideConnected = !!def.collideConnected;\nthis.m_userData = def.userData;\n        }\n        /**\n         * Short-cut function to determine if either body is inactive.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5973,
            "description": "Get the type of the concrete joint.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5979,
            "description": "Get the first body attached to this joint.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5985,
            "description": "Get the second body attached to this joint.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 5991,
            "description": "Get the next joint the world joint list.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6003,
            "description": "Get collide connected. Note: modifying the collide connect flag won't work\ncorrectly because the flag is only checked when fixture AABBs begin to\noverlap.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6011,
            "description": "Shift the origin for any points stored in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6052,
            "description": "Input parameters for TimeOfImpact.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6072,
            "description": "Output parameters for TimeOfImpact.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6087,
            "description": "Compute the upper bound on time before two shapes penetrate. Time is\nrepresented as a fraction between [0,tMax]. This uses a swept separating axis\nand may miss some intermediate, non-tunneling collision. If you change the\ntime interval, you should call this function again.\n\nNote: use Distance to compute the contact point and normal at the time of\nimpact.\n\nCCD via the local separating axis method. This seeks progression by computing\nthe largest time at which separation is maintained.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6439,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6441,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6447,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6449,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6464,
            "description": "Contact impulses for reporting. Impulses are used instead of forces because\nsub-step forces may approach infinity for rigid body collisions. These match\nup one-to-one with the contact points in Manifold.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6503,
            "description": "Finds and solves islands. An island is a connected subset of the world.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6656,
            "description": "<pre>\nApply damping.\nODE: dv/dt + c * v = 0\nSolution: v(t) = v0 * exp(-c * t)\nTime step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\nv2 = exp(-c * dt) * v1\nPade approximation:\nv2 = v1 * 1 / (1 + c * dt)\n</pre>",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6798,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 6805,
            "description": "Find TOI contacts and solve them.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7112,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7156,
            "params": [
                {
                    "name": "def",
                    "description": "World definition or gravity vector."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7161,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7163,
            "internal": "Callback for broad-phase.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7249,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7268,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7286,
            "description": "Get the world body list. With the returned body, use Body.getNext to get the\nnext body in the world list. A null body indicates the end of the list.",
            "return": {
                "description": "the head of the world body list."
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7295,
            "description": "Get the world joint list. With the returned joint, use Joint.getNext to get\nthe next joint in the world list. A null joint indicates the end of the list.",
            "return": {
                "description": "the head of the world joint list."
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7304,
            "description": "Get the world contact list. With the returned contact, use Contact.getNext to\nget the next contact in the world list. A null contact indicates the end of\nthe list.\n\nWarning: contacts are created and destroyed in the middle of a time step.\nUse ContactListener to avoid missing contacts.",
            "return": {
                "description": "the head of the world contact list."
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7323,
            "description": "Get the number of contacts (each may have 0 or more contact points).",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7329,
            "description": "Change the global gravity vector.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7335,
            "description": "Get the global gravity vector.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7341,
            "description": "Is the world locked (in the middle of a time step).",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7347,
            "description": "Enable/disable sleep.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7364,
            "description": "Enable/disable warm starting. For testing.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7373,
            "description": "Enable/disable continuous physics. For testing.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7382,
            "description": "Enable/disable single stepped continuous physics. For testing.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7391,
            "description": "Set flag to control automatic clearing of forces after each time step.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7397,
            "description": "Get the flag that controls automatic clearing of forces after each time step.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7403,
            "description": "Manually clear the force buffer on all bodies. By default, forces are cleared\nautomatically after each call to step. The default behavior is modified by\ncalling setAutoClearForces. The purpose of this function is to support\nsub-stepping. Sub-stepping is often used to maintain a fixed sized time step\nunder a variable frame-rate. When you perform sub-stepping you will disable\nauto clearing of forces and instead call clearForces after all sub-steps are\ncomplete in one pass of your game loop.\n\nSee {@link World.setAutoClearForces}",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7420,
            "description": "Query the world for all fixtures that potentially overlap the provided AABB.",
            "params": [
                {
                    "name": "aabb",
                    "description": "The query box."
                },
                {
                    "name": "callback",
                    "description": "Called for each fixture found in the query AABB. It may return `false` to terminate the query."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7433,
            "description": "Ray-cast the world for all fixtures in the path of the ray. Your callback\ncontrols whether you get the closest point, any point, or n-points. The\nray-cast ignores shapes that contain the starting point.",
            "params": [
                {
                    "name": "point1",
                    "description": "The ray starting point"
                },
                {
                    "name": "point2",
                    "description": "The ray ending point"
                },
                {
                    "name": "callback",
                    "description": "A user implemented callback function."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7463,
            "description": "Get the number of broad-phase proxies.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7469,
            "description": "Get the height of broad-phase dynamic tree.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7475,
            "description": "Get the balance of broad-phase dynamic tree.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7481,
            "description": "Get the quality metric of broad-phase dynamic tree. The smaller the better.\nThe minimum is 1.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7488,
            "description": "Shift the world origin. Useful for large worlds. The body shift formula is:\nposition -= newOrigin",
            "params": [
                {
                    "name": "newOrigin",
                    "description": "The new origin with respect to the old origin"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7508,
            "internal": "Used for deserialize.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7567,
            "description": "Destroy a rigid body given a definition. No reference to the definition is\nretained.\n\nWarning: This automatically deletes all associated shapes and joints.\n\nWarning: This function is locked during callbacks.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7626,
            "description": "Create a joint to constrain bodies together. No reference to the definition\nis retained. This may cause the connected bodies to cease colliding.\n\nWarning: This function is locked during callbacks.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7672,
            "description": "Destroy a joint. This may cause the connected bodies to begin colliding.\nWarning: This function is locked during callbacks.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7735,
            "description": "Take a time step. This performs collision detection, integration, and\nconstraint solution.\n\nBroad-phase, narrow-phase, solve and solve time of impacts.",
            "params": [
                {
                    "name": "timeStep",
                    "description": "Time step, this should not vary."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7792,
            "internal": "Call this method to find new contacts.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7799,
            "internal": "Removes old non-overlapping contacts, applies filters and updates contacts.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7846,
            "internal": "",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7863,
            "description": "Register an event listener.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7880,
            "description": "Remove an event listener.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7908,
            "internal": "",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7914,
            "internal": "",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7920,
            "internal": "",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7926,
            "internal": "",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7980,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7988,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 7996,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8014,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8018,
            "description": "Does this vector contain finite coordinates?",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8066,
            "description": "Perform the dot product on two vectors.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8072,
            "description": "Perform the cross product on two vectors. In 2D this produces a scalar.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8122,
            "description": "A line segment (edge) shape. These can be connected in chains or loops to\nother edge shapes. The connectivity information is used to ensure correct\ncontact normals.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8146,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8158,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8169,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8173,
            "description": "Optional next vertex, used for smooth collision.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8187,
            "description": "Optional next vertex, used for smooth collision.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8193,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8197,
            "description": "Optional prev vertex, used for smooth collision.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8211,
            "description": "Optional prev vertex, used for smooth collision.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8217,
            "description": "Set this as an isolated edge.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8227,
            "internal": "",
            "deprecated": true,
            "deprecationMessage": "Shapes should be treated as immutable.\n\nclone the concrete shape.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8245,
            "description": "Get the number of child primitives.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8251,
            "description": "Test a point for containment in this shape. This only works for convex\nshapes.",
            "params": [
                {
                    "name": "xf",
                    "description": "The shape world transform."
                },
                {
                    "name": "p",
                    "description": "A point in world coordinates."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8261,
            "description": "Cast a ray against a child shape.",
            "params": [
                {
                    "name": "output",
                    "description": "The ray-cast results."
                },
                {
                    "name": "input",
                    "description": "The ray-cast input parameters."
                },
                {
                    "name": "xf",
                    "description": "The transform to be applied to the shape."
                },
                {
                    "name": "childIndex",
                    "description": "The child shape index"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8317,
            "description": "Given a transform, compute the associated axis aligned bounding box for a\nchild shape.",
            "params": [
                {
                    "name": "aabb",
                    "description": "Returns the axis aligned box."
                },
                {
                    "name": "xf",
                    "description": "The world transform of the shape."
                },
                {
                    "name": "childIndex",
                    "description": "The child shape"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8331,
            "description": "Compute the mass properties of this shape using its dimensions and density.\nThe inertia tensor is computed about the local origin.",
            "params": [
                {
                    "name": "massData",
                    "description": "Returns the mass data for this shape."
                },
                {
                    "name": "density",
                    "description": "The density in kilograms per meter squared."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8376,
            "description": "A chain shape is a free form sequence of line segments. The chain has\ntwo-sided collision, so you can use inside and outside collision. Therefore,\nyou may use any winding order. Connectivity information is used to create\nsmooth collisions.\n\nWARNING: The chain will not collide properly if there are self-intersections.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8412,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8431,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8452,
            "internal": "Create a loop. This automatically adjusts connectivity.",
            "params": [
                {
                    "name": "vertices",
                    "description": "an array of vertices, these are copied"
                },
                {
                    "name": "count",
                    "description": "the vertex count"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8476,
            "internal": "Create a chain with isolated end vertices.",
            "params": [
                {
                    "name": "vertices",
                    "description": "an array of vertices, these are copied"
                },
                {
                    "name": "count",
                    "description": "the vertex count"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8499,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8508,
            "description": "Establish connectivity to a vertex that precedes the first vertex. Don't call\nthis for loops.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8519,
            "description": "Establish connectivity to a vertex that follows the last vertex. Don't call\nthis for loops.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8530,
            "internal": "",
            "deprecated": true,
            "deprecationMessage": "Shapes should be treated as immutable.\n\nclone the concrete shape.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8547,
            "description": "Get the number of child primitives.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8588,
            "description": "Test a point for containment in this shape. This only works for convex\nshapes.\n\nThis always return false.",
            "params": [
                {
                    "name": "xf",
                    "description": "The shape world transform."
                },
                {
                    "name": "p",
                    "description": "A point in world coordinates."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8600,
            "description": "Cast a ray against a child shape.",
            "params": [
                {
                    "name": "output",
                    "description": "The ray-cast results."
                },
                {
                    "name": "input",
                    "description": "The ray-cast input parameters."
                },
                {
                    "name": "xf",
                    "description": "The transform to be applied to the shape."
                },
                {
                    "name": "childIndex",
                    "description": "The child shape index"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8612,
            "description": "Given a transform, compute the associated axis aligned bounding box for a\nchild shape.",
            "params": [
                {
                    "name": "aabb",
                    "description": "Returns the axis aligned box."
                },
                {
                    "name": "xf",
                    "description": "The world transform of the shape."
                },
                {
                    "name": "childIndex",
                    "description": "The child shape"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8625,
            "description": "Compute the mass properties of this shape using its dimensions and density.\nThe inertia tensor is computed about the local origin.\n\nChains have zero mass.",
            "params": [
                {
                    "name": "massData",
                    "description": "Returns the mass data for this shape."
                },
                {
                    "name": "density",
                    "description": "The density in kilograms per meter squared."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8673,
            "description": "A convex polygon. It is assumed that the interior of the polygon is to the\nleft of each edge. Polygons have a maximum number of vertices equal to\nSettings.maxPolygonVertices. In most cases you should not need many vertices\nfor a convex polygon. extends Shape",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8700,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8707,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8721,
            "internal": "",
            "deprecated": true,
            "deprecationMessage": "Shapes should be treated as immutable.\n\nclone the concrete shape.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8741,
            "description": "Get the number of child primitives.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8747,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8751,
            "internal": "Create a convex hull from the given array of local points. The count must be\nin the range [3, Settings.maxPolygonVertices].\n\nWarning: the points may be re-ordered, even if they form a convex polygon\nWarning: collinear points are handled but not removed. Collinear points may\nlead to poor stacking behavior.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8849,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8874,
            "description": "Test a point for containment in this shape. This only works for convex\nshapes.",
            "params": [
                {
                    "name": "xf",
                    "description": "The shape world transform."
                },
                {
                    "name": "p",
                    "description": "A point in world coordinates."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8891,
            "description": "Cast a ray against a child shape.",
            "params": [
                {
                    "name": "output",
                    "description": "The ray-cast results."
                },
                {
                    "name": "input",
                    "description": "The ray-cast input parameters."
                },
                {
                    "name": "xf",
                    "description": "The transform to be applied to the shape."
                },
                {
                    "name": "childIndex",
                    "description": "The child shape index"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8950,
            "description": "Given a transform, compute the associated axis aligned bounding box for a\nchild shape.",
            "params": [
                {
                    "name": "aabb",
                    "description": "Returns the axis aligned box."
                },
                {
                    "name": "xf",
                    "description": "The world transform of the shape."
                },
                {
                    "name": "childIndex",
                    "description": "The child shape"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 8974,
            "description": "Compute the mass properties of this shape using its dimensions and density.\nThe inertia tensor is computed about the local origin.",
            "params": [
                {
                    "name": "massData",
                    "description": "Returns the mass data for this shape."
                },
                {
                    "name": "density",
                    "description": "The density in kilograms per meter squared."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9020,
            "description": "Validate convexity. This is a very time consuming operation.",
            "return": {
                "description": "true if valid"
            },
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9101,
            "description": "A rectangle polygon which extend PolygonShape.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9167,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9175,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9189,
            "internal": "",
            "deprecated": true,
            "deprecationMessage": "Shapes should be treated as immutable.\n\nclone the concrete shape.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9202,
            "description": "Get the number of child primitives.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9208,
            "description": "Test a point for containment in this shape. This only works for convex\nshapes.",
            "params": [
                {
                    "name": "xf",
                    "description": "The shape world transform."
                },
                {
                    "name": "p",
                    "description": "A point in world coordinates."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9220,
            "description": "Cast a ray against a child shape.",
            "params": [
                {
                    "name": "output",
                    "description": "The ray-cast results."
                },
                {
                    "name": "input",
                    "description": "The ray-cast input parameters."
                },
                {
                    "name": "xf",
                    "description": "The transform to be applied to the shape."
                },
                {
                    "name": "childIndex",
                    "description": "The child shape index"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9257,
            "description": "Given a transform, compute the associated axis aligned bounding box for a\nchild shape.",
            "params": [
                {
                    "name": "aabb",
                    "description": "Returns the axis aligned box."
                },
                {
                    "name": "xf",
                    "description": "The world transform of the shape."
                },
                {
                    "name": "childIndex",
                    "description": "The child shape"
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9270,
            "description": "Compute the mass properties of this shape using its dimensions and density.\nThe inertia tensor is computed about the local origin.",
            "params": [
                {
                    "name": "massData",
                    "description": "Returns the mass data for this shape."
                },
                {
                    "name": "density",
                    "description": "The density in kilograms per meter squared."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9320,
            "description": "A distance joint constrains two points on two bodies to remain at a fixed\ndistance from each other. You can view this as a massless, rigid rod.",
            "params": [
                {
                    "name": "anchorA",
                    "description": "Anchor A in global coordination."
                },
                {
                    "name": "anchorB",
                    "description": "Anchor B in global coordination."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9370,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9387,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9395,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9417,
            "description": "The local anchor point relative to bodyA's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9423,
            "description": "The local anchor point relative to bodyB's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9429,
            "description": "Set the natural length. Manipulating the length can lead to non-physical\nbehavior when the frequency is zero.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9436,
            "description": "Get the natural length.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9454,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9460,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9466,
            "description": "Get the reaction force on bodyB at the joint anchor in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9472,
            "description": "Get the reaction torque on bodyB in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9571,
            "description": "This returns true if the position errors are within tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9635,
            "description": "Friction joint. This is used for top-down friction. It provides 2D\ntranslational friction and angular friction.",
            "params": [
                {
                    "name": "anchor",
                    "description": "Anchor in global coordination."
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9673,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9686,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9694,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9709,
            "description": "The local anchor point relative to bodyA's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9715,
            "description": "The local anchor point relative to bodyB's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9721,
            "description": "Set the maximum friction force in N.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9727,
            "description": "Get the maximum friction force in N.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9733,
            "description": "Set the maximum friction torque in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9739,
            "description": "Get the maximum friction torque in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9745,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9751,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9757,
            "description": "Get the reaction force on bodyB at the joint anchor in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9763,
            "description": "Get the reaction torque on bodyB in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9872,
            "description": "This returns true if the position errors are within tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9905,
            "description": "A 3-by-3 matrix. Stored in column-major order.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9921,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9934,
            "description": "Set this matrix to all zeros.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9943,
            "description": "Solve A * x = b, where b is a column vector. This is more efficient than\ncomputing the inverse in one-shot cases.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9958,
            "description": "Solve A * x = b, where b is a column vector. This is more efficient than\ncomputing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\nequation.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 9977,
            "description": "Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\nsingular.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10000,
            "description": "Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\nif singular.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10091,
            "description": "A revolute joint constrains two bodies to share a common point while they are\nfree to rotate about the point. The relative rotation about the shared point\nis the joint angle. You can limit the relative rotation with a joint limit\nthat specifies a lower and upper angle. You can use a motor to drive the\nrelative rotation about the shared point. A maximum motor torque is provided\nso that infinite forces are not generated.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10111,
            "description": "/** @internal */ _this.m_limitState = inactiveLimit$2; // TODO enum\nbodyA = _this.m_bodyA;\nbodyB = _this.m_bodyB;\n_this.m_type = RevoluteJoint.TYPE;\n_this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n_this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n_this.m_referenceAngle = math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n_this.m_impulse = new Vec3();\n_this.m_motorImpulse = 0.0;\n_this.m_lowerAngle = def.lowerAngle;\n_this.m_upperAngle = def.upperAngle;\n_this.m_maxMotorTorque = def.maxMotorTorque;\n_this.m_motorSpeed = def.motorSpeed;\n_this.m_enableLimit = def.enableLimit;\n_this.m_enableMotor = def.enableMotor;\nreturn _this;\n// Point-to-point constraint\n// C = p2 - p1\n// Cdot = v2 - v1\n// = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n// J = [-I -r1_skew I r2_skew ]\n// Identity used:\n// w k % (rx i + ry j) = w * (-ry i + rx j)\n// Motor constraint\n// Cdot = w2 - w1\n// J = [0 0 -1 0 0 1]\n// K = invI1 + invI2\n        }",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10158,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10166,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10181,
            "description": "The local anchor point relative to bodyA's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10187,
            "description": "The local anchor point relative to bodyB's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10193,
            "description": "Get the reference angle.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10199,
            "description": "Get the current joint angle in radians.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10207,
            "description": "Get the current joint angle speed in radians per second.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10215,
            "description": "Is the joint motor enabled?",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10221,
            "description": "Enable/disable the joint motor.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10229,
            "description": "Get the current motor torque given the inverse time step. Unit is N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10235,
            "description": "Set the motor speed in radians per second.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10243,
            "description": "Get the motor speed in radians per second.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10249,
            "description": "Set the maximum motor torque, usually in N-m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10260,
            "description": "Is the joint limit enabled?",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10266,
            "description": "Enable/disable the joint limit.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10277,
            "description": "Get the lower joint limit in radians.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10283,
            "description": "Get the upper joint limit in radians.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10289,
            "description": "Set the joint limits in radians.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10301,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10307,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10313,
            "description": "Get the reaction force given the inverse time step. Unit is N.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10319,
            "description": "Get the reaction torque due to the joint limit given the inverse time step.\nUnit is N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10508,
            "description": "This returns true if the position errors are within tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10620,
            "description": "A prismatic joint. This joint provides one degree of freedom: translation\nalong an axis fixed in bodyA. Relative rotation is prevented. You can use a\njoint limit to restrict the range of motion and a joint motor to drive the\nmotion or to model joint friction.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10729,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10748,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10757,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10776,
            "description": "The local anchor point relative to bodyA's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10782,
            "description": "The local anchor point relative to bodyB's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10788,
            "description": "The local joint axis relative to bodyA.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10794,
            "description": "Get the reference angle.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10800,
            "description": "Get the current joint translation, usually in meters.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10811,
            "description": "Get the current joint translation speed, usually in meters per second.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10831,
            "description": "Is the joint limit enabled?",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10837,
            "description": "Enable/disable the joint limit.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10848,
            "description": "Get the lower joint limit, usually in meters.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10854,
            "description": "Get the upper joint limit, usually in meters.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10860,
            "description": "Set the joint limits, usually in meters.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10872,
            "description": "Is the joint motor enabled?",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10878,
            "description": "Enable/disable the joint motor.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10886,
            "description": "Set the motor speed, usually in meters per second.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10894,
            "description": "Set the maximum motor force, usually in N.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10905,
            "description": "Get the motor speed, usually in meters per second.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10911,
            "description": "Get the current motor force given the inverse time step, usually in N.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10917,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10923,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10929,
            "description": "Get the reaction force on bodyB at the joint anchor in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 10935,
            "description": "Get the reaction torque on bodyB in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11131,
            "description": "This returns true if the position errors are within tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11268,
            "description": "A gear joint is used to connect two joints together. Either joint can be a\nrevolute or prismatic joint. You specify a gear ratio to bind the motions\ntogether: coordinate1 + ratio * coordinate2 = constant\n\nThe ratio can be negative or positive. If one joint is a revolute joint and\nthe other joint is a prismatic joint, then the ratio will have units of\nlength or units of 1/length. Warning: You have to manually destroy the gear\njoint if joint1 or joint2 is destroyed.\n\nThis definition requires two existing revolute or prismatic joints (any\ncombination will work).",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11376,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11389,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11400,
            "description": "Get the first joint.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11406,
            "description": "Get the second joint.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11412,
            "description": "Set the gear ratio.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11418,
            "description": "Get the gear ratio.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11424,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11430,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11436,
            "description": "Get the reaction force on bodyB at the joint anchor in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11442,
            "description": "Get the reaction torque on bodyB in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11565,
            "description": "This returns true if the position errors are within tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11687,
            "description": "A motor joint is used to control the relative motion between two bodies. A\ntypical usage is to control the movement of a dynamic body with respect to\nthe ground.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11724,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11738,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11746,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11749,
            "description": "Set the maximum friction force in N.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11755,
            "description": "Get the maximum friction force in N.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11761,
            "description": "Set the maximum friction torque in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11767,
            "description": "Get the maximum friction torque in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11773,
            "description": "Set the position correction factor in the range [0,1].",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11779,
            "description": "Get the position correction factor in the range [0,1].",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11785,
            "description": "Set/get the target linear offset, in frame A, in meters.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11799,
            "description": "Set/get the target angular offset, in radians.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11812,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11818,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11824,
            "description": "Get the reaction force on bodyB at the joint anchor in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11830,
            "description": "Get the reaction torque on bodyB in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11945,
            "description": "This returns true if the position errors are within tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 11983,
            "description": "A mouse joint is used to make a point on a body track a specified world\npoint. This a soft constraint with a maximum force. This allows the\nconstraint to stretch and without applying huge forces.\n\nNOTE: this joint is not documented in the manual because it was developed to\nbe used in the testbed. If you want to learn how to use the mouse joint, look\nat the testbed.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12029,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12043,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12055,
            "description": "Use this to update the target point.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12067,
            "description": "Set the maximum force in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12073,
            "description": "Get the maximum force in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12079,
            "description": "Set the frequency in Hertz.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12085,
            "description": "Get the frequency in Hertz.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12091,
            "description": "Set the damping ratio (dimensionless).",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12097,
            "description": "Get the damping ratio (dimensionless).",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12103,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12109,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12115,
            "description": "Get the reaction force on bodyB at the joint anchor in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12121,
            "description": "Get the reaction torque on bodyB in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12127,
            "description": "Shift the origin for any points stored in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12211,
            "description": "This returns true if the position errors are within tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12247,
            "description": "The pulley joint is connected to two bodies and two fixed ground points. The\npulley supports a ratio such that: length1 + ratio * length2 <= constant\n\nYes, the force transmitted is scaled by the ratio.\n\nWarning: the pulley joint can get a bit squirrelly by itself. They often work\nbetter when combined with prismatic joints. You should also cover the the\nanchor points with static shapes to prevent one side from going to zero\nlength.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12309,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12317,
            "description": "Get the first ground anchor.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12323,
            "description": "Get the second ground anchor.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12329,
            "description": "Get the current length of the segment attached to bodyA.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12335,
            "description": "Get the current length of the segment attached to bodyB.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12341,
            "description": "Get the pulley ratio.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12347,
            "description": "Get the current length of the segment attached to bodyA.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12355,
            "description": "Get the current length of the segment attached to bodyB.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12363,
            "description": "Shift the origin for any points stored in world coordinates.",
            "params": [
                {
                    "name": "newOrigin",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12372,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12378,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12384,
            "description": "Get the reaction force on bodyB at the joint anchor in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12390,
            "description": "Get the reaction torque on bodyB in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12482,
            "description": "This returns true if the position errors are within tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12567,
            "description": "A rope joint enforces a maximum distance between two points on two bodies. It\nhas no other effect.\n\nWarning: if you attempt to change the maximum length during the simulation\nyou will get some non-physical behavior.\n\nA model that would allow you to dynamically modify the length would have some\nsponginess, so I chose not to implement it that way. See {@link DistanceJoint} if you\nwant to dynamically control length.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12607,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12619,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12627,
            "description": "The local anchor point relative to bodyA's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12633,
            "description": "The local anchor point relative to bodyB's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12639,
            "description": "Set the maximum length of the rope.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12645,
            "description": "Get the maximum length of the rope.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12655,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12661,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12667,
            "description": "Get the reaction force on bodyB at the joint anchor in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12673,
            "description": "Get the reaction torque on bodyB in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12769,
            "description": "This returns true if the position errors are within tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12830,
            "description": "A weld joint essentially glues two bodies together. A weld joint may distort\nsomewhat because the island constraint solver is approximate.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12879,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12893,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12901,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12916,
            "description": "The local anchor point relative to bodyA's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12922,
            "description": "The local anchor point relative to bodyB's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12928,
            "description": "Get the reference angle.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12934,
            "description": "Set frequency in Hz.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12940,
            "description": "Get frequency in Hz.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12946,
            "description": "Set damping ratio.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12952,
            "description": "Get damping ratio.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12958,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12964,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12970,
            "description": "Get the reaction force on bodyB at the joint anchor in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 12976,
            "description": "Get the reaction torque on bodyB in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13115,
            "description": "This returns true if the position errors are within tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13217,
            "description": "A wheel joint. This joint provides two degrees of freedom: translation along\nan axis fixed in bodyA and rotation in the plane. In other words, it is a\npoint to line constraint with a rotational motor and a linear spring/damper.\nThis joint is designed for vehicle suspensions.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13234,
            "description": "/** @internal */ _this.m_ay = Vec2.zero();\nbodyA = _this.m_bodyA;\nbodyB = _this.m_bodyB;\n_this.m_type = WheelJoint.TYPE;\n_this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n_this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n// @ts-ignore localAxis\n_this.m_localXAxisA = Vec2.clone(axis ? bodyA.getLocalVector(axis) : def.localAxisA || def.localAxis || Vec2.neo(1.0, 0.0));\n_this.m_localYAxisA = Vec2.crossNumVec2(1.0, _this.m_localXAxisA);\n_this.m_mass = 0.0;\n_this.m_impulse = 0.0;\n_this.m_motorMass = 0.0;\n_this.m_motorImpulse = 0.0;\n_this.m_springMass = 0.0;\n_this.m_springImpulse = 0.0;\n_this.m_maxMotorTorque = def.maxMotorTorque;\n_this.m_motorSpeed = def.motorSpeed;\n_this.m_enableMotor = def.enableMotor;\n_this.m_frequencyHz = def.frequencyHz;\n_this.m_dampingRatio = def.dampingRatio;\n_this.m_bias = 0.0;\n_this.m_gamma = 0.0;\nreturn _this;\n// Linear constraint (point-to-line)\n// d = pB - pA = xB + rB - xA - rA\n// C = dot(ay, d)\n// Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n// rA))\n// = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n// ay), vB)\n// J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n// Spring linear constraint\n// C = dot(ax, d)\n// Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n// dot(cross(rB, ax), vB)\n// J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n// Motor rotational constraint\n// Cdot = wB - wA\n// J = [0 0 -1 0 0 1]\n        }",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13292,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13300,
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13319,
            "description": "The local anchor point relative to bodyA's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13325,
            "description": "The local anchor point relative to bodyB's origin.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13331,
            "description": "The local joint axis relative to bodyA.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13337,
            "description": "Get the current joint translation, usually in meters.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13350,
            "description": "Get the current joint translation speed, usually in meters per second.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13358,
            "description": "Is the joint motor enabled?",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13364,
            "description": "Enable/disable the joint motor.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13372,
            "description": "Set the motor speed, usually in radians per second.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13380,
            "description": "Get the motor speed, usually in radians per second.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13386,
            "description": "Set/Get the maximum motor force, usually in N-m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13397,
            "description": "Get the current motor torque given the inverse time step, usually in N-m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13403,
            "description": "Set/Get the spring frequency in hertz. Setting the frequency to zero disables\nthe spring.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13413,
            "description": "Set/Get the spring damping ratio",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13422,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13428,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13434,
            "description": "Get the reaction force on bodyB at the joint anchor in Newtons.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13440,
            "description": "Get the reaction torque on bodyB in N*m.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13607,
            "description": "This returns true if the position errors are within tolerance.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13765,
            "description": "Deserialize a data object.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 13778,
            "description": "Restore a ref object or deserialize a data object.\n\nThis is passed as callback to class deserializers.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 14019,
            "description": "Find the max separation between poly1 and poly2 using edge normals from\npoly1.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 14088,
            "description": "Find edge normal of max separation on A - return if separating axis is found<br>\n Find edge normal of max separation on B - return if separation axis is found<br>\n Choose reference edge as min(minA, minB)<br>\n Find incident edge<br>\n Clip\nThe normal points from 1 to 2",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 14369,
            "description": "This structure is used to keep track of the best separating axis.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 14377,
            "description": "This holds polygon B expressed in frame A.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 14388,
            "description": "Reference face used for clipping",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 14404,
            "description": "This function collides and edge and a polygon, taking into account edge\nadjacency.",
            "class": ""
        },
        {
            "file": "v3/planck.js",
            "line": 14768,
            "class": ""
        },
        {
            "file": "v3/planck.min.js",
            "line": 1,
            "description": "Planck.js v1.0.0-alpha.4",
            "license": "The MIT license",
            "copyright": "Copyright (c) 2021 Erin Catto, Ali Shakiba\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " v3/p5.play-beta.js:1"
        },
        {
            "message": "unknown tag: year",
            "line": " v3/p5.play-beta.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " v3/p5.play-beta.js:1"
        },
        {
            "message": "unknown tag: descripton",
            "line": " v3/p5.play-beta.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:1972"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:2383"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:2426"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:2573"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:2611"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:2633"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:2680"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:2744"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:2810"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:2968"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:3515"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:3552"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:3637"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:4417"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5070"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5275"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5313"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5493"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5517"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5608"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5617"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5626"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5635"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5659"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5683"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:5699"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:6338"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:6358"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:6366"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:6374"
        },
        {
            "message": "unknown tag: obsolete",
            "line": " v3/p5.play-beta.js:6503"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play-beta.js:6515"
        },
        {
            "message": "unknown tag: version",
            "line": " v3/p5.play.js:1"
        },
        {
            "message": "unknown tag: year",
            "line": " v3/p5.play.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " v3/p5.play.js:1"
        },
        {
            "message": "unknown tag: descripton",
            "line": " v3/p5.play.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:1972"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:2383"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:2426"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:2573"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:2611"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:2633"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:2680"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:2744"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:2810"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:2968"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:3515"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:3552"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:3637"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:4417"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5034"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5237"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5275"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5455"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5479"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5570"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5579"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5588"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5597"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5621"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5645"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:5661"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6161"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6172"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6184"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6193"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6204"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6215"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6226"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6308"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6328"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6336"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6344"
        },
        {
            "message": "unknown tag: obsolete",
            "line": " v3/p5.play.js:6480"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/p5.play.js:6492"
        },
        {
            "message": "unknown tag: license",
            "line": " v3/planck.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " v3/planck.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/planck.js:293"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/planck.js:303"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/planck.js:320"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/planck.js:330"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:340"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/planck.js:370"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:380"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/planck.js:439"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/planck.js:449"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/planck.js:473"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:3198"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:3204"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/planck.js:3461"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/planck.js:3504"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:3742"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4112"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4112"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4112"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4112"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4112"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4433"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4433"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4433"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4433"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4448"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4448"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4448"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4448"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4985"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4985"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4985"
        },
        {
            "message": "replacing incorrect tag: prop with property",
            "line": " v3/planck.js:4985"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:5795"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:5802"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:5852"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:7163"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:7508"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:7792"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:7799"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:7846"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:7908"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:7914"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:7920"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:7926"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:8227"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:8452"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:8476"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:8530"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:8721"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:8751"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " v3/planck.js:9020"
        },
        {
            "message": "unknown tag: internal",
            "line": " v3/planck.js:9189"
        },
        {
            "message": "unknown tag: license",
            "line": " v3/planck.min.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " v3/planck.min.js:1"
        },
        {
            "message": "Missing item type\np5.play",
            "line": " v3/p5.play-beta.js:1"
        },
        {
            "message": "Missing item type\nContains all the collision callback functions for this sprite\nwhen it comes in contact with other sprites or groups.",
            "line": " v3/p5.play-beta.js:306"
        },
        {
            "message": "Missing item type\nContains all the overlap callback functions for this sprite\nwhen it comes in contact with other sprites or groups.",
            "line": " v3/p5.play-beta.js:315"
        },
        {
            "message": "Missing item type\nSimilar to createSprite and the Sprite constructor except\noffset is the distance the collider is from the center of the\nsprite.",
            "line": " v3/p5.play-beta.js:617"
        },
        {
            "message": "Missing item type\nEXPERIMENTAL! This function is incomplete and will be changed.\n\nAdds a joint between this sprite and another sprite.",
            "line": " v3/p5.play-beta.js:836"
        },
        {
            "message": "Missing item type\nClones the collider's props to be transferred to a new collider.",
            "line": " v3/p5.play-beta.js:966"
        },
        {
            "message": "Missing item type\nUse .layer instead.",
            "line": " v3/p5.play-beta.js:1211"
        },
        {
            "message": "Missing item type\nUse .static instead.",
            "line": " v3/p5.play-beta.js:1396"
        },
        {
            "message": "Missing item type",
            "line": " v3/p5.play-beta.js:1504"
        },
        {
            "message": "Missing item type",
            "line": " v3/p5.play-beta.js:1635"
        },
        {
            "message": "Missing item type\nResizes the collider of the sprite.",
            "line": " v3/p5.play-beta.js:1947"
        },
        {
            "message": "Missing item type\nValidate convexity.",
            "line": " v3/p5.play-beta.js:1972"
        },
        {
            "message": "Missing item type\nUpdates the sprite. Called automatically at the end of the draw\ncycle.",
            "line": " v3/p5.play-beta.js:2085"
        },
        {
            "message": "Missing item type\nDefault draw",
            "line": " v3/p5.play-beta.js:2134"
        },
        {
            "message": "Missing item type\nDisplays the Sprite with rotation and scaling applied before\nthe sprite's draw function is called.",
            "line": " v3/p5.play-beta.js:2163"
        },
        {
            "message": "Missing item type\nDraws a fixture. Used to draw the sprite's physics body.",
            "line": " v3/p5.play-beta.js:2212"
        },
        {
            "message": "Missing item type\nDeprecated: set sprite.vel instead.\n\nSets the velocity vector.",
            "line": " v3/p5.play-beta.js:2273"
        },
        {
            "message": "Missing item type\nDeprecated: set direction and set speed separately\n\nSets the speed of the sprite.\nThe action overwrites the current velocity.\nIf direction is not supplied, the current direction is maintained.\nIf direction is not supplied and there is no current velocity, the\ncurrent rotation angle used for the direction.",
            "line": " v3/p5.play-beta.js:2297"
        },
        {
            "message": "Missing item type\nPushes the sprite toward a point.\nThe force is added to the current velocity.\n\nLegacy method, use moveTo or moveTowards instead.",
            "line": " v3/p5.play-beta.js:2525"
        },
        {
            "message": "Missing item type\nUse sprite.animation.name instead.",
            "line": " v3/p5.play-beta.js:2968"
        },
        {
            "message": "Missing item type\nTODO frameRate\nAnother way to set the animation's frame delay.",
            "line": " v3/p5.play-beta.js:3367"
        },
        {
            "message": "Missing item type",
            "line": " v3/p5.play-beta.js:3468"
        },
        {
            "message": "Missing item type\nDeprecated, change the frame property directly.\n\nChanges the current frame.",
            "line": " v3/p5.play-beta.js:3594"
        },
        {
            "message": "Missing item type\nUse .frame instead.\n\nReturns the current frame number.",
            "line": " v3/p5.play-beta.js:3663"
        },
        {
            "message": "Missing item type\nUse .lastFrame instead.\n\nReturns the last frame number.",
            "line": " v3/p5.play-beta.js:3676"
        },
        {
            "message": "Missing item type\nContains all the collision callback functions for this group\nwhen it comes in contact with other sprites or groups.",
            "line": " v3/p5.play-beta.js:3843"
        },
        {
            "message": "Missing item type\nContains all the overlap callback functions for this group\nwhen it comes in contact with other sprites or groups.",
            "line": " v3/p5.play-beta.js:3852"
        },
        {
            "message": "Missing item type\nGets the member at index i.",
            "line": " v3/p5.play-beta.js:4343"
        },
        {
            "message": "Missing item type\nUse group.includes(sprite) instead.",
            "line": " v3/p5.play-beta.js:4362"
        },
        {
            "message": "Missing item type\nAlias for group.length",
            "line": " v3/p5.play-beta.js:4409"
        },
        {
            "message": "Missing item type\nReturns the group's unique identifier.",
            "line": " v3/p5.play-beta.js:4417"
        },
        {
            "message": "Missing item type\nReturns the highest depth in a group",
            "line": " v3/p5.play-beta.js:4519"
        },
        {
            "message": "Missing item type\nReturns the lowest depth in a group",
            "line": " v3/p5.play-beta.js:4535"
        },
        {
            "message": "Missing item type\nUsed internally to find a contact callback between two sprites.",
            "line": " v3/p5.play-beta.js:5070"
        },
        {
            "message": "Missing item type\nThis planck function should've be named \"shouldContact\", because that's what\nit actually decides.\n\nHere we override it to allow for overlap events between sprites.",
            "line": " v3/p5.play-beta.js:5107"
        },
        {
            "message": "Missing item type\nCreates a new sprite. Equivalent to `new Sprite()`",
            "line": " v3/p5.play-beta.js:5608"
        },
        {
            "message": "Missing item type\nCreates a new group of sprites. Equivalent to `new Group()`",
            "line": " v3/p5.play-beta.js:5617"
        },
        {
            "message": "Missing item type",
            "line": " v3/p5.play-beta.js:6038"
        },
        {
            "message": "Missing item type\nObsolete: Use kb.pressing(key) instead.",
            "line": " v3/p5.play-beta.js:6503"
        },
        {
            "message": "Missing item type",
            "line": " v3/p5.play-beta.js:6515"
        },
        {
            "message": "Missing item type\np5.play",
            "line": " v3/p5.play.js:1"
        },
        {
            "message": "Missing item type\nContains all the collision callback functions for this sprite\nwhen it comes in contact with other sprites or groups.",
            "line": " v3/p5.play.js:306"
        },
        {
            "message": "Missing item type\nContains all the overlap callback functions for this sprite\nwhen it comes in contact with other sprites or groups.",
            "line": " v3/p5.play.js:315"
        },
        {
            "message": "Missing item type\nSimilar to createSprite and the Sprite constructor except\noffset is the distance the collider is from the center of the\nsprite.",
            "line": " v3/p5.play.js:617"
        },
        {
            "message": "Missing item type\nEXPERIMENTAL! This function is incomplete and will be changed.\n\nAdds a joint between this sprite and another sprite.",
            "line": " v3/p5.play.js:836"
        },
        {
            "message": "Missing item type\nClones the collider's props to be transferred to a new collider.",
            "line": " v3/p5.play.js:966"
        },
        {
            "message": "Missing item type\nUse .layer instead.",
            "line": " v3/p5.play.js:1211"
        },
        {
            "message": "Missing item type\nUse .static instead.",
            "line": " v3/p5.play.js:1396"
        },
        {
            "message": "Missing item type",
            "line": " v3/p5.play.js:1504"
        },
        {
            "message": "Missing item type",
            "line": " v3/p5.play.js:1635"
        },
        {
            "message": "Missing item type\nResizes the collider of the sprite.",
            "line": " v3/p5.play.js:1947"
        },
        {
            "message": "Missing item type\nValidate convexity.",
            "line": " v3/p5.play.js:1972"
        },
        {
            "message": "Missing item type\nUpdates the sprite. Called automatically at the end of the draw\ncycle.",
            "line": " v3/p5.play.js:2085"
        },
        {
            "message": "Missing item type\nDefault draw",
            "line": " v3/p5.play.js:2134"
        },
        {
            "message": "Missing item type\nDisplays the Sprite with rotation and scaling applied before\nthe sprite's draw function is called.",
            "line": " v3/p5.play.js:2163"
        },
        {
            "message": "Missing item type\nDraws a fixture. Used to draw the sprite's physics body.",
            "line": " v3/p5.play.js:2212"
        },
        {
            "message": "Missing item type\nDeprecated: set sprite.vel instead.\n\nSets the velocity vector.",
            "line": " v3/p5.play.js:2273"
        },
        {
            "message": "Missing item type\nDeprecated: set direction and set speed separately\n\nSets the speed of the sprite.\nThe action overwrites the current velocity.\nIf direction is not supplied, the current direction is maintained.\nIf direction is not supplied and there is no current velocity, the\ncurrent rotation angle used for the direction.",
            "line": " v3/p5.play.js:2297"
        },
        {
            "message": "Missing item type\nPushes the sprite toward a point.\nThe force is added to the current velocity.\n\nLegacy method, use moveTo or moveTowards instead.",
            "line": " v3/p5.play.js:2525"
        },
        {
            "message": "Missing item type\nUse sprite.animation.name instead.",
            "line": " v3/p5.play.js:2968"
        },
        {
            "message": "Missing item type\nTODO frameRate\nAnother way to set the animation's frame delay.",
            "line": " v3/p5.play.js:3367"
        },
        {
            "message": "Missing item type",
            "line": " v3/p5.play.js:3468"
        },
        {
            "message": "Missing item type\nDeprecated, change the frame property directly.\n\nChanges the current frame.",
            "line": " v3/p5.play.js:3594"
        },
        {
            "message": "Missing item type\nUse .frame instead.\n\nReturns the current frame number.",
            "line": " v3/p5.play.js:3663"
        },
        {
            "message": "Missing item type\nUse .lastFrame instead.\n\nReturns the last frame number.",
            "line": " v3/p5.play.js:3676"
        },
        {
            "message": "Missing item type\nContains all the collision callback functions for this group\nwhen it comes in contact with other sprites or groups.",
            "line": " v3/p5.play.js:3843"
        },
        {
            "message": "Missing item type\nContains all the overlap callback functions for this group\nwhen it comes in contact with other sprites or groups.",
            "line": " v3/p5.play.js:3852"
        },
        {
            "message": "Missing item type\nGets the member at index i.",
            "line": " v3/p5.play.js:4343"
        },
        {
            "message": "Missing item type\nUse group.includes(sprite) instead.",
            "line": " v3/p5.play.js:4362"
        },
        {
            "message": "Missing item type\nAlias for group.length",
            "line": " v3/p5.play.js:4409"
        },
        {
            "message": "Missing item type\nReturns the group's unique identifier.",
            "line": " v3/p5.play.js:4417"
        },
        {
            "message": "Missing item type\nReturns the highest depth in a group",
            "line": " v3/p5.play.js:4519"
        },
        {
            "message": "Missing item type\nReturns the lowest depth in a group",
            "line": " v3/p5.play.js:4535"
        },
        {
            "message": "Missing item type\nUsed internally to find a contact callback between two sprites.",
            "line": " v3/p5.play.js:5034"
        },
        {
            "message": "Missing item type\nThis planck function should've be named \"shouldContact\", because that's what\nit actually decides.\n\nHere we override it to allow for overlap events between sprites.",
            "line": " v3/p5.play.js:5071"
        },
        {
            "message": "Missing item type\nCreates a new sprite. Equivalent to `new Sprite()`",
            "line": " v3/p5.play.js:5570"
        },
        {
            "message": "Missing item type\nCreates a new group of sprites. Equivalent to `new Group()`",
            "line": " v3/p5.play.js:5579"
        },
        {
            "message": "Missing item type",
            "line": " v3/p5.play.js:6000"
        },
        {
            "message": "Missing item type\nObsolete: Use kb.pressing(key) instead.",
            "line": " v3/p5.play.js:6480"
        },
        {
            "message": "Missing item type",
            "line": " v3/p5.play.js:6492"
        },
        {
            "message": "Missing item type\nPlanck.js v1.0.0-alpha.4",
            "line": " v3/planck.js:1"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:244"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:251"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:264"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:274"
        },
        {
            "message": "Missing item type\nDoes this vector contain finite coordinates?",
            "line": " v3/planck.js:278"
        },
        {
            "message": "Missing item type\nSet this vector to all zeros.",
            "line": " v3/planck.js:293"
        },
        {
            "message": "Missing item type\nSet this vector to some specified coordinates.",
            "line": " v3/planck.js:303"
        },
        {
            "message": "Missing item type\nSet this vector to some specified coordinates.",
            "line": " v3/planck.js:320"
        },
        {
            "message": "Missing item type\nSet this vector to some specified coordinates.",
            "line": " v3/planck.js:330"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:340"
        },
        {
            "message": "Missing item type\nSet linear combination of v and w: `a * v + b * w`",
            "line": " v3/planck.js:352"
        },
        {
            "message": "Missing item type\nAdd a vector to this vector.",
            "line": " v3/planck.js:370"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:380"
        },
        {
            "message": "Missing item type\nAdd linear combination of v and w: `a * v + b * w`",
            "line": " v3/planck.js:392"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:410"
        },
        {
            "message": "Missing item type\nSubtract linear combination of v and w: `a * v + b * w`",
            "line": " v3/planck.js:421"
        },
        {
            "message": "Missing item type\nSubtract a vector from this vector",
            "line": " v3/planck.js:439"
        },
        {
            "message": "Missing item type\nMultiply this vector by a scalar.",
            "line": " v3/planck.js:449"
        },
        {
            "message": "Missing item type\nGet the length of this vector (the norm).\n\nFor performance, use this instead of lengthSquared (if possible).",
            "line": " v3/planck.js:459"
        },
        {
            "message": "Missing item type\nGet the length squared.",
            "line": " v3/planck.js:467"
        },
        {
            "message": "Missing item type\nConvert this vector into a unit vector.",
            "line": " v3/planck.js:473"
        },
        {
            "message": "Missing item type\nGet the length of this vector (the norm).\n\nFor performance, use this instead of lengthSquared (if possible).",
            "line": " v3/planck.js:488"
        },
        {
            "message": "Missing item type\nGet the length squared.",
            "line": " v3/planck.js:496"
        },
        {
            "message": "Missing item type\nGet the skew vector such that dot(skew_vec, other) == cross(vec, other)",
            "line": " v3/planck.js:515"
        },
        {
            "message": "Missing item type\nPerform the dot product on two vectors.",
            "line": " v3/planck.js:521"
        },
        {
            "message": "Missing item type\nPerform the cross product on two vectors. In 2D this produces a scalar.\n\nPerform the cross product on a vector and a scalar. In 2D this produces a\nvector.",
            "line": " v3/planck.js:527"
        },
        {
            "message": "Missing item type\nPerform the cross product on two vectors. In 2D this produces a scalar.",
            "line": " v3/planck.js:545"
        },
        {
            "message": "Missing item type\nPerform the cross product on a vector and a scalar. In 2D this produces a\nvector.",
            "line": " v3/planck.js:551"
        },
        {
            "message": "Missing item type\nPerform the cross product on a vector and a scalar. In 2D this produces a\nvector.",
            "line": " v3/planck.js:558"
        },
        {
            "message": "Missing item type\nReturns `a + (v x w)`",
            "line": " v3/planck.js:565"
        },
        {
            "message": "Missing item type\nReturns `a + (v x w)`",
            "line": " v3/planck.js:577"
        },
        {
            "message": "Missing item type\nReturns `a + (v x w)`",
            "line": " v3/planck.js:583"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:592"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:656"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:663"
        },
        {
            "message": "Missing item type\nVerify that the bounds are sorted.",
            "line": " v3/planck.js:713"
        },
        {
            "message": "Missing item type\nGet the center of the AABB.",
            "line": " v3/planck.js:728"
        },
        {
            "message": "Missing item type\nGet the extents of the AABB (half-widths).",
            "line": " v3/planck.js:734"
        },
        {
            "message": "Missing item type\nGet the perimeter length.",
            "line": " v3/planck.js:740"
        },
        {
            "message": "Missing item type\nCombine one or two AABB into this one.",
            "line": " v3/planck.js:746"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:860"
        },
        {
            "message": "Missing item type\nTuning constants based on meters-kilograms-seconds (MKS) units.",
            "line": " v3/planck.js:891"
        },
        {
            "message": "Missing item type\nThe radius of the polygon/edge shape skin. This should not be modified.\nMaking this smaller means polygons will have an insufficient buffer for\ncontinuous collision. Making it larger may create artifacts for vertex\ncollision.",
            "line": " v3/planck.js:904"
        },
        {
            "message": "Missing item type\nThe maximum number of contact points between two convex shapes. Do not change\nthis value.",
            "line": " v3/planck.js:935"
        },
        {
            "message": "Missing item type\nThe maximum number of vertices on a convex polygon. You cannot increase this\ntoo much because BlockAllocator has a maximum object size.",
            "line": " v3/planck.js:940"
        },
        {
            "message": "Missing item type\nThis is used to fatten AABBs in the dynamic tree. This allows proxies to move\nby a small amount without triggering a tree adjustment. This is in meters.",
            "line": " v3/planck.js:945"
        },
        {
            "message": "Missing item type\nThis is used to fatten AABBs in the dynamic tree. This is used to predict the\nfuture position based on the current displacement. This is a dimensionless\nmultiplier.",
            "line": " v3/planck.js:950"
        },
        {
            "message": "Missing item type\nA small length used as a collision and constraint tolerance. Usually it is\nchosen to be numerically significant, but visually insignificant.",
            "line": " v3/planck.js:956"
        },
        {
            "message": "Missing item type\nA small angle used as a collision and constraint tolerance. Usually it is\nchosen to be numerically significant, but visually insignificant.",
            "line": " v3/planck.js:961"
        },
        {
            "message": "Missing item type\nMaximum number of sub-steps per contact in continuous physics simulation.",
            "line": " v3/planck.js:966"
        },
        {
            "message": "Missing item type\nMaximum number of contacts to be handled to solve a TOI impact.",
            "line": " v3/planck.js:971"
        },
        {
            "message": "Missing item type\nMaximum iterations to solve a TOI.",
            "line": " v3/planck.js:975"
        },
        {
            "message": "Missing item type\nMaximum iterations to find Distance.",
            "line": " v3/planck.js:979"
        },
        {
            "message": "Missing item type\nA velocity threshold for elastic collisions. Any collision with a relative\nlinear velocity below this threshold will be treated as inelastic.",
            "line": " v3/planck.js:983"
        },
        {
            "message": "Missing item type\nThe maximum linear position correction used when solving constraints. This\nhelps to prevent overshoot.",
            "line": " v3/planck.js:988"
        },
        {
            "message": "Missing item type\nThe maximum angular position correction used when solving constraints. This\nhelps to prevent overshoot.",
            "line": " v3/planck.js:993"
        },
        {
            "message": "Missing item type\nThe maximum linear velocity of a body. This limit is very large and is used\nto prevent numerical problems. You shouldn't need to adjust Settings.",
            "line": " v3/planck.js:998"
        },
        {
            "message": "Missing item type\nThe maximum angular velocity of a body. This limit is very large and is used\nto prevent numerical problems. You shouldn't need to adjust Settings.",
            "line": " v3/planck.js:1003"
        },
        {
            "message": "Missing item type\nThis scale factor controls how fast overlap is resolved. Ideally this would\nbe 1 so that overlap is removed in one time step. However using values close\nto 1 often lead to overshoot.",
            "line": " v3/planck.js:1008"
        },
        {
            "message": "Missing item type\nThe time that a body must be still before it will go to sleep.",
            "line": " v3/planck.js:1016"
        },
        {
            "message": "Missing item type\nA body cannot sleep if its linear velocity is above this tolerance.",
            "line": " v3/planck.js:1020"
        },
        {
            "message": "Missing item type\nA body cannot sleep if its angular velocity is above this tolerance.",
            "line": " v3/planck.js:1024"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:1109"
        },
        {
            "message": "Missing item type\nA node in the dynamic tree. The client does not interact with this directly.",
            "line": " v3/planck.js:1140"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:1145"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:1151"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:1155"
        },
        {
            "message": "Missing item type\nA dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\ndynamic tree arranges data in a binary tree to accelerate queries such as\nvolume queries and ray casts. Leafs are proxies with an AABB. In the tree we\nexpand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\nthan the client object. This allows the client object to move by small\namounts without triggering a tree update.\n\nNodes are pooled and relocatable, so we use node indices rather than\npointers.",
            "line": " v3/planck.js:1164"
        },
        {
            "message": "Missing item type\nGet proxy user data.",
            "line": " v3/planck.js:1210"
        },
        {
            "message": "Missing item type\nGet the fat AABB for a node id.",
            "line": " v3/planck.js:1219"
        },
        {
            "message": "Missing item type\nCreate a proxy in the tree as a leaf node. We return the index of the node\ninstead of a pointer so that we can grow the node pool.\n\nCreate a proxy. Provide a tight fitting AABB and a userData pointer.",
            "line": " v3/planck.js:1245"
        },
        {
            "message": "Missing item type\nDestroy a proxy. This asserts if the id is invalid.",
            "line": " v3/planck.js:1261"
        },
        {
            "message": "Missing item type\nMove a proxy with a swepted AABB. If the proxy has moved outside of its\nfattened AABB, then the proxy is removed from the tree and re-inserted.\nOtherwise the function returns immediately.",
            "line": " v3/planck.js:1269"
        },
        {
            "message": "Missing item type\nPerform a left or right rotation if node A is imbalanced. Returns the new\nroot index.",
            "line": " v3/planck.js:1448"
        },
        {
            "message": "Missing item type\nCompute the height of the binary tree in O(N) time. Should not be called\noften.",
            "line": " v3/planck.js:1544"
        },
        {
            "message": "Missing item type\nGet the ratio of the sum of the node areas to the root area.",
            "line": " v3/planck.js:1554"
        },
        {
            "message": "Missing item type\nCompute the height of a sub-tree.",
            "line": " v3/planck.js:1576"
        },
        {
            "message": "Missing item type\nValidate this tree. For testing.",
            "line": " v3/planck.js:1627"
        },
        {
            "message": "Missing item type\nGet the maximum balance of an node in the tree. The balance is the difference\nin height of the two children of a node.",
            "line": " v3/planck.js:1634"
        },
        {
            "message": "Missing item type\nBuild an optimal tree. Very expensive. For testing.",
            "line": " v3/planck.js:1652"
        },
        {
            "message": "Missing item type\nShift the world origin. Useful for large worlds. The shift formula is:\nposition -= newOrigin",
            "line": " v3/planck.js:1711"
        },
        {
            "message": "Missing item type\nQuery an AABB for overlapping proxies. The callback class is called for each\nproxy that overlaps the supplied AABB.",
            "line": " v3/planck.js:1730"
        },
        {
            "message": "Missing item type\nRay-cast against the proxies in the tree. This relies on the callback to\nperform a exact ray-cast in the case were the proxy contains a shape. The\ncallback also performs the any collision filtering. This has performance\nroughly equal to k * log(n), where k is the number of collisions and n is the\nnumber of proxies in the tree.",
            "line": " v3/planck.js:1757"
        },
        {
            "message": "Missing item type\nThe broad-phase wraps and extends a dynamic-tree to keep track of moved\nobjects and query them on update.",
            "line": " v3/planck.js:1896"
        },
        {
            "message": "Missing item type\nQuery an AABB for overlapping proxies. The callback class is called for each\nproxy that overlaps the supplied AABB.",
            "line": " v3/planck.js:1906"
        },
        {
            "message": "Missing item type\nGet user data from a proxy. Returns null if the id is invalid.",
            "line": " v3/planck.js:1928"
        },
        {
            "message": "Missing item type\nTest overlap of fat AABBs.",
            "line": " v3/planck.js:1934"
        },
        {
            "message": "Missing item type\nGet the fat AABB for a proxy.",
            "line": " v3/planck.js:1942"
        },
        {
            "message": "Missing item type\nGet the number of proxies.",
            "line": " v3/planck.js:1948"
        },
        {
            "message": "Missing item type\nGet the height of the embedded tree.",
            "line": " v3/planck.js:1954"
        },
        {
            "message": "Missing item type\nGet the balance (integer) of the embedded tree.",
            "line": " v3/planck.js:1960"
        },
        {
            "message": "Missing item type\nGet the quality metric of the embedded tree.",
            "line": " v3/planck.js:1966"
        },
        {
            "message": "Missing item type\nRay-cast against the proxies in the tree. This relies on the callback to\nperform a exact ray-cast in the case were the proxy contains a shape. The\ncallback also performs the any collision filtering. This has performance\nroughly equal to k * log(n), where k is the number of collisions and n is the\nnumber of proxies in the tree.",
            "line": " v3/planck.js:1972"
        },
        {
            "message": "Missing item type\nShift the world origin. Useful for large worlds. The shift formula is:\nposition -= newOrigin",
            "line": " v3/planck.js:1985"
        },
        {
            "message": "Missing item type\nCreate a proxy with an initial AABB. Pairs are not reported until UpdatePairs\nis called.",
            "line": " v3/planck.js:1994"
        },
        {
            "message": "Missing item type\nDestroy a proxy. It is up to the client to remove any pairs.",
            "line": " v3/planck.js:2004"
        },
        {
            "message": "Missing item type\nCall moveProxy as many times as you like, then when you are done call\nUpdatePairs to finalized the proxy pairs (for your time step).",
            "line": " v3/planck.js:2012"
        },
        {
            "message": "Missing item type\nCall to trigger a re-processing of it's pairs on the next call to\nUpdatePairs.",
            "line": " v3/planck.js:2022"
        },
        {
            "message": "Missing item type\nUpdate the pairs. This results in pair callbacks. This can only add pairs.",
            "line": " v3/planck.js:2039"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2086"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2101"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2128"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2148"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2154"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2158"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2162"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2182"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2193"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2218"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2229"
        },
        {
            "message": "Missing item type\nA transform contains translation and rotation. It is used to represent the\nposition and orientation of rigid frames. Initialize using a position vector\nand a rotation.",
            "line": " v3/planck.js:2259"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2284"
        },
        {
            "message": "Missing item type\nSet this to the identity transform.",
            "line": " v3/planck.js:2297"
        },
        {
            "message": "Missing item type\nSet this based on the position and angle.",
            "line": " v3/planck.js:2304"
        },
        {
            "message": "Missing item type\nSet this based on the position and angle.",
            "line": " v3/planck.js:2318"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2364"
        },
        {
            "message": "Missing item type\nThis describes the motion of a body/shape for TOI computation. Shapes are\ndefined with respect to the body origin, which may not coincide with the\ncenter of mass. However, to support dynamics we must interpolate the center\nof mass position.",
            "line": " v3/planck.js:2434"
        },
        {
            "message": "Missing item type\nGet the interpolated transform at a specific time.",
            "line": " v3/planck.js:2462"
        },
        {
            "message": "Missing item type\nAdvance the sweep forward, yielding a new initial state.",
            "line": " v3/planck.js:2475"
        },
        {
            "message": "Missing item type\nnormalize the angles in radians to be between -pi and pi.",
            "line": " v3/planck.js:2490"
        },
        {
            "message": "Missing item type\nA shape is used for collision detection. You can create a shape however you\nlike. Shapes used for simulation in World are created automatically when a\nFixture is created. Shapes may encapsulate one or more child shapes.",
            "line": " v3/planck.js:2609"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2617"
        },
        {
            "message": "Missing item type\nGet the type of this shape. You can use this to down cast to the concrete\nshape.",
            "line": " v3/planck.js:2629"
        },
        {
            "message": "Missing item type\nThis proxy is used internally to connect shape children to the broad-phase.",
            "line": " v3/planck.js:2674"
        },
        {
            "message": "Missing item type\nA fixture is used to attach a shape to a body for collision detection. A\nfixture inherits its transform from its parent. Fixtures hold additional\nnon-geometric data such as friction, collision filters, etc.\n\nTo create a new Fixture use {@link Body.createFixture}.",
            "line": " v3/planck.js:2686"
        },
        {
            "message": "Missing item type\nif (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n}\nelse if (typeof def === 'number') {\n    def = { density: def };\n}\ndef = options(def, FixtureDefDefault);\nthis.m_body = body;\nthis.m_friction = def.friction;\nthis.m_restitution = def.restitution;\nthis.m_density = def.density;\nthis.m_isSensor = def.isSensor;\nthis.m_filterGroupIndex = def.filterGroupIndex;\nthis.m_filterCategoryBits = def.filterCategoryBits;\nthis.m_filterMaskBits = def.filterMaskBits;\n// TODO validate shape\nthis.m_shape = shape; // .clone();\nthis.m_next = null;\nthis.m_proxies = [];\nthis.m_proxyCount = 0;\nvar childCount = this.m_shape.getChildCount();\nfor (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n}\nthis.m_userData = def.userData;\n        }\n        /**\n         * Re-setup fixture.\n         * @internal",
            "line": " v3/planck.js:2695"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2741"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:2754"
        },
        {
            "message": "Missing item type\nGet the type of the child shape. You can use this to down cast to the\nconcrete shape.",
            "line": " v3/planck.js:2760"
        },
        {
            "message": "Missing item type\nGet the child shape. You can modify the child shape, however you should not\nchange the number of vertices because this will crash some collision caching\nmechanisms. Manipulating the shape may lead to non-physical behavior.",
            "line": " v3/planck.js:2767"
        },
        {
            "message": "Missing item type\nA sensor shape collects contact information but never generates a collision\nresponse.",
            "line": " v3/planck.js:2775"
        },
        {
            "message": "Missing item type\nSet if this fixture is a sensor.",
            "line": " v3/planck.js:2782"
        },
        {
            "message": "Missing item type\nGet the user data that was assigned in the fixture definition. Use this to\nstore your application specific data.",
            "line": " v3/planck.js:2797"
        },
        {
            "message": "Missing item type\nSet the user data. Use this to store your application specific data.",
            "line": " v3/planck.js:2804"
        },
        {
            "message": "Missing item type\nGet the parent body of this fixture. This is null if the fixture is not\nattached.",
            "line": " v3/planck.js:2810"
        },
        {
            "message": "Missing item type\nGet the next fixture in the parent body's fixture list.",
            "line": " v3/planck.js:2817"
        },
        {
            "message": "Missing item type\nGet the density of this fixture.",
            "line": " v3/planck.js:2823"
        },
        {
            "message": "Missing item type\nSet the density of this fixture. This will _not_ automatically adjust the\nmass of the body. You must call Body.resetMassData to update the body's mass.",
            "line": " v3/planck.js:2829"
        },
        {
            "message": "Missing item type\nGet the coefficient of friction, usually in the range [0,1].",
            "line": " v3/planck.js:2836"
        },
        {
            "message": "Missing item type\nSet the coefficient of friction. This will not change the friction of\nexisting contacts.",
            "line": " v3/planck.js:2842"
        },
        {
            "message": "Missing item type\nGet the coefficient of restitution.",
            "line": " v3/planck.js:2849"
        },
        {
            "message": "Missing item type\nSet the coefficient of restitution. This will not change the restitution of\nexisting contacts.",
            "line": " v3/planck.js:2855"
        },
        {
            "message": "Missing item type\nTest a point in world coordinates for containment in this fixture.",
            "line": " v3/planck.js:2862"
        },
        {
            "message": "Missing item type\nCast a ray against this shape.",
            "line": " v3/planck.js:2868"
        },
        {
            "message": "Missing item type\nGet the mass data for this fixture. The mass data is based on the density and\nthe shape. The rotational inertia is about the shape's origin. This operation\nmay be expensive.",
            "line": " v3/planck.js:2874"
        },
        {
            "message": "Missing item type\nGet the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\nmore accurate AABB, compute it using the shape and the body transform.",
            "line": " v3/planck.js:2882"
        },
        {
            "message": "Missing item type\nThese support body activation/deactivation.",
            "line": " v3/planck.js:2889"
        },
        {
            "message": "Missing item type\nUpdates this fixture proxy in broad-phase (with combined AABB of current and\nnext transformation).",
            "line": " v3/planck.js:2910"
        },
        {
            "message": "Missing item type\nSet the contact filtering data. This will not update contacts until the next\ntime step when either parent body is active and awake. This automatically\ncalls refilter.",
            "line": " v3/planck.js:2928"
        },
        {
            "message": "Missing item type\nCall this if you want to establish collision that was previously disabled by\nContactFilter.",
            "line": " v3/planck.js:2957"
        },
        {
            "message": "Missing item type\nImplement this method to provide collision filtering, if you want finer\ncontrol over contact creation.\n\nReturn true if contact calculations should be performed between these two\nfixtures.\n\nWarning: for performance reasons this is only called when the AABBs begin to\noverlap.",
            "line": " v3/planck.js:2986"
        },
        {
            "message": "Missing item type\nMassData This holds the mass data computed for a shape.",
            "line": " v3/planck.js:3050"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:3055"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:3057"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:3059"
        },
        {
            "message": "Missing item type\nA rigid body composed of one or more fixtures.\n\nTo create a new Body use {@link World.createBody}.",
            "line": " v3/planck.js:3064"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:3070"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:3119"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:3135"
        },
        {
            "message": "Missing item type\nWarning: this list changes during the time step and you may miss some\ncollisions if you don't use ContactListener.",
            "line": " v3/planck.js:3167"
        },
        {
            "message": "Missing item type\nThis will alter the mass and velocity.",
            "line": " v3/planck.js:3183"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:3198"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:3204"
        },
        {
            "message": "Missing item type\nShould this body be treated like a bullet for continuous collision detection?",
            "line": " v3/planck.js:3245"
        },
        {
            "message": "Missing item type\nSet the sleep state of the body. A sleeping body has very low CPU cost.",
            "line": " v3/planck.js:3263"
        },
        {
            "message": "Missing item type\nSet the active state of the body. An inactive body is not simulated and\ncannot be collided with or woken up. If you pass a flag of true, all fixtures\nwill be added to the broad-phase. If you pass a flag of false, all fixtures\nwill be removed from the broad-phase and all contacts will be destroyed.\nFixtures and joints are otherwise unaffected.\n\nYou may continue to create/destroy fixtures and joints on inactive bodies.\nFixtures on an inactive body are implicitly inactive and will not participate\nin collisions, ray-casts, or queries. Joints connected to an inactive body\nare implicitly inactive. An inactive body is still owned by a World object\nand remains",
            "line": " v3/planck.js:3287"
        },
        {
            "message": "Missing item type\nSet this body to have fixed rotation. This causes the mass to be reset.",
            "line": " v3/planck.js:3332"
        },
        {
            "message": "Missing item type\nGet the world transform for the body's origin.",
            "line": " v3/planck.js:3343"
        },
        {
            "message": "Missing item type\nSet the position of the body's origin and rotation. Manipulating a body's\ntransform may cause non-physical behavior. Note: contacts are updated on the\nnext call to World.step.",
            "line": " v3/planck.js:3349"
        },
        {
            "message": "Missing item type\nUpdate fixtures in broad-phase.",
            "line": " v3/planck.js:3371"
        },
        {
            "message": "Missing item type\nUsed in TOI.",
            "line": " v3/planck.js:3382"
        },
        {
            "message": "Missing item type\nGet the world position for the body's origin.",
            "line": " v3/planck.js:3392"
        },
        {
            "message": "Missing item type\nGet the current world rotation angle in radians.",
            "line": " v3/planck.js:3401"
        },
        {
            "message": "Missing item type\nGet the world position of the center of mass.",
            "line": " v3/planck.js:3410"
        },
        {
            "message": "Missing item type\nGet the local position of the center of mass.",
            "line": " v3/planck.js:3416"
        },
        {
            "message": "Missing item type\nGet the linear velocity of the center of mass.",
            "line": " v3/planck.js:3422"
        },
        {
            "message": "Missing item type\nGet the world linear velocity of a world point attached to this body.",
            "line": " v3/planck.js:3430"
        },
        {
            "message": "Missing item type\nGet the world velocity of a local point.",
            "line": " v3/planck.js:3439"
        },
        {
            "message": "Missing item type\nSet the linear velocity of the center of mass.",
            "line": " v3/planck.js:3447"
        },
        {
            "message": "Missing item type\nGet the angular velocity.",
            "line": " v3/planck.js:3461"
        },
        {
            "message": "Missing item type\nSet the angular velocity.",
            "line": " v3/planck.js:3469"
        },
        {
            "message": "Missing item type\nScale the gravity applied to this body.",
            "line": " v3/planck.js:3498"
        },
        {
            "message": "Missing item type\nGet the total mass of the body.",
            "line": " v3/planck.js:3504"
        },
        {
            "message": "Missing item type\nGet the rotational inertia of the body about the local origin.",
            "line": " v3/planck.js:3512"
        },
        {
            "message": "Missing item type\nCopy the mass data of the body to data.",
            "line": " v3/planck.js:3521"
        },
        {
            "message": "Missing item type\nThis resets the mass properties to the sum of the mass properties of the\nfixtures. This normally does not need to be called unless you called\nSetMassData to override the mass and you later want to reset the mass.",
            "line": " v3/planck.js:3529"
        },
        {
            "message": "Missing item type\nSet the mass properties to override the mass properties of the fixtures. Note\nthat this changes the center of mass position. Note that creating or\ndestroying fixtures can also alter the mass. This function has no effect if\nthe body isn't dynamic.",
            "line": " v3/planck.js:3585"
        },
        {
            "message": "Missing item type\nApply a force at a world point. If the force is not applied at the center of\nmass, it will generate a torque and affect the angular velocity. This wakes\nup the body.",
            "line": " v3/planck.js:3619"
        },
        {
            "message": "Missing item type\nApply a force to the center of mass. This wakes up the body.",
            "line": " v3/planck.js:3642"
        },
        {
            "message": "Missing item type\nApply a torque. This affects the angular velocity without affecting the\nlinear velocity of the center of mass. This wakes up the body.",
            "line": " v3/planck.js:3661"
        },
        {
            "message": "Missing item type\nApply an impulse at a point. This immediately modifies the velocity. It also\nmodifies the angular velocity if the point of application is not at the\ncenter of mass. This wakes up the body.",
            "line": " v3/planck.js:3681"
        },
        {
            "message": "Missing item type\nApply an angular impulse.",
            "line": " v3/planck.js:3704"
        },
        {
            "message": "Missing item type\nThis is used to prevent connected bodies (by joints) from colliding,\ndepending on the joint's collideConnected flag.",
            "line": " v3/planck.js:3723"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:3742"
        },
        {
            "message": "Missing item type\nDestroy a fixture. This removes the fixture from the broad-phase and destroys\nall contacts associated with this fixture. This will automatically adjust the\nmass of the body if the body is dynamic and the fixture has positive density.\nAll fixtures attached to a body are implicitly destroyed when the body is\ndestroyed.\n\nWarning: This function is locked during callbacks.",
            "line": " v3/planck.js:3773"
        },
        {
            "message": "Missing item type\nGet the corresponding world point of a local point.",
            "line": " v3/planck.js:3824"
        },
        {
            "message": "Missing item type\nGet the corresponding world vector of a local vector.",
            "line": " v3/planck.js:3830"
        },
        {
            "message": "Missing item type\nGets the corresponding local point of a world point.",
            "line": " v3/planck.js:3836"
        },
        {
            "message": "Missing item type\nGets the corresponding local vector of a world vector.",
            "line": " v3/planck.js:3842"
        },
        {
            "message": "Missing item type\nA static body does not move under simulation and behaves as if it has infinite mass.\nInternally, zero is stored for the mass and the inverse mass.\nStatic bodies can be moved manually by the user.\nA static body has zero velocity.\nStatic bodies do not collide with other static or kinematic bodies.",
            "line": " v3/planck.js:3848"
        },
        {
            "message": "Missing item type\nA kinematic body moves under simulation according to its velocity.\nKinematic bodies do not respond to forces.\nThey can be moved manually by the user, but normally a kinematic body is moved by setting its velocity.\nA kinematic body behaves as if it has infinite mass, however, zero is stored for the mass and the inverse mass.\nKinematic bodies do not collide with other kinematic or static bodies.",
            "line": " v3/planck.js:3856"
        },
        {
            "message": "Missing item type\nA dynamic body is fully simulated.\nThey can be moved manually by the user, but normally they move according to forces.\nA dynamic body can collide with all body types.\nA dynamic body always has finite, non-zero mass.\nIf you try to set the mass of a dynamic body to zero, it will automatically acquire a mass of one kilogram and it won't rotate.",
            "line": " v3/planck.js:3864"
        },
        {
            "message": "Missing item type\nA 2-by-2 matrix. Stored in column-major order.",
            "line": " v3/planck.js:3898"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:3917"
        },
        {
            "message": "Missing item type\nSolve A * x = b, where b is a column vector. This is more efficient than\ncomputing the inverse in one-shot cases.",
            "line": " v3/planck.js:3975"
        },
        {
            "message": "Missing item type\nThis is used for determining the state of contact points.",
            "line": " v3/planck.js:4084"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:4089"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:4091"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:4093"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:4095"
        },
        {
            "message": "Missing item type\nUsed for computing contact manifolds.",
            "line": " v3/planck.js:4098"
        },
        {
            "message": "Missing item type\nEvaluate the manifold with supplied transforms. This assumes modest motion\nfrom the original state. This does not change the point count, impulses, etc.\nThe radii must come from the shapes that generated the manifold.",
            "line": " v3/planck.js:4143"
        },
        {
            "message": "Missing item type\nA manifold point is a contact point belonging to a contact manifold. It holds\ndetails related to the geometry and dynamics of the contact points.\n\nThis structure is stored across time steps, so we keep it small.\n\nNote: impulses are used for internal caching and may not provide reliable\ncontact forces, especially for high speed collisions.",
            "line": " v3/planck.js:4217"
        },
        {
            "message": "Missing item type\nUsage depends on manifold type.\n      e_circles: the local center of circleB,\n      e_faceA: the local center of cirlceB or the clip point of polygonB,\n      e_faceB: the clip point of polygonA.",
            "line": " v3/planck.js:4228"
        },
        {
            "message": "Missing item type\nThe non-penetration impulse",
            "line": " v3/planck.js:4235"
        },
        {
            "message": "Missing item type\nThe friction impulse",
            "line": " v3/planck.js:4239"
        },
        {
            "message": "Missing item type\nUniquely identifies a contact point between two shapes to facilatate warm starting",
            "line": " v3/planck.js:4243"
        },
        {
            "message": "Missing item type\nContact ids to facilitate warm starting.",
            "line": " v3/planck.js:4250"
        },
        {
            "message": "Missing item type\nUsed to quickly compare contact ids.",
            "line": " v3/planck.js:4258"
        },
        {
            "message": "Missing item type\nThe features that intersect to form the contact point.",
            "line": " v3/planck.js:4273"
        },
        {
            "message": "Missing item type\nThis is used to compute the current state of a contact manifold.",
            "line": " v3/planck.js:4287"
        },
        {
            "message": "Missing item type\nWorld contact point (point of intersection)",
            "line": " v3/planck.js:4292"
        },
        {
            "message": "Missing item type\nA negative value indicates overlap, in meters",
            "line": " v3/planck.js:4296"
        },
        {
            "message": "Missing item type\nCompute the point states given two manifolds. The states pertain to the\ntransition from manifold1 to manifold2. So state1 is either persist or remove\nwhile state2 is either add or persist.",
            "line": " v3/planck.js:4303"
        },
        {
            "message": "Missing item type\nClipping for contact manifolds. Sutherland-Hodgman clipping.",
            "line": " v3/planck.js:4337"
        },
        {
            "message": "Missing item type\nGJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.",
            "line": " v3/planck.js:4413"
        },
        {
            "message": "Missing item type\nInput for Distance. You have to option to use the shape radii in the\ncomputation. Even",
            "line": " v3/planck.js:4419"
        },
        {
            "message": "Missing item type\nCompute the closest points between two shapes. Supports any combination of:\nCircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\nthe first call set SimplexCache.count to zero.",
            "line": " v3/planck.js:4465"
        },
        {
            "message": "Missing item type\nA distance proxy is used by the GJK algorithm. It encapsulates any shape.",
            "line": " v3/planck.js:4571"
        },
        {
            "message": "Missing item type\nGet the vertex count.",
            "line": " v3/planck.js:4581"
        },
        {
            "message": "Missing item type\nGet a vertex by index. Used by Distance.",
            "line": " v3/planck.js:4587"
        },
        {
            "message": "Missing item type\nGet the supporting vertex index in the given direction.",
            "line": " v3/planck.js:4593"
        },
        {
            "message": "Missing item type\nGet the supporting vertex in the given direction.",
            "line": " v3/planck.js:4608"
        },
        {
            "message": "Missing item type\nInitialize the proxy using the given shape. The shape must remain in scope\nwhile the proxy is in use.",
            "line": " v3/planck.js:4614"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:4625"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:4627"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:4629"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:4650"
        },
        {
            "message": "Missing item type\nDetermine if two generic shapes overlap.",
            "line": " v3/planck.js:4946"
        },
        {
            "message": "Missing item type\nFriction mixing law. The idea is to allow either fixture to drive the\nrestitution to zero. For example, anything slides on ice.",
            "line": " v3/planck.js:5002"
        },
        {
            "message": "Missing item type\nRestitution mixing law. The idea is allow for anything to bounce off an\ninelastic surface. For example, a superball bounces on anything.",
            "line": " v3/planck.js:5009"
        },
        {
            "message": "Missing item type\nThe class manages contact between two shapes. A contact exists for each\noverlapping AABB in the broad-phase (except if filtered). Therefore a contact\nobject may exist that has no contact points.",
            "line": " v3/planck.js:5031"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5038"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5040"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5042"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5044"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5046"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5048"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5050"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5052"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5054"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5056"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5058"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5060"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5062"
        },
        {
            "message": "Missing item type\n/** @internal */ this.v_normal = Vec2.zero();\n/** @internal */ this.v_normalMass = new Mat22();\n/** @internal */ this.v_K = new Mat22();\n// PositionConstraint\n/** @internal */ this.p_localPoints = []; // [maxManifoldPoints];\n/** @internal */ this.p_localNormal = Vec2.zero();\n/** @internal */ this.p_localPoint = Vec2.zero();\n/** @internal */ this.p_localCenterA = Vec2.zero();\n/** @internal */ this.p_localCenterB = Vec2.zero();\n// Nodes for connecting bodies.\nthis.m_nodeA = new ContactEdge(this);\nthis.m_nodeB = new ContactEdge(this);\nthis.m_fixtureA = fA;\nthis.m_fixtureB = fB;\nthis.m_indexA = indexA;\nthis.m_indexB = indexB;\nthis.m_evaluateFcn = evaluateFcn;\nthis.m_friction = mixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\nthis.m_restitution = mixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);\n        }\n        Contact.prototype.initConstraint = function (step) {\nvar fixtureA = this.m_fixtureA;\nvar fixtureB = this.m_fixtureB;\nvar shapeA = fixtureA.getShape();\nvar shapeB = fixtureB.getShape();\nvar bodyA = fixtureA.getBody();\nvar bodyB = fixtureB.getBody();\nvar manifold = this.getManifold();\nvar pointCount = manifold.pointCount;\nthis.v_invMassA = bodyA.m_invMass;\nthis.v_invMassB = bodyB.m_invMass;\nthis.v_invIA = bodyA.m_invI;\nthis.v_invIB = bodyB.m_invI;\nthis.v_friction = this.m_friction;\nthis.v_restitution = this.m_restitution;\nthis.v_tangentSpeed = this.m_tangentSpeed;\nthis.v_pointCount = pointCount;\nthis.v_K.setZero();\nthis.v_normalMass.setZero();\nthis.p_invMassA = bodyA.m_invMass;\nthis.p_invMassB = bodyB.m_invMass;\nthis.p_invIA = bodyA.m_invI;\nthis.p_invIB = bodyB.m_invI;\nthis.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\nthis.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\nthis.p_radiusA = shapeA.m_radius;\nthis.p_radiusB = shapeB.m_radius;\nthis.p_type = manifold.type;\nthis.p_localNormal = Vec2.clone(manifold.localNormal);\nthis.p_localPoint = Vec2.clone(manifold.localPoint);\nthis.p_pointCount = pointCount;\nfor (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j];\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n    if (step.warmStarting) {\n        vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n        vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n    }\n    else {\n        vcp.normalImpulse = 0.0;\n        vcp.tangentImpulse = 0.0;\n    }\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n}\n        };\n        /**\n         * Get the contact manifold. Do not modify the manifold unless you understand\n         * the internals of the library.",
            "line": " v3/planck.js:5065"
        },
        {
            "message": "Missing item type\nGet the world manifold.",
            "line": " v3/planck.js:5143"
        },
        {
            "message": "Missing item type\nEnable/disable this contact. This can be used inside the pre-solve contact\nlistener. The contact is only disabled for the current time step (or sub-step\nin continuous collisions).",
            "line": " v3/planck.js:5153"
        },
        {
            "message": "Missing item type\nHas this contact been disabled?",
            "line": " v3/planck.js:5161"
        },
        {
            "message": "Missing item type\nIs this contact touching?",
            "line": " v3/planck.js:5167"
        },
        {
            "message": "Missing item type\nGet the next contact in the world's contact list.",
            "line": " v3/planck.js:5173"
        },
        {
            "message": "Missing item type\nGet fixture A in this contact.",
            "line": " v3/planck.js:5179"
        },
        {
            "message": "Missing item type\nGet fixture B in this contact.",
            "line": " v3/planck.js:5185"
        },
        {
            "message": "Missing item type\nGet the child primitive index for fixture A.",
            "line": " v3/planck.js:5191"
        },
        {
            "message": "Missing item type\nGet the child primitive index for fixture B.",
            "line": " v3/planck.js:5197"
        },
        {
            "message": "Missing item type\nFlag this contact for filtering. Filtering will occur the next time step.",
            "line": " v3/planck.js:5203"
        },
        {
            "message": "Missing item type\nOverride the default friction mixture. You can call this in\nContactListener.preSolve. This value persists until set or reset.",
            "line": " v3/planck.js:5209"
        },
        {
            "message": "Missing item type\nGet the friction.",
            "line": " v3/planck.js:5216"
        },
        {
            "message": "Missing item type\nReset the friction mixture to the default value.",
            "line": " v3/planck.js:5222"
        },
        {
            "message": "Missing item type\nOverride the default restitution mixture. You can call this in\nContactListener.preSolve. The value persists until you set or reset.",
            "line": " v3/planck.js:5228"
        },
        {
            "message": "Missing item type\nGet the restitution.",
            "line": " v3/planck.js:5235"
        },
        {
            "message": "Missing item type\nReset the restitution to the default value.",
            "line": " v3/planck.js:5241"
        },
        {
            "message": "Missing item type\nSet the desired tangent speed for a conveyor belt behavior. In meters per\nsecond.",
            "line": " v3/planck.js:5247"
        },
        {
            "message": "Missing item type\nGet the desired tangent speed. In meters per second.",
            "line": " v3/planck.js:5254"
        },
        {
            "message": "Missing item type\nCalled by Update method, and implemented by subclasses.",
            "line": " v3/planck.js:5260"
        },
        {
            "message": "Missing item type\nUpdates the contact manifold and touching status.\n\nNote: do not assume the fixture AABBs are overlapping or are valid.",
            "line": " v3/planck.js:5266"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5795"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5802"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:5852"
        },
        {
            "message": "Missing item type\nA joint edge is used to connect bodies and joints together in a joint graph\nwhere each body is a node and each joint is an edge. A joint edge belongs to\na doubly linked list maintained in each attached body. Each joint has two\njoint nodes, one for each attached body.",
            "line": " v3/planck.js:5921"
        },
        {
            "message": "Missing item type\nprovides quick access to the other body attached.",
            "line": " v3/planck.js:5929"
        },
        {
            "message": "Missing item type\nthe joint",
            "line": " v3/planck.js:5933"
        },
        {
            "message": "Missing item type\nprev the previous joint edge in the body's joint list",
            "line": " v3/planck.js:5937"
        },
        {
            "message": "Missing item type\nthe next joint edge in the body's joint list",
            "line": " v3/planck.js:5941"
        },
        {
            "message": "Missing item type\nThe base joint class. Joints are used to constraint two bodies together in\nvarious fashions. Some joints also feature limits and motors.",
            "line": " v3/planck.js:5948"
        },
        {
            "message": "Missing item type\n/** @internal */ this.m_prev = null;\n/** @internal */ this.m_next = null;\n/** @internal */ this.m_edgeA = new JointEdge();\n/** @internal */ this.m_edgeB = new JointEdge();\n/** @internal */ this.m_islandFlag = false;\nbodyA = 'bodyA' in def ? def.bodyA : bodyA;\nbodyB = 'bodyB' in def ? def.bodyB : bodyB;\nthis.m_bodyA = bodyA;\nthis.m_bodyB = bodyB;\nthis.m_collideConnected = !!def.collideConnected;\nthis.m_userData = def.userData;\n        }\n        /**\n         * Short-cut function to determine if either body is inactive.",
            "line": " v3/planck.js:5954"
        },
        {
            "message": "Missing item type\nGet the type of the concrete joint.",
            "line": " v3/planck.js:5973"
        },
        {
            "message": "Missing item type\nGet the first body attached to this joint.",
            "line": " v3/planck.js:5979"
        },
        {
            "message": "Missing item type\nGet the second body attached to this joint.",
            "line": " v3/planck.js:5985"
        },
        {
            "message": "Missing item type\nGet the next joint the world joint list.",
            "line": " v3/planck.js:5991"
        },
        {
            "message": "Missing item type\nGet collide connected. Note: modifying the collide connect flag won't work\ncorrectly because the flag is only checked when fixture AABBs begin to\noverlap.",
            "line": " v3/planck.js:6003"
        },
        {
            "message": "Missing item type\nShift the origin for any points stored in world coordinates.",
            "line": " v3/planck.js:6011"
        },
        {
            "message": "Missing item type\nInput parameters for TimeOfImpact.",
            "line": " v3/planck.js:6052"
        },
        {
            "message": "Missing item type\nOutput parameters for TimeOfImpact.",
            "line": " v3/planck.js:6072"
        },
        {
            "message": "Missing item type\nCompute the upper bound on time before two shapes penetrate. Time is\nrepresented as a fraction between [0,tMax]. This uses a swept separating axis\nand may miss some intermediate, non-tunneling collision. If you change the\ntime interval, you should call this function again.\n\nNote: use Distance to compute the contact point and normal at the time of\nimpact.\n\nCCD via the local separating axis method. This seeks progression by computing\nthe largest time at which separation is maintained.",
            "line": " v3/planck.js:6087"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:6439"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:6441"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:6447"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:6449"
        },
        {
            "message": "Missing item type\nContact impulses for reporting. Impulses are used instead of forces because\nsub-step forces may approach infinity for rigid body collisions. These match\nup one-to-one with the contact points in Manifold.",
            "line": " v3/planck.js:6464"
        },
        {
            "message": "Missing item type\nFinds and solves islands. An island is a connected subset of the world.",
            "line": " v3/planck.js:6503"
        },
        {
            "message": "Missing item type\n<pre>\nApply damping.\nODE: dv/dt + c * v = 0\nSolution: v(t) = v0 * exp(-c * t)\nTime step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\nv2 = exp(-c * dt) * v1\nPade approximation:\nv2 = v1 * 1 / (1 + c * dt)\n</pre>",
            "line": " v3/planck.js:6656"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:6798"
        },
        {
            "message": "Missing item type\nFind TOI contacts and solve them.",
            "line": " v3/planck.js:6805"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7112"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7156"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7161"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7163"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7249"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7268"
        },
        {
            "message": "Missing item type\nGet the world body list. With the returned body, use Body.getNext to get the\nnext body in the world list. A null body indicates the end of the list.",
            "line": " v3/planck.js:7286"
        },
        {
            "message": "Missing item type\nGet the world joint list. With the returned joint, use Joint.getNext to get\nthe next joint in the world list. A null joint indicates the end of the list.",
            "line": " v3/planck.js:7295"
        },
        {
            "message": "Missing item type\nGet the world contact list. With the returned contact, use Contact.getNext to\nget the next contact in the world list. A null contact indicates the end of\nthe list.\n\nWarning: contacts are created and destroyed in the middle of a time step.\nUse ContactListener to avoid missing contacts.",
            "line": " v3/planck.js:7304"
        },
        {
            "message": "Missing item type\nGet the number of contacts (each may have 0 or more contact points).",
            "line": " v3/planck.js:7323"
        },
        {
            "message": "Missing item type\nChange the global gravity vector.",
            "line": " v3/planck.js:7329"
        },
        {
            "message": "Missing item type\nGet the global gravity vector.",
            "line": " v3/planck.js:7335"
        },
        {
            "message": "Missing item type\nIs the world locked (in the middle of a time step).",
            "line": " v3/planck.js:7341"
        },
        {
            "message": "Missing item type\nEnable/disable sleep.",
            "line": " v3/planck.js:7347"
        },
        {
            "message": "Missing item type\nEnable/disable warm starting. For testing.",
            "line": " v3/planck.js:7364"
        },
        {
            "message": "Missing item type\nEnable/disable continuous physics. For testing.",
            "line": " v3/planck.js:7373"
        },
        {
            "message": "Missing item type\nEnable/disable single stepped continuous physics. For testing.",
            "line": " v3/planck.js:7382"
        },
        {
            "message": "Missing item type\nSet flag to control automatic clearing of forces after each time step.",
            "line": " v3/planck.js:7391"
        },
        {
            "message": "Missing item type\nGet the flag that controls automatic clearing of forces after each time step.",
            "line": " v3/planck.js:7397"
        },
        {
            "message": "Missing item type\nManually clear the force buffer on all bodies. By default, forces are cleared\nautomatically after each call to step. The default behavior is modified by\ncalling setAutoClearForces. The purpose of this function is to support\nsub-stepping. Sub-stepping is often used to maintain a fixed sized time step\nunder a variable frame-rate. When you perform sub-stepping you will disable\nauto clearing of forces and instead call clearForces after all sub-steps are\ncomplete in one pass of your game loop.\n\nSee {@link World.setAutoClearForces}",
            "line": " v3/planck.js:7403"
        },
        {
            "message": "Missing item type\nQuery the world for all fixtures that potentially overlap the provided AABB.",
            "line": " v3/planck.js:7420"
        },
        {
            "message": "Missing item type\nRay-cast the world for all fixtures in the path of the ray. Your callback\ncontrols whether you get the closest point, any point, or n-points. The\nray-cast ignores shapes that contain the starting point.",
            "line": " v3/planck.js:7433"
        },
        {
            "message": "Missing item type\nGet the number of broad-phase proxies.",
            "line": " v3/planck.js:7463"
        },
        {
            "message": "Missing item type\nGet the height of broad-phase dynamic tree.",
            "line": " v3/planck.js:7469"
        },
        {
            "message": "Missing item type\nGet the balance of broad-phase dynamic tree.",
            "line": " v3/planck.js:7475"
        },
        {
            "message": "Missing item type\nGet the quality metric of broad-phase dynamic tree. The smaller the better.\nThe minimum is 1.",
            "line": " v3/planck.js:7481"
        },
        {
            "message": "Missing item type\nShift the world origin. Useful for large worlds. The body shift formula is:\nposition -= newOrigin",
            "line": " v3/planck.js:7488"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7508"
        },
        {
            "message": "Missing item type\nDestroy a rigid body given a definition. No reference to the definition is\nretained.\n\nWarning: This automatically deletes all associated shapes and joints.\n\nWarning: This function is locked during callbacks.",
            "line": " v3/planck.js:7567"
        },
        {
            "message": "Missing item type\nCreate a joint to constrain bodies together. No reference to the definition\nis retained. This may cause the connected bodies to cease colliding.\n\nWarning: This function is locked during callbacks.",
            "line": " v3/planck.js:7626"
        },
        {
            "message": "Missing item type\nDestroy a joint. This may cause the connected bodies to begin colliding.\nWarning: This function is locked during callbacks.",
            "line": " v3/planck.js:7672"
        },
        {
            "message": "Missing item type\nTake a time step. This performs collision detection, integration, and\nconstraint solution.\n\nBroad-phase, narrow-phase, solve and solve time of impacts.",
            "line": " v3/planck.js:7735"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7792"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7799"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7846"
        },
        {
            "message": "Missing item type\nRegister an event listener.",
            "line": " v3/planck.js:7863"
        },
        {
            "message": "Missing item type\nRemove an event listener.",
            "line": " v3/planck.js:7880"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7908"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7914"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7920"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7926"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7980"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7988"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:7996"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8014"
        },
        {
            "message": "Missing item type\nDoes this vector contain finite coordinates?",
            "line": " v3/planck.js:8018"
        },
        {
            "message": "Missing item type\nPerform the dot product on two vectors.",
            "line": " v3/planck.js:8066"
        },
        {
            "message": "Missing item type\nPerform the cross product on two vectors. In 2D this produces a scalar.",
            "line": " v3/planck.js:8072"
        },
        {
            "message": "Missing item type\nA line segment (edge) shape. These can be connected in chains or loops to\nother edge shapes. The connectivity information is used to ensure correct\ncontact normals.",
            "line": " v3/planck.js:8122"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8146"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8158"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8169"
        },
        {
            "message": "Missing item type\nOptional next vertex, used for smooth collision.",
            "line": " v3/planck.js:8173"
        },
        {
            "message": "Missing item type\nOptional next vertex, used for smooth collision.",
            "line": " v3/planck.js:8187"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8193"
        },
        {
            "message": "Missing item type\nOptional prev vertex, used for smooth collision.",
            "line": " v3/planck.js:8197"
        },
        {
            "message": "Missing item type\nOptional prev vertex, used for smooth collision.",
            "line": " v3/planck.js:8211"
        },
        {
            "message": "Missing item type\nSet this as an isolated edge.",
            "line": " v3/planck.js:8217"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8227"
        },
        {
            "message": "Missing item type\nGet the number of child primitives.",
            "line": " v3/planck.js:8245"
        },
        {
            "message": "Missing item type\nTest a point for containment in this shape. This only works for convex\nshapes.",
            "line": " v3/planck.js:8251"
        },
        {
            "message": "Missing item type\nCast a ray against a child shape.",
            "line": " v3/planck.js:8261"
        },
        {
            "message": "Missing item type\nGiven a transform, compute the associated axis aligned bounding box for a\nchild shape.",
            "line": " v3/planck.js:8317"
        },
        {
            "message": "Missing item type\nCompute the mass properties of this shape using its dimensions and density.\nThe inertia tensor is computed about the local origin.",
            "line": " v3/planck.js:8331"
        },
        {
            "message": "Missing item type\nA chain shape is a free form sequence of line segments. The chain has\ntwo-sided collision, so you can use inside and outside collision. Therefore,\nyou may use any winding order. Connectivity information is used to create\nsmooth collisions.\n\nWARNING: The chain will not collide properly if there are self-intersections.",
            "line": " v3/planck.js:8376"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8412"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8431"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8452"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8476"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8499"
        },
        {
            "message": "Missing item type\nEstablish connectivity to a vertex that precedes the first vertex. Don't call\nthis for loops.",
            "line": " v3/planck.js:8508"
        },
        {
            "message": "Missing item type\nEstablish connectivity to a vertex that follows the last vertex. Don't call\nthis for loops.",
            "line": " v3/planck.js:8519"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8530"
        },
        {
            "message": "Missing item type\nGet the number of child primitives.",
            "line": " v3/planck.js:8547"
        },
        {
            "message": "Missing item type\nTest a point for containment in this shape. This only works for convex\nshapes.\n\nThis always return false.",
            "line": " v3/planck.js:8588"
        },
        {
            "message": "Missing item type\nCast a ray against a child shape.",
            "line": " v3/planck.js:8600"
        },
        {
            "message": "Missing item type\nGiven a transform, compute the associated axis aligned bounding box for a\nchild shape.",
            "line": " v3/planck.js:8612"
        },
        {
            "message": "Missing item type\nCompute the mass properties of this shape using its dimensions and density.\nThe inertia tensor is computed about the local origin.\n\nChains have zero mass.",
            "line": " v3/planck.js:8625"
        },
        {
            "message": "Missing item type\nA convex polygon. It is assumed that the interior of the polygon is to the\nleft of each edge. Polygons have a maximum number of vertices equal to\nSettings.maxPolygonVertices. In most cases you should not need many vertices\nfor a convex polygon. extends Shape",
            "line": " v3/planck.js:8673"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8700"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8707"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8721"
        },
        {
            "message": "Missing item type\nGet the number of child primitives.",
            "line": " v3/planck.js:8741"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8747"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8751"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:8849"
        },
        {
            "message": "Missing item type\nTest a point for containment in this shape. This only works for convex\nshapes.",
            "line": " v3/planck.js:8874"
        },
        {
            "message": "Missing item type\nCast a ray against a child shape.",
            "line": " v3/planck.js:8891"
        },
        {
            "message": "Missing item type\nGiven a transform, compute the associated axis aligned bounding box for a\nchild shape.",
            "line": " v3/planck.js:8950"
        },
        {
            "message": "Missing item type\nCompute the mass properties of this shape using its dimensions and density.\nThe inertia tensor is computed about the local origin.",
            "line": " v3/planck.js:8974"
        },
        {
            "message": "Missing item type\nValidate convexity. This is a very time consuming operation.",
            "line": " v3/planck.js:9020"
        },
        {
            "message": "Missing item type\nA rectangle polygon which extend PolygonShape.",
            "line": " v3/planck.js:9101"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:9167"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:9175"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:9189"
        },
        {
            "message": "Missing item type\nGet the number of child primitives.",
            "line": " v3/planck.js:9202"
        },
        {
            "message": "Missing item type\nTest a point for containment in this shape. This only works for convex\nshapes.",
            "line": " v3/planck.js:9208"
        },
        {
            "message": "Missing item type\nCast a ray against a child shape.",
            "line": " v3/planck.js:9220"
        },
        {
            "message": "Missing item type\nGiven a transform, compute the associated axis aligned bounding box for a\nchild shape.",
            "line": " v3/planck.js:9257"
        },
        {
            "message": "Missing item type\nCompute the mass properties of this shape using its dimensions and density.\nThe inertia tensor is computed about the local origin.",
            "line": " v3/planck.js:9270"
        },
        {
            "message": "Missing item type\nA distance joint constrains two points on two bodies to remain at a fixed\ndistance from each other. You can view this as a massless, rigid rod.",
            "line": " v3/planck.js:9320"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:9370"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:9387"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:9395"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyA's origin.",
            "line": " v3/planck.js:9417"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyB's origin.",
            "line": " v3/planck.js:9423"
        },
        {
            "message": "Missing item type\nSet the natural length. Manipulating the length can lead to non-physical\nbehavior when the frequency is zero.",
            "line": " v3/planck.js:9429"
        },
        {
            "message": "Missing item type\nGet the natural length.",
            "line": " v3/planck.js:9436"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyA in world coordinates.",
            "line": " v3/planck.js:9454"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyB in world coordinates.",
            "line": " v3/planck.js:9460"
        },
        {
            "message": "Missing item type\nGet the reaction force on bodyB at the joint anchor in Newtons.",
            "line": " v3/planck.js:9466"
        },
        {
            "message": "Missing item type\nGet the reaction torque on bodyB in N*m.",
            "line": " v3/planck.js:9472"
        },
        {
            "message": "Missing item type\nThis returns true if the position errors are within tolerance.",
            "line": " v3/planck.js:9571"
        },
        {
            "message": "Missing item type\nFriction joint. This is used for top-down friction. It provides 2D\ntranslational friction and angular friction.",
            "line": " v3/planck.js:9635"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:9673"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:9686"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:9694"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyA's origin.",
            "line": " v3/planck.js:9709"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyB's origin.",
            "line": " v3/planck.js:9715"
        },
        {
            "message": "Missing item type\nSet the maximum friction force in N.",
            "line": " v3/planck.js:9721"
        },
        {
            "message": "Missing item type\nGet the maximum friction force in N.",
            "line": " v3/planck.js:9727"
        },
        {
            "message": "Missing item type\nSet the maximum friction torque in N*m.",
            "line": " v3/planck.js:9733"
        },
        {
            "message": "Missing item type\nGet the maximum friction torque in N*m.",
            "line": " v3/planck.js:9739"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyA in world coordinates.",
            "line": " v3/planck.js:9745"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyB in world coordinates.",
            "line": " v3/planck.js:9751"
        },
        {
            "message": "Missing item type\nGet the reaction force on bodyB at the joint anchor in Newtons.",
            "line": " v3/planck.js:9757"
        },
        {
            "message": "Missing item type\nGet the reaction torque on bodyB in N*m.",
            "line": " v3/planck.js:9763"
        },
        {
            "message": "Missing item type\nThis returns true if the position errors are within tolerance.",
            "line": " v3/planck.js:9872"
        },
        {
            "message": "Missing item type\nA 3-by-3 matrix. Stored in column-major order.",
            "line": " v3/planck.js:9905"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:9921"
        },
        {
            "message": "Missing item type\nSet this matrix to all zeros.",
            "line": " v3/planck.js:9934"
        },
        {
            "message": "Missing item type\nSolve A * x = b, where b is a column vector. This is more efficient than\ncomputing the inverse in one-shot cases.",
            "line": " v3/planck.js:9943"
        },
        {
            "message": "Missing item type\nSolve A * x = b, where b is a column vector. This is more efficient than\ncomputing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\nequation.",
            "line": " v3/planck.js:9958"
        },
        {
            "message": "Missing item type\nGet the inverse of this matrix as a 2-by-2. Returns the zero matrix if\nsingular.",
            "line": " v3/planck.js:9977"
        },
        {
            "message": "Missing item type\nGet the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\nif singular.",
            "line": " v3/planck.js:10000"
        },
        {
            "message": "Missing item type\nA revolute joint constrains two bodies to share a common point while they are\nfree to rotate about the point. The relative rotation about the shared point\nis the joint angle. You can limit the relative rotation with a joint limit\nthat specifies a lower and upper angle. You can use a motor to drive the\nrelative rotation about the shared point. A maximum motor torque is provided\nso that infinite forces are not generated.",
            "line": " v3/planck.js:10091"
        },
        {
            "message": "Missing item type\n/** @internal */ _this.m_limitState = inactiveLimit$2; // TODO enum\nbodyA = _this.m_bodyA;\nbodyB = _this.m_bodyB;\n_this.m_type = RevoluteJoint.TYPE;\n_this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n_this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n_this.m_referenceAngle = math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n_this.m_impulse = new Vec3();\n_this.m_motorImpulse = 0.0;\n_this.m_lowerAngle = def.lowerAngle;\n_this.m_upperAngle = def.upperAngle;\n_this.m_maxMotorTorque = def.maxMotorTorque;\n_this.m_motorSpeed = def.motorSpeed;\n_this.m_enableLimit = def.enableLimit;\n_this.m_enableMotor = def.enableMotor;\nreturn _this;\n// Point-to-point constraint\n// C = p2 - p1\n// Cdot = v2 - v1\n// = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n// J = [-I -r1_skew I r2_skew ]\n// Identity used:\n// w k % (rx i + ry j) = w * (-ry i + rx j)\n// Motor constraint\n// Cdot = w2 - w1\n// J = [0 0 -1 0 0 1]\n// K = invI1 + invI2\n        }",
            "line": " v3/planck.js:10111"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:10158"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:10166"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyA's origin.",
            "line": " v3/planck.js:10181"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyB's origin.",
            "line": " v3/planck.js:10187"
        },
        {
            "message": "Missing item type\nGet the reference angle.",
            "line": " v3/planck.js:10193"
        },
        {
            "message": "Missing item type\nGet the current joint angle in radians.",
            "line": " v3/planck.js:10199"
        },
        {
            "message": "Missing item type\nGet the current joint angle speed in radians per second.",
            "line": " v3/planck.js:10207"
        },
        {
            "message": "Missing item type\nIs the joint motor enabled?",
            "line": " v3/planck.js:10215"
        },
        {
            "message": "Missing item type\nEnable/disable the joint motor.",
            "line": " v3/planck.js:10221"
        },
        {
            "message": "Missing item type\nGet the current motor torque given the inverse time step. Unit is N*m.",
            "line": " v3/planck.js:10229"
        },
        {
            "message": "Missing item type\nSet the motor speed in radians per second.",
            "line": " v3/planck.js:10235"
        },
        {
            "message": "Missing item type\nGet the motor speed in radians per second.",
            "line": " v3/planck.js:10243"
        },
        {
            "message": "Missing item type\nSet the maximum motor torque, usually in N-m.",
            "line": " v3/planck.js:10249"
        },
        {
            "message": "Missing item type\nIs the joint limit enabled?",
            "line": " v3/planck.js:10260"
        },
        {
            "message": "Missing item type\nEnable/disable the joint limit.",
            "line": " v3/planck.js:10266"
        },
        {
            "message": "Missing item type\nGet the lower joint limit in radians.",
            "line": " v3/planck.js:10277"
        },
        {
            "message": "Missing item type\nGet the upper joint limit in radians.",
            "line": " v3/planck.js:10283"
        },
        {
            "message": "Missing item type\nSet the joint limits in radians.",
            "line": " v3/planck.js:10289"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyA in world coordinates.",
            "line": " v3/planck.js:10301"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyB in world coordinates.",
            "line": " v3/planck.js:10307"
        },
        {
            "message": "Missing item type\nGet the reaction force given the inverse time step. Unit is N.",
            "line": " v3/planck.js:10313"
        },
        {
            "message": "Missing item type\nGet the reaction torque due to the joint limit given the inverse time step.\nUnit is N*m.",
            "line": " v3/planck.js:10319"
        },
        {
            "message": "Missing item type\nThis returns true if the position errors are within tolerance.",
            "line": " v3/planck.js:10508"
        },
        {
            "message": "Missing item type\nA prismatic joint. This joint provides one degree of freedom: translation\nalong an axis fixed in bodyA. Relative rotation is prevented. You can use a\njoint limit to restrict the range of motion and a joint motor to drive the\nmotion or to model joint friction.",
            "line": " v3/planck.js:10620"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:10729"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:10748"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:10757"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyA's origin.",
            "line": " v3/planck.js:10776"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyB's origin.",
            "line": " v3/planck.js:10782"
        },
        {
            "message": "Missing item type\nThe local joint axis relative to bodyA.",
            "line": " v3/planck.js:10788"
        },
        {
            "message": "Missing item type\nGet the reference angle.",
            "line": " v3/planck.js:10794"
        },
        {
            "message": "Missing item type\nGet the current joint translation, usually in meters.",
            "line": " v3/planck.js:10800"
        },
        {
            "message": "Missing item type\nGet the current joint translation speed, usually in meters per second.",
            "line": " v3/planck.js:10811"
        },
        {
            "message": "Missing item type\nIs the joint limit enabled?",
            "line": " v3/planck.js:10831"
        },
        {
            "message": "Missing item type\nEnable/disable the joint limit.",
            "line": " v3/planck.js:10837"
        },
        {
            "message": "Missing item type\nGet the lower joint limit, usually in meters.",
            "line": " v3/planck.js:10848"
        },
        {
            "message": "Missing item type\nGet the upper joint limit, usually in meters.",
            "line": " v3/planck.js:10854"
        },
        {
            "message": "Missing item type\nSet the joint limits, usually in meters.",
            "line": " v3/planck.js:10860"
        },
        {
            "message": "Missing item type\nIs the joint motor enabled?",
            "line": " v3/planck.js:10872"
        },
        {
            "message": "Missing item type\nEnable/disable the joint motor.",
            "line": " v3/planck.js:10878"
        },
        {
            "message": "Missing item type\nSet the motor speed, usually in meters per second.",
            "line": " v3/planck.js:10886"
        },
        {
            "message": "Missing item type\nSet the maximum motor force, usually in N.",
            "line": " v3/planck.js:10894"
        },
        {
            "message": "Missing item type\nGet the motor speed, usually in meters per second.",
            "line": " v3/planck.js:10905"
        },
        {
            "message": "Missing item type\nGet the current motor force given the inverse time step, usually in N.",
            "line": " v3/planck.js:10911"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyA in world coordinates.",
            "line": " v3/planck.js:10917"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyB in world coordinates.",
            "line": " v3/planck.js:10923"
        },
        {
            "message": "Missing item type\nGet the reaction force on bodyB at the joint anchor in Newtons.",
            "line": " v3/planck.js:10929"
        },
        {
            "message": "Missing item type\nGet the reaction torque on bodyB in N*m.",
            "line": " v3/planck.js:10935"
        },
        {
            "message": "Missing item type\nThis returns true if the position errors are within tolerance.",
            "line": " v3/planck.js:11131"
        },
        {
            "message": "Missing item type\nA gear joint is used to connect two joints together. Either joint can be a\nrevolute or prismatic joint. You specify a gear ratio to bind the motions\ntogether: coordinate1 + ratio * coordinate2 = constant\n\nThe ratio can be negative or positive. If one joint is a revolute joint and\nthe other joint is a prismatic joint, then the ratio will have units of\nlength or units of 1/length. Warning: You have to manually destroy the gear\njoint if joint1 or joint2 is destroyed.\n\nThis definition requires two existing revolute or prismatic joints (any\ncombination will work).",
            "line": " v3/planck.js:11268"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:11376"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:11389"
        },
        {
            "message": "Missing item type\nGet the first joint.",
            "line": " v3/planck.js:11400"
        },
        {
            "message": "Missing item type\nGet the second joint.",
            "line": " v3/planck.js:11406"
        },
        {
            "message": "Missing item type\nSet the gear ratio.",
            "line": " v3/planck.js:11412"
        },
        {
            "message": "Missing item type\nGet the gear ratio.",
            "line": " v3/planck.js:11418"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyA in world coordinates.",
            "line": " v3/planck.js:11424"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyB in world coordinates.",
            "line": " v3/planck.js:11430"
        },
        {
            "message": "Missing item type\nGet the reaction force on bodyB at the joint anchor in Newtons.",
            "line": " v3/planck.js:11436"
        },
        {
            "message": "Missing item type\nGet the reaction torque on bodyB in N*m.",
            "line": " v3/planck.js:11442"
        },
        {
            "message": "Missing item type\nThis returns true if the position errors are within tolerance.",
            "line": " v3/planck.js:11565"
        },
        {
            "message": "Missing item type\nA motor joint is used to control the relative motion between two bodies. A\ntypical usage is to control the movement of a dynamic body with respect to\nthe ground.",
            "line": " v3/planck.js:11687"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:11724"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:11738"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:11746"
        },
        {
            "message": "Missing item type\nSet the maximum friction force in N.",
            "line": " v3/planck.js:11749"
        },
        {
            "message": "Missing item type\nGet the maximum friction force in N.",
            "line": " v3/planck.js:11755"
        },
        {
            "message": "Missing item type\nSet the maximum friction torque in N*m.",
            "line": " v3/planck.js:11761"
        },
        {
            "message": "Missing item type\nGet the maximum friction torque in N*m.",
            "line": " v3/planck.js:11767"
        },
        {
            "message": "Missing item type\nSet the position correction factor in the range [0,1].",
            "line": " v3/planck.js:11773"
        },
        {
            "message": "Missing item type\nGet the position correction factor in the range [0,1].",
            "line": " v3/planck.js:11779"
        },
        {
            "message": "Missing item type\nSet/get the target linear offset, in frame A, in meters.",
            "line": " v3/planck.js:11785"
        },
        {
            "message": "Missing item type\nSet/get the target angular offset, in radians.",
            "line": " v3/planck.js:11799"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyA in world coordinates.",
            "line": " v3/planck.js:11812"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyB in world coordinates.",
            "line": " v3/planck.js:11818"
        },
        {
            "message": "Missing item type\nGet the reaction force on bodyB at the joint anchor in Newtons.",
            "line": " v3/planck.js:11824"
        },
        {
            "message": "Missing item type\nGet the reaction torque on bodyB in N*m.",
            "line": " v3/planck.js:11830"
        },
        {
            "message": "Missing item type\nThis returns true if the position errors are within tolerance.",
            "line": " v3/planck.js:11945"
        },
        {
            "message": "Missing item type\nA mouse joint is used to make a point on a body track a specified world\npoint. This a soft constraint with a maximum force. This allows the\nconstraint to stretch and without applying huge forces.\n\nNOTE: this joint is not documented in the manual because it was developed to\nbe used in the testbed. If you want to learn how to use the mouse joint, look\nat the testbed.",
            "line": " v3/planck.js:11983"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:12029"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:12043"
        },
        {
            "message": "Missing item type\nUse this to update the target point.",
            "line": " v3/planck.js:12055"
        },
        {
            "message": "Missing item type\nSet the maximum force in Newtons.",
            "line": " v3/planck.js:12067"
        },
        {
            "message": "Missing item type\nGet the maximum force in Newtons.",
            "line": " v3/planck.js:12073"
        },
        {
            "message": "Missing item type\nSet the frequency in Hertz.",
            "line": " v3/planck.js:12079"
        },
        {
            "message": "Missing item type\nGet the frequency in Hertz.",
            "line": " v3/planck.js:12085"
        },
        {
            "message": "Missing item type\nSet the damping ratio (dimensionless).",
            "line": " v3/planck.js:12091"
        },
        {
            "message": "Missing item type\nGet the damping ratio (dimensionless).",
            "line": " v3/planck.js:12097"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyA in world coordinates.",
            "line": " v3/planck.js:12103"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyB in world coordinates.",
            "line": " v3/planck.js:12109"
        },
        {
            "message": "Missing item type\nGet the reaction force on bodyB at the joint anchor in Newtons.",
            "line": " v3/planck.js:12115"
        },
        {
            "message": "Missing item type\nGet the reaction torque on bodyB in N*m.",
            "line": " v3/planck.js:12121"
        },
        {
            "message": "Missing item type\nShift the origin for any points stored in world coordinates.",
            "line": " v3/planck.js:12127"
        },
        {
            "message": "Missing item type\nThis returns true if the position errors are within tolerance.",
            "line": " v3/planck.js:12211"
        },
        {
            "message": "Missing item type\nThe pulley joint is connected to two bodies and two fixed ground points. The\npulley supports a ratio such that: length1 + ratio * length2 <= constant\n\nYes, the force transmitted is scaled by the ratio.\n\nWarning: the pulley joint can get a bit squirrelly by itself. They often work\nbetter when combined with prismatic joints. You should also cover the the\nanchor points with static shapes to prevent one side from going to zero\nlength.",
            "line": " v3/planck.js:12247"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:12309"
        },
        {
            "message": "Missing item type\nGet the first ground anchor.",
            "line": " v3/planck.js:12317"
        },
        {
            "message": "Missing item type\nGet the second ground anchor.",
            "line": " v3/planck.js:12323"
        },
        {
            "message": "Missing item type\nGet the current length of the segment attached to bodyA.",
            "line": " v3/planck.js:12329"
        },
        {
            "message": "Missing item type\nGet the current length of the segment attached to bodyB.",
            "line": " v3/planck.js:12335"
        },
        {
            "message": "Missing item type\nGet the pulley ratio.",
            "line": " v3/planck.js:12341"
        },
        {
            "message": "Missing item type\nGet the current length of the segment attached to bodyA.",
            "line": " v3/planck.js:12347"
        },
        {
            "message": "Missing item type\nGet the current length of the segment attached to bodyB.",
            "line": " v3/planck.js:12355"
        },
        {
            "message": "Missing item type\nShift the origin for any points stored in world coordinates.",
            "line": " v3/planck.js:12363"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyA in world coordinates.",
            "line": " v3/planck.js:12372"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyB in world coordinates.",
            "line": " v3/planck.js:12378"
        },
        {
            "message": "Missing item type\nGet the reaction force on bodyB at the joint anchor in Newtons.",
            "line": " v3/planck.js:12384"
        },
        {
            "message": "Missing item type\nGet the reaction torque on bodyB in N*m.",
            "line": " v3/planck.js:12390"
        },
        {
            "message": "Missing item type\nThis returns true if the position errors are within tolerance.",
            "line": " v3/planck.js:12482"
        },
        {
            "message": "Missing item type\nA rope joint enforces a maximum distance between two points on two bodies. It\nhas no other effect.\n\nWarning: if you attempt to change the maximum length during the simulation\nyou will get some non-physical behavior.\n\nA model that would allow you to dynamically modify the length would have some\nsponginess, so I chose not to implement it that way. See {@link DistanceJoint} if you\nwant to dynamically control length.",
            "line": " v3/planck.js:12567"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:12607"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:12619"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyA's origin.",
            "line": " v3/planck.js:12627"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyB's origin.",
            "line": " v3/planck.js:12633"
        },
        {
            "message": "Missing item type\nSet the maximum length of the rope.",
            "line": " v3/planck.js:12639"
        },
        {
            "message": "Missing item type\nGet the maximum length of the rope.",
            "line": " v3/planck.js:12645"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyA in world coordinates.",
            "line": " v3/planck.js:12655"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyB in world coordinates.",
            "line": " v3/planck.js:12661"
        },
        {
            "message": "Missing item type\nGet the reaction force on bodyB at the joint anchor in Newtons.",
            "line": " v3/planck.js:12667"
        },
        {
            "message": "Missing item type\nGet the reaction torque on bodyB in N*m.",
            "line": " v3/planck.js:12673"
        },
        {
            "message": "Missing item type\nThis returns true if the position errors are within tolerance.",
            "line": " v3/planck.js:12769"
        },
        {
            "message": "Missing item type\nA weld joint essentially glues two bodies together. A weld joint may distort\nsomewhat because the island constraint solver is approximate.",
            "line": " v3/planck.js:12830"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:12879"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:12893"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:12901"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyA's origin.",
            "line": " v3/planck.js:12916"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyB's origin.",
            "line": " v3/planck.js:12922"
        },
        {
            "message": "Missing item type\nGet the reference angle.",
            "line": " v3/planck.js:12928"
        },
        {
            "message": "Missing item type\nSet frequency in Hz.",
            "line": " v3/planck.js:12934"
        },
        {
            "message": "Missing item type\nGet frequency in Hz.",
            "line": " v3/planck.js:12940"
        },
        {
            "message": "Missing item type\nSet damping ratio.",
            "line": " v3/planck.js:12946"
        },
        {
            "message": "Missing item type\nGet damping ratio.",
            "line": " v3/planck.js:12952"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyA in world coordinates.",
            "line": " v3/planck.js:12958"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyB in world coordinates.",
            "line": " v3/planck.js:12964"
        },
        {
            "message": "Missing item type\nGet the reaction force on bodyB at the joint anchor in Newtons.",
            "line": " v3/planck.js:12970"
        },
        {
            "message": "Missing item type\nGet the reaction torque on bodyB in N*m.",
            "line": " v3/planck.js:12976"
        },
        {
            "message": "Missing item type\nThis returns true if the position errors are within tolerance.",
            "line": " v3/planck.js:13115"
        },
        {
            "message": "Missing item type\nA wheel joint. This joint provides two degrees of freedom: translation along\nan axis fixed in bodyA and rotation in the plane. In other words, it is a\npoint to line constraint with a rotational motor and a linear spring/damper.\nThis joint is designed for vehicle suspensions.",
            "line": " v3/planck.js:13217"
        },
        {
            "message": "Missing item type\n/** @internal */ _this.m_ay = Vec2.zero();\nbodyA = _this.m_bodyA;\nbodyB = _this.m_bodyB;\n_this.m_type = WheelJoint.TYPE;\n_this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n_this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n// @ts-ignore localAxis\n_this.m_localXAxisA = Vec2.clone(axis ? bodyA.getLocalVector(axis) : def.localAxisA || def.localAxis || Vec2.neo(1.0, 0.0));\n_this.m_localYAxisA = Vec2.crossNumVec2(1.0, _this.m_localXAxisA);\n_this.m_mass = 0.0;\n_this.m_impulse = 0.0;\n_this.m_motorMass = 0.0;\n_this.m_motorImpulse = 0.0;\n_this.m_springMass = 0.0;\n_this.m_springImpulse = 0.0;\n_this.m_maxMotorTorque = def.maxMotorTorque;\n_this.m_motorSpeed = def.motorSpeed;\n_this.m_enableMotor = def.enableMotor;\n_this.m_frequencyHz = def.frequencyHz;\n_this.m_dampingRatio = def.dampingRatio;\n_this.m_bias = 0.0;\n_this.m_gamma = 0.0;\nreturn _this;\n// Linear constraint (point-to-line)\n// d = pB - pA = xB + rB - xA - rA\n// C = dot(ay, d)\n// Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n// rA))\n// = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n// ay), vB)\n// J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n// Spring linear constraint\n// C = dot(ax, d)\n// Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n// dot(cross(rB, ax), vB)\n// J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n// Motor rotational constraint\n// Cdot = wB - wA\n// J = [0 0 -1 0 0 1]\n        }",
            "line": " v3/planck.js:13234"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:13292"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:13300"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyA's origin.",
            "line": " v3/planck.js:13319"
        },
        {
            "message": "Missing item type\nThe local anchor point relative to bodyB's origin.",
            "line": " v3/planck.js:13325"
        },
        {
            "message": "Missing item type\nThe local joint axis relative to bodyA.",
            "line": " v3/planck.js:13331"
        },
        {
            "message": "Missing item type\nGet the current joint translation, usually in meters.",
            "line": " v3/planck.js:13337"
        },
        {
            "message": "Missing item type\nGet the current joint translation speed, usually in meters per second.",
            "line": " v3/planck.js:13350"
        },
        {
            "message": "Missing item type\nIs the joint motor enabled?",
            "line": " v3/planck.js:13358"
        },
        {
            "message": "Missing item type\nEnable/disable the joint motor.",
            "line": " v3/planck.js:13364"
        },
        {
            "message": "Missing item type\nSet the motor speed, usually in radians per second.",
            "line": " v3/planck.js:13372"
        },
        {
            "message": "Missing item type\nGet the motor speed, usually in radians per second.",
            "line": " v3/planck.js:13380"
        },
        {
            "message": "Missing item type\nSet/Get the maximum motor force, usually in N-m.",
            "line": " v3/planck.js:13386"
        },
        {
            "message": "Missing item type\nGet the current motor torque given the inverse time step, usually in N-m.",
            "line": " v3/planck.js:13397"
        },
        {
            "message": "Missing item type\nSet/Get the spring frequency in hertz. Setting the frequency to zero disables\nthe spring.",
            "line": " v3/planck.js:13403"
        },
        {
            "message": "Missing item type\nSet/Get the spring damping ratio",
            "line": " v3/planck.js:13413"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyA in world coordinates.",
            "line": " v3/planck.js:13422"
        },
        {
            "message": "Missing item type\nGet the anchor point on bodyB in world coordinates.",
            "line": " v3/planck.js:13428"
        },
        {
            "message": "Missing item type\nGet the reaction force on bodyB at the joint anchor in Newtons.",
            "line": " v3/planck.js:13434"
        },
        {
            "message": "Missing item type\nGet the reaction torque on bodyB in N*m.",
            "line": " v3/planck.js:13440"
        },
        {
            "message": "Missing item type\nThis returns true if the position errors are within tolerance.",
            "line": " v3/planck.js:13607"
        },
        {
            "message": "Missing item type\nDeserialize a data object.",
            "line": " v3/planck.js:13765"
        },
        {
            "message": "Missing item type\nRestore a ref object or deserialize a data object.\n\nThis is passed as callback to class deserializers.",
            "line": " v3/planck.js:13778"
        },
        {
            "message": "Missing item type\nFind the max separation between poly1 and poly2 using edge normals from\npoly1.",
            "line": " v3/planck.js:14019"
        },
        {
            "message": "Missing item type\nFind edge normal of max separation on A - return if separating axis is found<br>\n Find edge normal of max separation on B - return if separation axis is found<br>\n Choose reference edge as min(minA, minB)<br>\n Find incident edge<br>\n Clip\nThe normal points from 1 to 2",
            "line": " v3/planck.js:14088"
        },
        {
            "message": "Missing item type\nThis structure is used to keep track of the best separating axis.",
            "line": " v3/planck.js:14369"
        },
        {
            "message": "Missing item type\nThis holds polygon B expressed in frame A.",
            "line": " v3/planck.js:14377"
        },
        {
            "message": "Missing item type\nReference face used for clipping",
            "line": " v3/planck.js:14388"
        },
        {
            "message": "Missing item type\nThis function collides and edge and a polygon, taking into account edge\nadjacency.",
            "line": " v3/planck.js:14404"
        },
        {
            "message": "Missing item type",
            "line": " v3/planck.js:14768"
        },
        {
            "message": "Missing item type\nPlanck.js v1.0.0-alpha.4",
            "line": " v3/planck.min.js:1"
        }
    ]
}